

		      С О Д Е Р Ж А Н И Е
						       Стр.
1.	  Введение  . . . . . . . . . . . . . . . . . .    6
2.	  Назначение программы	. . . . . . . . . . . . .  9
3.	  Условия применения  . . . . . . . . . . . . . . 11
3.1.	  Требования к составу технических средств  . . . 11
3.2.	  Требования к программному обеспечению   . . . . 11
4.	  Обращение к программе . . . . . . . . . . . . . 12
5.	  Характеристики программы  . . . . . . . . . . . 19
6.	  Описание основных функций . . . . . . . . . . . 23
6.1.	  Разрешение или запрещение команд
	  микропроцессора типа I80286 . . . . . . . . . . 23
6.2.	  Использование встроенного ассемблера	. . . . . 24
6.3.	  Разрешение/запрещение звукового сигнала . . . . 26
6.4.	  Загрузка определений точек останова из файла	  27
6.5.	  Запись определений точек останова в файл  . . . 27
6.6.	  Сравнение двух областей памяти  . . . . . . . . 28
6.7.	  Koпирование данных из одной области
	  памяти в другую . . . . . . . . . . . . . . . . 29
6.8.	  Определение начального адреса
	  дисассемблирования  . . . . . . . . . . . . . . 30
6.9.	  Заполнение области памяти   . . . . . . . . . . 31
6.10.	  Команда G (выполнить) . . . . . . . . . . . . . 32
6.11.	  Ввод из порта   . . . . . . . . . . . . . . . . 35
6.12.	  Загрузка файла в память . . . . . . . . . . . . 36
6.13.	  Установка адреса окна памяти	. . . . . . . . . 37
6.14.	  Выбор режима отображения  . . . . . . . . . . . 39
6.15.	  Вывод данных в порт	. . . . . . . . . . . . . 41
6.16.	  Kорректировка содержимого памяти  . . . . . . . 41
6.17.	  Печать дисассемблированного кода  . . . . . . . 42
6.18.	  Печать данных в шестнадцатеричном
	  виде и в коде KOИ-8	. . . . . . . . . . . . . 43
6.19.	  Распечатка записей трассировки  . . . . . . . . 44
6.20.	  Завершение работы и возврат в ДОС или переход
	  в резидентный режим . . . . . . . . . . . . . . 45
6.21.	  Команда установки регистра  . . . . . . . . . . 47
6.22.	  Команда поиска  . . . . . . . . . . . . . . . . 48
6.23.	  Отображение данных трассировки  . . . . . . . . 50
6.24.	  Запись данных в файл	. . . . . . . . . . . . . 51
6.25.	  Загрузка буфера клавиатуры
	  (загрузка макрокоманды)   . . . . . . . . . . . 52
6.26.	  Режим обучения (генерация макроопределения) . . 53
6.27.	  Запись информации о нажатых клавишах в файл
	  (сохранение макроопределений)   . . . . . . . . 53
6.28.	  Выполнение записанных нажатий
	  клавиш (выполнение макрокоманды)  . . . . . . . 54

7.	  Эксплуатация программы    . . . . . . . . . . . 57
7.1.	  Описание языка запросов пользователя	. . . . . 57
7.1.1.	  Описание параметров команд	. . . . . . . . . 57
7.1.1.1.  Спецификация файла (фспец)  . . . . . . . . . . 57
7.1.1.2.  Адрес (адр)	. . . . . . . . . . . . . . . . . 58
7.1.1.3.  Длина   . . . . . . . . . . . . . . . . . . . . 59
7.1.1.4.  Значение  . . . . . . . . . . . . . . . . . . . 59
7.1.1.5.  Регистр (peг) . . . . . . . . . . . . . . . . . 60
7.1.1.6.  Строка  . . . . . . . . . . . . . . . . . . . . 60
7.1.2.	  Точки останова по условию . . . . . . . . . . . 60
7.1.2.1.  Поле адреса	. . . . . . . . . . . . . . . . . 62
7.1.2.2.  Поле условия	. . . . . . . . . . . . . . . . . 64
7.1.2.3.  Поле счетчика   . . . . . . . . . . . . . . . . 68
7.1.2.4.  Поле действия   . . . . . . . . . . . . . . . . 69
7.2.	  Входные и выходные данные   . . . . . . . . . . 71
7.3.	  Описание способа работы с программой	. . . . . 72
7.3.1.	  Выполнение одного шага программы (F1)   . . . . 74
7.3.2.	  Шаг выполнения процедуры  (F2)  . . . . . . . . 75
7.3.3.	  Извлечение последней команды (F3)   . . . . . . 76
7.3.4.	  Вывод справочной информации (F4)  . . . . . . . 76
7.3.5	  Вход в меню определения точек останова (F5) . . 80
7.3.5.1.  Ввод точек oстанова и редактирование	. . . . . 82
7.3.5.2.  Просмотр записей трассировки (F1) . . . . . . . 85
7.3.5.3.  Чтение определений точек останова из файла (F3) 85
7.3.5.4.  Вывод справочной информации (F4)  . . . . . . . 86
7.3.5.5.  Возврат к основному экрану (F5) . . . . . . . . 88
7.3.5.6.  Сохранение в файле определений
	  точек останова (F7) . . . . . . . . . . . . . . 88
7.3.5.7.  Установка курсора на окно дисассемблера (F8). . 88
7.3.5.8.  Сброс всех точек останова (F9)  . . . . . . . . 89
7.3.6.	  Переключение экрана (F6)  . . . . . . . . . . . 89
7.3.7.	  Перемещение курсора на одно поле вверх (F7) . . 90
7.3.8.	  Перемещение курсора на одно поле вниз (F8)  . . 91
7.3.9.	  Перемещение курсора на одно поле влево (F9) . . 91
7.3.10.   Перемещение курсора на одно поле вправо (F10)   91
7.3.11.   Перемещение курсора и редактирование данных
	  основного экрана    . . . . . . . . . . . . . . 92
7.3.11.1. Область регистров   . . . . . . . . . . . . . . 92
7.3.11.2. Окна памяти . . . . . . . . . . . . . . . . . . 94
7.3.11.3. Сдвиг окна по памяти вверх и вниз   . . . . . . 96
7.3.12.   Ввод командной строки и ее редактирование . . . 97
7.3.12.1. Редактирование команд   . . . . . . . . . . . . 98
7.3.12.2. Обработка ошибок при вводе команд . . . . . . .100
8.	  Сообщения программы	. . . . . . . . . . . . .102

			1. ВВЕДЕНИЕ

     Полноэкранный отладчик SDT  обеспечивает  режим  интер
активного  доступа  ко	всем  ресурсам	микро-ЭВМ  и удобный
интерфейс для отладки программ.
     Во время работы SDT на экране  отображается  содержимое
всех  регистров  процессора, четыре верхних элемента стека и
до  девяти  строк  дисассемблированного  кода.	Кроме	того
имеется  два  независимых  окна на память, которые позволяют
отображать   содержимое   ячеек   оперативной	 памяти    в
шестнадцатеричном  виде  и в коде КОИ-8. Дисассемблированный
код или данные в шестнадцатеричном виде  или  в  коде  КОИ-8
могут  быть  выведены  на  печать  или	в  файл. Интерфейс с
пользователем  организован  очень  продуманно,	 обеспечивая
максимальное удобство в работе.
     Наиболее	часто	используемые   функции	 могут	быть
выполнены с помощью  функциональных  клавиш.  Команды  имеют
длину	от  одного  до	двух  символов	и  для	проверки  их
синтаксиса можно, не  прерывая	работы,  вызывать  вывод  на
экран  справочной информации. Шаг выполнения программы может
быть выполнен нажатием единственной клавиши. Даже процедуры,
которые вызываются отлаживаемой программой  с  помощью	CALL
или  INT могут быть выполнены нажатием единственной клавиши.
Любая  ошибка  ввода  вызывает	печать сообщения об ошибке и
курсор позиционируется	на  символ,  где  во  время  разбора
команды была обнаружена ошибка.
     Введенные команды	могут  быть  повторно  извлечены  из
стека  команд  для  повторения	операции  с помощью функцио
нальной клавиши.
     Команды и другая информация могут быть записаны в	файл
или   во   внутренний	буфер	для  выполнения  в  качестве
макрокоманды.  Это  позволяет  выполнять   запуск   SDT   из
командного файла для установки точек останова по условям или
просто	для  выполнения  последовательности команд с помощью
макроопределения. Код загруженой программы дается на  экране
в   дисассемблированном   виде,   при	этом  поддерживается
мнемоника всех команд микропроцессора типа I8088  и  I80286,
что  позволяет читать код так же легко, как и исходный код с
помощью экранного редактора текстов.
     Машинные инструкции в коде программы могут  быть  легко
изменены   с  помощью  встроенного  в  SDT  ассемблера.  Для
трансляции новой инструкции курсор  устанавливается  в	окне
дисассемблированного  текста  на  инструкцию,  которую нужно
заменить,  инструкция  может  быть  изменена  вводом   новых
символов поверх дисассемблированного текста.
     Прикладные  программы,  использующие  вывод  данных  на
экран,	могут  использовать  для  этого  другой   дисплейный
адаптор  и  экран,  чтобы  избежать смешения выходных данных
программы с выводом на экран, выполняемым SDT. Это возможно,
если на микро-ЭВМ установлены как монохромный, так и цветной
графический адапторы. При работе  на  ЭВМ  с  одним  экраном
пользователь  может выбрать режим альтернативного экрана для
разделения данных, выводимых SDT  и  прикладной  программой.
Переключение  между  экранами  выполняется с помощью нажатия
единственной клавиши.
     Набор функций  SDT  в  настоящий  момент  полностью  не
реализован   ни  в  одном  другом  отладчике.  Программисты,
однажды поработавшие с SDT, никогда не откажутся  больше  от
его использования в повседневной работе.

		   2.НАЗНАЧЕНИЕ ПРОГРАММЫ

     Полноэкранный   отладчик	SDT   существенно  облегчает
отладку и анализ программного обеспечения для микро-ЭВМ типа
ЕС1840.
     Эта  программа  предназначена  в  первую  очередь	 для
отладки  программ,  написанных на языке ассемблера, но может
быть использована и  для  отладки  программ,  написанных  на
языках высокого уровня.
     SDT  рекомендуется  использовать  при  изучении системы
команд и программирования на языке ассемблера,	так  как  он
предоставляет	возможность  иметь  в  интерактивном  режиме
полный доступ ко всем регистрам процессора и ячейкам памяти.
     Посредством SDT могут быть загружены для отладки  файлы
типа EXE или СОМ.
     На пошаговое выполнение или  трассировку  процедур  ДОС
или  процедур  обработки  прерываний  BIOS  не накладывается
никаких ограничений.
     Широкие возможности определения точек  останова  позво
ляют  прерывать  выполнение программы по заданному адресу, а
также обеспечивают проверку указанных условий и, в случае их
истинности,  выполнение  определенных  действий,  таких  как
трассировка,  останов  или  сброс  счетчика  проходов  точки
останова.  Можно  определять  до  восьми   точек   останова,
указывая их адреса, несколько  условий	выполнения  заданных
действий,  объединенных  операцией  логического "И" (AND), а
также  определяя  значение  счетчика  проходов	через  точку
останова и сами действия, которые необходимо выполнить.
     Определения точек останова могут быть сохранены в файле
и впоследствии вновь использованы.
     Отладчик предоставляет возможность трассировки програм
мы.  Режим  трассировки  может	быть  задан  так,  чтобы  не
протоколировались инструкции, выполняемые в процедурах обра
ботки прерываний. Записи  трассировки  содержат  выполненные
инструкции,   текущее	содержимое  регистров  и  содержимое
верхних   четырех   элементов	стека.	 Записанные   данные
трассировки  могут  быть просмотрены в полноэкранном режиме,
либо выведены в файл или на печать.
     При работе отладчика в резидентном режиме он может быть
вызван по запросу пользователя	с  клавиатуры  или  нажатием
кнопки немаскируемого прерывания (NMI), если она установлена
аппаратно.  Это  позволяет  получить  управление  даже, если
отлаживаемая программа зависла,  установив  флаг  запрещения
прерываний, и система не воспринимает ввод с клавиатуры.
     Если  SDT	больше не используется, память, занятая SDT,
может быть возвращена системе при условии, что	выше  SDT  в
памяти нет других резидентных программ.


		   3. УСЛОВИЯ ПРИМЕНЕНИЯ

     Условия,  необходимые для выполнения программы, опреде
ляются требованиями к составу технических  средств  и  прог
раммному обеспечению.

     3.1. Требования к составу технических средств

     ППП ОСВОЕНИЕ-МИКРО предназначен для функционирования на
16-разрядных микро-ЭВМ	на  базе  микропроцессорного  набора
К1810 ВМ 86 (или эквивалентного), таких как ЕС-1840, ЕС-1839
("Правец-16") и др.
     Минимальная конфигурация должна включать:
     - 16-разрядный центральный процессор;
     - оперативную память объемом не менее 256 Кбайт;
     - 1 накопитель на твердом диске (необязательно);
     - 1 накопитель на гибком магнитном диске  (или 2 в слу
       чае отсутствия накопителя на твердом диске);
     - алфавитно-цифровой дисплей.

     3.2. Требования к программному обеспечению

     ППП ОСВОЕНИЕ-МИКРО можно эксплуатировать под управлением
операционной системы MS-DOS версии 3.10 и выше	или совмести-
мой с ней.
		  4. ОБРАЩЕНИЕ К ПРОГРАММЕ

     Для  запуска  SDT	его  необходимо загрузить в память с
помощью ввода команды:
	 {устр:} SDT {фспец} {парам} {"команда SDT}
в ответ на подсказку ДОС (Например,'C:>').
     В фигурных скобках  указаны  необязательные  параметры.
Параметр  'устр:'  должен быть указан и определять дисковод,
на котором находится SDT.COM, если он отличен от  дисковода,
используемого  по  умолчанию. Если указан параметр 'фспец.',
то  для  указанного  файла  после  запуска  SDT  выполняется
команда загрузки 'L' (подробнее она описана в п.6.11).
     После спецификации файла, если нужно, могут быть заданы
параметры,  которые  помещаются  в  префиксный сегмент (PSP)
отлаживаемой программы. Используя двойную кавычку (") отлад
чику  могут быть переданы дополнительные команды. Если в SDT
передается более одной дополнительной  команды,  они  должны
быть разделены двойной кавычкой (").  Обычно  таким  образом
передается  команда  выполнения  макрокоманды  для автомати
ческой	установки  параметров  отладки	(подробнее  описание
команды 'ХХ' дано в подразд. 6.28).
     Для того, чтобы передать  в  SDT  указание  об  исполь
зовании  функциональной  клавиши, нужно ввести '#n', где n -
это номер выбранной функциональной клавиши.  После  указания
функциональной	клавиши  не  должно  следовать знака двойной
кавычки ("), так как (") транслируется в код клавиши Enter.

     Соответствующие   функциональные	клавиши  вводятся  в
следующем виде:
     F1 F2 F3 F4 F5 F6 F7 F8 F9 F10
     #1 #2 #3 #4 #5 #6 #7 #8 #9 #10
     Если SDT запускается без  перечисленных  необязательных
параметров,  то  выводится  экран с названием программы. Для
продолжения работы необходимо нажать  какую-нибудь  клавишу,
после чего появляется основной экран SDT.
     В случае, если необязательные параметры заданы, экран с
названием   программы	не  выводится,	а  сразу  появляется
основной экран SDT общий вид которого приведен на рис. 1.

		 Основной экран SDT

AX 0032   SI 0652   CS 37D6   IP 0198	 Стек +0 0223	       ФЛАГИ 0200
BX 0000   DI 0000   DS 37D6		      +2 0652
CX 0423   BP 0045   ES 3051   HS 2064	      +4 5AC1	 OF DF IF SF ZF AF PF CF
DX 2053   SP FEE0   SS 37D6   FS 37D6	      +6 3981	  0  0	1  0  0  0  0  0
║───────────────────────────────────────────┬───────────────────────────────────
│ └─> g,CS:236╝ 			    │ 1 	  8  9	A  B  C  D  E  F
└───────────────────────────────────────░08░┤ HS:[DI]	 2A C8 80 F9 28 72 06 8A
     *** В Ы П О Л Н Е Н И Е ***	    │ HS:0008	 0E 24 02 EB DF 89 3E 20
0198░2E88260601░░░░░MOV░░░░CS:[0106],AH░░░░░│ HS:0010	 02 80 26 21 02 80 89 3E
019D EBE8	    JMP    0187 	    │ HS:0018	 22 02 30 36 23 02 81 CF
019F 0AC0	    OR	   AL,AL	    │ HS:0020	 00 80 80 CE 80 80 F9 10
01A1 CB 	    RET    Far		    │ HS:0028	 72 0B 8A E7 8B DA 33 D2
01A2 803ECA0302     CMP    [03CA],02	    │ HS:0030	 80 E9 10 EB F0 80 F9 08
01A7 750B	    JNZ    01B4 	    │ HS:0038	 72 0D 8A E3 8A DF 8A FA
01A9 803ECB031B     CMP    [03CB],1B	    │ HS:0040	 8A D6 32 F6 80 E9 08 0A
01AE 7504	    JNZ    01B4 	    │ HS:0048	 C9 74 0A D1 EA D1 DB D0
────────────────────────────────────────────┴────────────────┬──────────────────
2	    0  1  2  3	4  5  6  7    8  9  A  B  C  D	E  F │
DS:0390    00 92 A5 AA B1 B2 20 A2   AA AE A4 A5 2E 2E 2E 2E │.Текст в	коде....
DS:03A0    00 00 00 8A 8E 88 2D 38   AE AA AD AE 20 32 00 00 │...КОИ-8	окно 2.
DS:03B0    00 00 00 00 00 14 2E 2E   2E 2E 2E 20 BD AA B0 A0 │........	...экра.
DS:03C0    20 53 44 54 20 77 69 6E   64 6F 77 20 32 FF FF 0F │ SDT win	dow 2...
DS:03D0    07 07 70 0F 07 07 70 0A   07 07 4F 2E 8A 27 0A E4 │..p...p.	..O.К'..
─────────────────────────────────────────────────────────────┴──────────────────
1Шаг░  2ШагПроц░ 3ИзвлКом░ 4Справка░ 5УстBRn░ 6СмЭкр░ 7Вврх░ 8Вниз░ 9Прав░ 0Лев░

			   Рис. 1

     Если при запуске SDT не передано ни одной команды пере-
мещения курсора, то курсор устанавливается  в поле командной
строки,  помеченной  знаком  '└─>'.  (Курсор - это полностью
заполненное мерцающе знакоместо, если редактирование  экрана
SDT выполняется в режиме  замены, а не в в режиме  вставки).
Все команды вводятся в этом. В дальнейшем мы будем ссылаться
на эту часть экрана как на командную строку.
     Поле над командной строкой показывает  содержимое	всех
регистров  процессора  и  четыре верхних элемента стека. Эту
часть экрана в дальнейшем будем называть областью регистров.
Имеются  два  регистра	сегмента  -  HS  и  FS,  которые  не
реализованы  в	процессоре аппаратно. Эти два регистра могут
служить как  вспомогательные.  Они  используются  также  для
идентификации  сегмента  после	выполнения команд поиска или
сравнения.

     Регистр  HS  (вспомогательный регистр сегмента) исполь
зуется в командах  поиска  и  сравнения.  FS  (фиксированный
регистр  сегмента)  используется только в команде сравнения,
если для адресации не  может  быть  использовано  содержимое
никакого другого сегментного регистра.
     Кроме  того,  эти	регистры  могут  использоваться  при
определении значения регистра сегмента для адресации окна  в
памяти,  которое  не должно меняется даже, если отлаживаемая
программа   изменяет   содержимое    регистров	  сегментов.
Пользователь  может  обращаться  к  ним так же, как к другим
регистрам.
     Показанные флаги процессора  имеют  два  представления.
Первое	-  в виде 16-разрядного слова и второе, когда каждый
из восьми флаговых разрядов (OF, DF, IF, SF, ZF,  AF,  PF  и
CF)   представлен  двоичным  значением.  Все  неиспользуемые
разряды слова  флагов  установлены  в  ноль  для  облегчения
интерпретации  16-разрядного  слова флагов. Флаг трассировки
используется SDT и поэтому он недоступен пользователю. Флаги
NT и IOPL в случае  микропроцессора  типа  I80286  не  имеют
значения  при  работе	с  реальными адресами, используемыми
операционной системой ДОС. Поэтому их содержимое не показано
отдельными значениями, а может быть проконтролировано только
при интерпретации флагового регистра, представленного в виде
16-разрядного слова.
     Область  ниже  командной  строки содержит текст отлажи
ваемой	программы  в  дисассемблированном  виде,  начиная  с
ячейки	CS:IP.	Самое  левое  поле  в каждой строке содержит
смещение адреса, следующие шестнадцатеричные значения  пред
ставляют  объектный  код  каждой  инструкции. Дисассемблиро
ванный текст выглядит аналогично ассемблерному листингу,  за
исключением того, что не используются символические имена.
     Вторая  строка  дисассемблированной области показана на
экране в обратном фоне. Инструкция в этой строке  называется
текущей   инструкцией,	 которая  выполняется  следующей  по
команде 'G'  или  'Шаг'  (функциональная  клавиша  F1).  При
выполнении  команды  'Шаг' выполненная инструкция сдвигается
на одну строку вверх. Строка над  строкой  в  обратном	фоне
называется строкой предыдущей команды.
     Эта  верхняя строка дисассемблированной области (строка
предыдущей команды) перекрывается выводимыми  сообщениями  о
состоянии  системы  и  сообщениями  об	ошибках,  когда  они
появляются.  Поэтому  на  эту  строку	в   зависимости   от
информации, которая в ней представлена, ссылаются также, как
на строку состояния.
     Дисассемблируемая область может быть сдвинута  вверх  и
вниз с помощью клавиш 'курсор вверх' и 'курсор вниз', клавиш
PgUp  и  PgDn.	При  сдвиге  дисассемблируемой	области  для
отображения кода с соответствующего адреса используются  все
9  строк  (включая  строку  предыдущей	команды). При сдвиге
дисассемблируемой области с помощью  клавиш  'курсор  вверх'
или  PgUp  назад  в  область,  не содержащую кода программы,
может появляться сообщение:
       'Нельзя дисассемблировать назад - данные'
     Если это сообщение выводится при  использовании  режима
автоповтора клавиатуры, буфер клавиатуры может быть очищен с
помощью ввода Ctrl/Break.

     В	случае,  если текущая инструкция ссылается на ячейку
памяти, содержимое этой ячейки показывается в обратном	фоне
в  конце  строки,  расположенной  после  командной строки. В
зависимости от типа инструкции может быть показано  значение
слова или байта.
     Область  справа  от  командной строки - это окно памяти
номер 1, а область под	дисассемблируемой  областью  -	окно
памяти	номер  2.  Каждое  окно  в  первой  колонке содержит
адреса, а содержимое памяти  выводится	в  шестнадцатеричном
виде. Смещение от начального адреса каждой строки показано в
верхней строке каждого окна.
     В каждой строке окна 1 в шестнадцатеричном виде показа
ны восемь байтов.
     Окно  2  разделено  на  две области, которые используют
одни и те  же  адреса.	Левая  часть  отображает  содержимое
памяти	также как и окно 1, но по 16 байтов в строке. Правая
часть показывает содержимое той же  области  памяти,  что  и
левая, но в коде КОИ-8. Адреса окон могут отличаться друг от
друга.
     Все  символы,  выведенные	с повышенной яркостью, могут
быть  изменены	пользователем  вводом  на  их  место   новых
значений.  Курсор  можно свободно передвигать в каждом окне.
Для перехода из одного	окна  в  другое  нужно	использовать
клавиши  F7-F10,  как  это  описано  в	п.п. 7.3.7 - 7.3.10.
     Если  в  команде  вызова  SDT  указано  имя  файла,  то
выполняется загрузка этого файла, а если есть дополнительные
команды, они передаются в SDT в порядке,  указанном  пользо
вателем.  Эти  команды,  а также команда загрузки остаются в
стеке  сохраненных  команд,  что  позволяет   выполнить   их
последующий просмотр для проверки.
     При загрузке SDT по умолчанию вывод сообщения об ошибке
сопровождается	звуковым  сигналом. Он может быть выключен с
помощью команды ВЕЕР OFF.
     SDT  проверяет  также  тип  процессора,  на  котором он
выполняется. В соответствии  с	этим  устанавливается  режим
дисассемблера и ассемблера, определяющий  используемое	под
множество  мнемоники  машинных	инструкций. Этот режим может
быть изменен с помощью команды '286'.
     Если  по включению  питания SDT  нужно резидентно уста-
новить	в  системе,  то  в качестве последней команды в файл
AUTOEXEC.BAT должна быть включена команда:
     SDT "QUIT R
     Эта команда загружает SDT и  немедленно  завершает  его
работу,  оставляя  загруженным	в  резидентном	режиме.  Все
другие резидентные программы должны  загружаться  перед  SDT
для  того,  чтобы  впоследствии позволить освободить память,
используемую отладчиком.

		5. ХАРАКТЕРИСТИКИ ПРОГРАММЫ

     SDT   представляет   собой  СОМ-файл,  загружаемый  для
выполнения  операционной  системой  ДОС.  После  запуска SDT
резервирует  память,  начиная  с  последнего   используемого
адреса,   для	загрузки  тестируемой  прикладой  программы.
Управление передается прикладной программе либо по  команде,
либо  по  нажатию  функциональной  клавиши. Если не включена
трассировка, прикладная  программа  выполняется  в  реальном
времени,  до  тех пор пока управление не возвращается в SDT.
Выполнение  программы  может  быть  прервано   пользователем
нажатием  клавиш  Ctrl/Esc,  нажатием  кнопки немаскируемого
прерывания  (NMI)  (если  она  аппаратно  установлена)	 или
посредством определения точки останова.
     Точки  останова могут быть определяются пользователем с
помощью  меню  определения  точек  останова  или  включением
инструкции INT3 в код отлаживаемой  программы.	При  обнару
жении  точки  останова, определенной вне SDT, после останова
программы выводится сообщение 'BRx'.
     Koгда  работа  SDT  завершается  по команде 'QUIT', вся
память возвращается в общесистемный  пул  свободной  памяти,
кроме  случая,	когда  SDT  запущен  в резидентном режиме по
команде 'QUIT RESIDENT'. В этом случае только область памяти
после SDT возвращается в систему. Для возвращения управления
обратно в  отладчик  может  быть  использована	кнопка	NMI,
клавиши Ctrl/Esc или активные точки останова.
     Примечание. Процедуры ДОС не являются  реентерабельными
(повторно  входимыми).	При  отладке или прерывании процедур
ДОС не должно запускаться никаких функций SDT для  работы  с
файлами  или  функций  печати,	так  как  SDT использует для
выполнения файловых операций некоторые из функций ДОС, что в
этом случае может привести к непредсказуемым результатам.
     При работе в резидентном режиме отлаживаемая  программа
не  может  быть  загружена  с  помощью команды загрузки SDT.
Загрузка  может  быть выполнена с помощью загрузчика ДОС или
посредством повторной загрузки SDT, пока одна  копия  выпол
няется	в резидентном режиме. Если после SDT нет загруженных
резидентных программ, то отладчик  может  быть	выгружен  из
резидентого режима по команде 'QUIT' используемая память при
этом возвращается в систему.
     Примечание. Для передачи управления клавиатуре  исполь
зуется	вектор	прерывания  9.	Поэтому  драйвер клавиатуры,
используемый, например,  для  поддержки  символов  кирилицы,
должен	быть  загружен	перед  SDT.  В	общем случае вектора
прерываний 1, 2,  3  и	9  не  должны  изменяться  пока  SDT
активен.
     Ниже  приводится  краткий список функций и возможностей
SDT.  Подробнее  они  описаны  в  соответствующих   разделах
данного руководства:
     - легкость использования и высокая функциональность;
     - полноэкранное  отображение  всей необходимой информа
ции;
     - изменение содержимого регистров	и  памяти  в  режиме
полноэкранного редактирования;
     - автоматическая установка параметров и  выполнение  по
командам из командного файла;
     - поддержка клавиатурных макрокоманд;
     - возможность  получения  справочной   информации	 без
прерывания отладки;

     - функция извлечения ранее введенных команд;
     - дисассемблирование машинных инструкций;
     - встроенный ассемблер машинных инструкций;
     - поддержка  теневого  или  альтернативного  экрана для
вывода данных отлаживаемой программой;
     - поддержка как монохромного так и цветного адаптера;
     - пошаговое выполнение программы и возможность выполне
ния за один шаг целиком процедуры или подпрограммы;
     - резидентный  режим  работы и возможность последующего
освобождения используемой памяти.
     - возможность прерывания программы посредством:
- ввода с клавиатуры Ctrl/Esc;
- условных точек останова;
- программных прерываний (INT3);
- сигнала немаскируемого прерывания (NMI);
     - определение до  8  точек останова по условиям.
 Действия выполняемые в случае истинности условий:
- останов;
- включение/выключение трассировки;
- обнуление счетчика проходов;
     - возможность подавления трассировки процедур INT;
     - быстрая трассировка по  условиям,  во  время  которой
записываются инструкции и содержимое регистров;
     - одна  дополнительная  точка  останова  по  указанному
адресу;
     - команды	корректировки  содержимого  памяти  и поиска
       заданных строк;
     - команды копирования и сравнения областей данных;
     - вывод  дисассемблированного  кода, данных или записей
трассировки на печать или в файл;
     - вычисление  шестнадцатеричных  арифметических выраже
ний.

		6. ОПИСАНИЕ ОСНОВНЫХ ФУНКЦИЙ

     К основным функциям SDT пользователь может обратиться с
помощью функциональных клавиш и  указывая в командной строке
соответствующие команды полноэкранного отладчика.
     В	данном	разделе описываются все команды SDT, которые
можно вводить в командной строке. Все 28 команд  описываются
в алфавитном порядке. Большинство команд имеют длину 1 или 2
символа   и   могут   быть  введены  как  строчными,  так  и
промежуточными	буквами.  Команду  QUIT  необходимо  вводить
полностью,  что позволяет избежать нежелательного завершения
программы.
     Все символы,  показанные  в  описании  команд  большими
буквами,  должны  быть	введены. Некоторые команды допускают
сокращение, например, команда BEEP. Символы,  которые  можно
опускать,  заключены в скобки (), например BE(EP).  Параметр
OFF можно задавать и с одним F.
     Параметры, задаваемые в командах, описаны в п.7.1.1.

     6.1. Разрешение или запрещение команд
	     микропроцессора типа I80286

     Формат команды: 286 (ON)
			 (OFF)
     Примеры:	     286
		     286 ОN
		     286 OFF
     Команда '286' может быть  использована  для  разрешения
или   запрещения  дисассемблирования  дополнительных  команд
микропроцессора типа I80286. Ассемблер	находится  всегда  в
том же режиме, что и дисассемблер. При запуске SDT проверяет
тип  процессора,  на котором он выполняется и соответственно
выбирает режим работы.
     Для определения режима работы SDT команда 286  вводится
без   параметров.   SDT   указывает  состояние	(ON-включен,
OFF-выключен) в командной строке и подсказывает пользователю
о необходимости нажать клавишу для продолжения работы.
     Примечание. Когда режим  286  разрешен  при  работе  на
микро-ЭВМ  с  процессором,  не поддерживающим дополнительные
команды, эти команды только отображаются на экране.  Они  не
могут быть выполнены.
     Особое  внимание  следует обратить на привилегированные
команды,  которые   выполняются   на   микро-ЭВМ   на	базе
микропроцессора типа I80286. Большинство этих команд  должны
использоваться	только	в  защищенном  режиме,	IOPL=0.  SDT
подразумевает,	что  работа  идет в режиме реальных адресов.
Изменение этого  режима  может	привести  к  непредсказуемым
результатам.


     6.2. Использование встроенного ассемблера

     Формат команды: А {адрес}
     Пример:	     А
		     А CS:100
     Aссемблер может быть вызван с помощью команды 'А'. Если
параметр 'адрес' не указан, то ассемблирование начинается  с
текущей  команды.  В противном случае - с указанного адреса.
Выбранная ячейка должна находиться в оперативной памяти.
     После  ввода  этой  команды  SDT  переходит   в   режим
ассемблирования.    Курсор    устанавливается	 на   строку
дисассемблированного кода, выведенную  в  обратном  фоне,  и
символы  в  этой строке выводятся с повышенной яркостью, как
во всех входных полях SDT. Командная  строка  заменяется  на
сообщение о том, что SDT находится в режиме ассемблера и для
выхода из этого режима необходимо нажать Ctrl/Home.
     В	 дополнение   к   обычным  клавишам,  поддерживающим
редактирование командной строки,  Tab  может  использоваться
для  перемещения курсора с поля мнемоники на поле операнда и
обратно.
     Клавиши 'курсор вверх' и 'курсор вниз' используются для
сдвига дисассемблируемого окна как и во время обычного ввода
команды.  Все  введенные  символы  преобразуются  в  символы
верхнего регистра.
     Все  функциональные клавиши поддерживаются так же как в
обычном режиме ввода команд. Все изменения в  ассемблируемой
строке	игнорируются,  если  они  не были закончены нажатием
клавиши Enter. Команды могут быть изменены или заменены  как
в  поле мнемоники, так и в поле операндов. Введенная команда
ассемблируется и,  если  ошибок  не  обнаружено,  содержимое
ячейки памяти изменяется на новое значение. Кроме того, окно
дисассемблера перемещается, устанавливая курсор на следующую
команду.
     Примечание.  Заменяемая  команда  может  иметь  длину в
байтах отличную от длины новой команды. Это может привести к
тому,  что  следующие  инструкции  будут  интерпретироваться
иначе.
     В зависимости от режима, заданного командой '286' может
быть использована мнемоника всех команд или только мнемоника
основных    команд.    Если    дополнительные	команды   не
поддерживаются, выдается сообщение об ошибке:
		 'Ошибка мнемоники'
     Поддерживается  полная   мнемоника   инструкций,	даже
синонимы  (такие  как  JB/JC).	Для  синонимов	генерируется
одинаковый код. Однако дисассемблер отображает	только	одно
представление синонимов.
     Из-за   ограниченной  длины  строки  для  представления
указателей выбрана специальная	мнемоника.  Индикатор  "WORD
PTR"  отображается  как  "W/", а "BYTE PTR" - как "В/". Eсли
для однооперандной  команды,  которая  указывает  на  ячейку
памяти	(например  INC	[1234]),  не заядан указатель, то по
умолчанию подразумевается операция над словами.


     6.3. Разрешение/запрещение звукового сигнала

     Формат команды: BE(ep) (ON)
			    (OFF)
     Пример:	     BE
		     BE ON
		     BEEP OFF
     Эта команда  разрешает  и	запрещает  звуковой  сигнал,
сопровождающий	вывод  сообщений  об  ошибках.	По умолчанию
после запуска SDT выдача звукового сигнала разрешена.
     Для ввода команды достаточно ввести первые два  символа
команды и параметр.
     При  вводе  команды  без  параметров  в командой строке
выводится текущее состояние  и	подсказка  о  том,  что  для
продолжения  работы нужно нажать какую-либо клавишу.

     6.4. Загрузка определений точек останова из файла

     Формат команды: BL фспец
     Пример:	     BL A:TEST.SET
     Эта команда используется для чтения с диска файла опре-
делений точек останова. Может быть  использовано  любое  имя
файла,	 но   рекомендуется   в  качестве  расширения  имени
использовать ".SET". Во время выполнения дисковых операций в
строке	состояния  выводится  сообщение:
			  'Чтение'
и  курсор исчезает.
     С	именем	файла  нельзя указывать маршрут. Файл должен
находиться в текущем каталоге или на указанном диске.

     6.5. Запись определений точек останова в файл

     Формат команды: BW фспец
     Пример:	     BW TEST.SET
     Эта команда используется для записи текущих определений
точек останова в  дисковый  файл.  Может  быть	использовано
любое  имя  файла,  но	рекомендуется  в качестве расширения
имени использовать  ".SET".  Во  время  выполнения  дисковых
операций  в  строке состояния выводится сообщение:
			  'Запись'
и курсор исчезает.
     С именем файла нельзя указывать  маршрут.	Файл  должен
находиться в текущем каталоге или на указанном диске.


     6.6. Сравнение двух областей памяти

     Формат команды: С адр.1, адр.2,   длина
     Пример:	     С DS:100,FOOO:123,%100
		     С 100,   HS:0123, CХ*2
     Эта  команда  сравнивает  две области памяти. Для обоих
адресных  параметров  в  качестве   умолчания	используется
текущий  сегмент  данных  -  DS.  Количество байтов, которые
нужно  сравнить,  определяется	параметром   'длина'.   Если
указанная  длина  выходит  за  границы	сегмента,  адрес  не
изменяется циклически на  первый  адрес  этого	сегмента,  а
переходит на следующий сегмент.
     Если  все	байты  указанных  областей  совпадают,	то в
строке состояния выводится сообщение:
		    'Все  байты  равны'
и командная строка очищается.
     В	случае	различия  между  двумя	областями для вывода
содержимого используются оба окна памяти. В окне 1 выводятся
данные,  адресуемые первым  параметром,  начиная  с  первого
несовпадающего	байта.	Окно  2 используется для отображения
второй области. Если задано абсолютное значение  сегментного
регистра,   которое  отличается  от  всех  текущих  значений
сегментных  регистров,	то  для  адресации  окна   1   будет
использоваться	регистр  HS.  Если  HS	и  регистры сегмента
процессора не могут быть использованы для адресации окна  2,
то  будет  использоваться  регистр FS и модифицироваться для
второго окна.
     Командная строка не очищается  и  курсор  указывает  на
начало	второго  операнда.  Это  позволяет  в  случае непра
вильного ввода изменить указанный  адрес.  Для	ввода  новой
команды строка должна быть очищена нажатием клавиши Esc.


     6.7.Koпирование данных из одной области памяти в другую

     Формат команды: CO исх.адр., пр.адр.,  длина
     Примеры:	     CO DS:100,   5023:123, %100
		     CO 100,	  HS:0123,  CX*2
     Содержимое ячеек  памяти,	указанных  исходным  адресом
(исх.адр.),  копируeтся в область, определенную адресом при
емника (пр.адр.). Направление такое же как для команды	COPY
операционной  системы  -  из  первого  параметра  во второй.
Параметр 'длина' определяет количество байтов, которые нужно
скопировать.  Если  указанная  длина  выходит	за   границы
сегмента,  адрес  не  изменяется  циклически на первый адрес
этого сегмента, а переходит на следующий сегмент.
     Во  время выполнения команды курсор исчезает, а команд
ная  строка  содержит  введенную  команду.  Если  все  байты
успешно  скопированы, командная строка очищается и выводится
сообщение:
		    'Байты скопированы'
     Если адрес приемника находится не в оперативной памяти,
то в строке состояния выводится соответствующее сообщение об
ошибке, а командная строка не очищается.

     6.8. Определение начального адреса дисассемблирования

     Формат команды: D адр.
     Примеры:	     D 120
		     D *
		     D FS:100
		     D 123:AX+SI
		     D IP
     Команда 'D' используется для  установки  адреса  начала
дисассемблируемой  области.  Этот адрес может быть задан как
сегмент и смещение.
     Для указания сегмента или смещения могут  быть  исполь
зованы	арифметические	выражения. Если значение сегмента не
указано, то  по  умолчанию  используется  значение  регистра
сегмента  кода,  отображаемого в данный момент. Если сегмент
указан, то это значение  будет	использовано  для  установки
регистра  CS,  который	показан в области регистров. Однако,
если  сегмент  кода   был   изменен   какой-либо   командой,
инструкция,   которая  должна  выполняться  после  последней
выполненной инструкции,  может	быть  повторно	выведена  на
экран командой 'D *'.
     Указатель команд - регистр IP не изменяется командой D.
Значение   указателя  команд  может  быть  использовано  для
определения смещения в виде 'IP' или '*'.
     Указанный адрес должен быть началом инструкции. SDT  не
выполняет   никакого   автоматического	выравнивания.  После
указания адреса, который не содержит первый байт  допустимой
инструкции,  последующий  код интерпретируется так, как если
бы эта	ячейка	была  началом  инструкции.  Неизвестный  код
инструкции  представляется в виде псевдооперации определения
байта (DB xx).
     При вводе команды D, верхняя строка в дисассемблируемой
области   (строка   предыдущей	 команды)    очищается.    В
дисассемблируемой области отображаются 8 дисассемблированных
инструкций,  начиная  с указанного адреса. Первая инструкция
отображается в поле текущей инструкции.
     При сдвиге дисассемблируемой  области  вверх  или	вниз
используются все 9 строк окна дисассемблера.

     6.9. Заполнение области памяти

     Формат команды: F адр, повтор, строка
     Примеры:	     F 1234,1B,23 456A 'текст' 11 'еще текст'
		     F CS:DI+SI, %100, 20
     Команда  заполнения используется для заполнения области
памяти указанной строкой. Начальный адрес может быть задан с
указанием сегмента или без  него.  Для	обеих  частей  могут
применяться арифметические выражения. Если значение сегмента
не указано, то в качестве сегмента по умолчанию используется
текущее содержимое регистра сегмента данных.
     Параметр  'повтор'  указывается с помощью четырех шест
надцатеричных цифр или десятичного значения.  Он  определяет
сколько раз нужно повторить в памяти указанную строку.
     'Строка' может быть любой комбинацией байтов, слов  или
строк  в  KOИ-8. Строки в коде KOИ-8 заключаются в одиночные
кавычки. Если нет закрывающей кавычки,	то  все  символы  до
конца  строки  считаются  символами строки. Слова хранятся в
оперативной памяти в  таком  порядке:  младший	байт,  затем
старший.
     Во время выполнения команды курсор становится невидимым
и  в  строке состояния выводится информационное сообщение. С
помощью этой команды можно изменить  очень  большие  области
памяти,   что	может	потребовать  определенного  времени.
Операция  заполнения  немедленно  прекращается	при  нажатии
любой клавиши.
     Если  в  качестве адреса указана область не оперативной
памяти,  то  выводится	сообщение   об	 ошибке   и   курсор
устанавливается  на параметр 'адр.'. Нужно исправить адрес и
выполнить команду снова или  использовать  клавишу  Esc  для
очистки командной строки.


     6.10. Команда G (выполнить)

     Формат команды: G {нач.адр.} {адр.ост}
     Пример:	     G
		     G *
		     G CS:100
		     G 123, 1100
		     G ,1200
     Команда   G   (выполнить)	 используется	для  запуска
отлаживаемой программы или для выхода обратно  в  прерванную
программу,   если  SDT	выполняется  в	резидентном  режиме.
Необходимо, чтобы  адресные  параметры	ссылались на ячейки,
которые содержат первый  байт допустимых  инструкций, в про-
тивном случае результат выполнения команды непредсказуем.
     Начальный адрес 'нач.адр.' может быть указан  как  сег
мент  и  смещение.  Если  значения  сегмента  не указано, то
используется значение регистра сегмента кода,  отображаемого
в  данный  момент.  Если  CS: указан явно, то значением кода
сегмента  становится  то,  которое  использовала   последняя
выполненная   инструкция.  Оно	может  отличаться  от  того,
которое показано  в  области  регистров  экрана,  если	была
использована команда 'D' для отображения другого сегмента.
     Команда  'G'  без  указания начального  адреса начинает
выполнение с инструкции,  которая  отображена  в  дисассемб
лируемой области в обратном фоне.
     Кроме восьми точек останова,  из определенных с помощью
меню точек останова, может быть непосредственно указана  до-
полнительная точка останова. Если  указанный адрес  останова
находится не в оперативной  памяти, выводится  сообщение  об
ошибке	и  запуск  программы  не  выполняется.	Адрес  точки
останова  может  равняться  начальному адресу. Это часто ис
пользуется для проверки циклов. Выполнение программы прекра
щается, когда указанный адрес достигается во второй раз.
     При  запуске  в  строке состояния	выводится сообщение:
	       '*** В Ы П О Л Н Е Н И Е ***'
и  курсор  становится  невидимым.  Все	установленные  точки
останова активизируются. При прохождении одной из 8 отдельно
определенных точек останова в первой позиции строки  состоя-
ния выводится номер данной точки останова. При каждом прохо-
ждении	точки  останова  интенсивность	вывода	этого номера
изменяется с повышенной  яркости на нормальную	и  наоборот.
Если  достигнута   точка  останова, включающая	трассировку,
то  в конце  строки  состояния выводится  сообщение 'TRACE'.
Этот текст удаляется из строки состояния, когда  трассировка
снова выключается.
     Выполнение отлаживаемой программы	прекращается,  когда
достигается  дополнительная  точка  останова, определенная в
команде 'G' (BR0), или какая-либо из  восьми точек останова,
определенных через меню, в  которой  задано  действие  STOP.
Номер точки  останова,	в  которой  прекратилось  выполнение
программы, указывается в строке состояния.
     Выполнение  программы  прекращается  также  по  запросу
пользователя с	клавиатуры  или  (если	имеется)  с  помощью
кнопки,   вызывающей  немаскируемое  прерывание  (NMI).  Для
останова программы с клавиатуры  нужно	одновременно  нажать
клавиши Ctrl и Esc.
     Если  в  отлаживаемой  программе встречается инструкция
INT3, выполнение также останавливается	в  этой  точке.  SDT
сообщает об этом событии, выдавая сообщение:
		      'Останов на BRn'

     Tекущей  инструкцией является инструкция INT3. Ее необ
ходимо пропустить или заменить	перед  тем,  как  выполнение
программы может быть продолжено.
     Когда управление возвращается в SDT, все области экрана
корректируются и отображают  текущие  значения.  Могут	быть
введены   новые   команды  или	старые	команды  могут	быть
извлечены из стека команд.  Если  SDT  выполняется  в  рези
дентном  режиме,  это  указывается  в  строке  над командной
строкой.
     Когда отлаживаемая программа, загруженная с помощью SDT
завершается  и	возвращает  управление	в  DOS	 с   помощью
прерывания,  все  регистры  сбрасываются в их первоначальное
состояние и все ячейки точек  останова	восстанавливаются  и
содержат свои исходные	коды инструкций. В дисассемблируемой
области выводится начало программы и появляется сообщение.
	    'Программа окончена нормально'
     Примечание. Указатель стека и сегмент стека должны быть
допустимыми и по крайней мере 6 байтов должны быть  доступны
для   команды	G.   В	противном  случае  результаты  будут
непредсказуемы.

     6.11. Ввод из порта

     Формат команды: I адр.
     Примеры:	     I 3EC
		     I 3EC+SI
		     I DX
		     I DX-AX
     Команда 'I' используется для чтения любого 8-разрядного
порта ввода/вывода и отображения текущего значения на  экра
не. Адрес 'адр.' может быть арифметическим выражением.
     После выдачи команды курсор исчезает и командная строка
завершается знаком равенства, за которым следует  шестнадца
теричное значение из порта ввода/вывода.
     В строке состояния выводится сообщение:
	  'Нажатие клавиши - продолжение'
     После  нажатия  клавиши  командная  строка   и   строка
состояния  очищаются  и  курсор  устанавливается  на  начало
командной строки.
     Примечание. Допустимый диапазон адресов 0-3FF.

     6.12. Загрузка файла в память

     Формат команды: L фспец {парам.}, {aдр.}
     Примеры:	     L TEST
		     L TEST.COM
		     L DATA.DAT, DS:1234
     Команда загрузки используется  для  загрузки  в  память
файлов	любого типа. Если расширение имени файла не указано,
по умолчанию используется расширение ".EXE". Если имя файла,
который нужно загрузить не имеет расширения, то  имя  должно
заканчиваться  точкой  (.),  чтобы избежать генерации расши
рения по умолчанию. Когда  параметры  вводятся	после  имени
файла,	эти данные помещаются в префиксный сегмент программы
(PSP). По умолчанию адрес, с которого загружаются эти файлы,
CS:0100.  Если	адрес  указан  без  сегмента,  по  умолчанию
используется текущее значение сегмента кода.
     Во время дисковых операций курсор становится  невидимым
и в строке состояния выводится сообщение:
			 'Чтение'
     Примечание.  Файлы   EXE и  COM не могут быть загружены
командой 'L', когда SDT работает в резидентном  режиме,  так
как  это может привести к противоречиям с диспетчером памяти
операционной системы. Программы должны	загружаться  обычным
загрузчиком  ДОС,  либо SDT может быть вызван повторно, пока
одна копия SDT уже резидентна в памяти.
     Если  отлаживаемая  программа  скомпанована  программой
LINK   с   вариантом  HIGH,  она  не  может  быть  загружена
заказчиком SDT. Для проверки таких программ SDT должен	быть
запущен  в резидентном режиме, после чего нужно использовать
загрузчик операционной	системы.  Для  доступа	к  указанной
точке  кода  программы	пользователь  может  поместить в эту
точку инструкцию INT3.
     Примечание.  После  загрузки  программы  SS:SP   должен
указывать   на	допустимую  ячейку  памяти  перед  тем,  как
программа  будет  запущена.  SDT  использует  при   передаче
управления   отлаживаемой  программе  для  ее  выполнения  3
верхних слова в стеке.


     6.13. Установка адреса окна памяти

     Формат команды: Mn адр.
     Примеры:	     М1 DS:1230
		     M1 ES
		     M2 FS:SI+1000-DI
		     М1 2340:[SI]
		     M2 SI+AX+10
		     M1 [SI]
     Эта  команда  используется  для  установки   начального
адреса	для обoих окон памяти. 'n' может быть 1 или 2 (номер
окна).	Если  введено  имя  регистра,  за  которым   следует
двоеточие (:), текущее имя регистра отображенное в указанном
окне заменяется на вновь введенное имя.
     Если   для  определения  сегмента	адреса	используется
выражение или значение, то регистр HS устанавливается равным
этому значению и вместо имени сегмента в  указанной  области
окна  записывается  HS. Если HS уже используется для другого
окна, данная область также будет указана с помощью HS.	Если
это   не   желательно,	 то  для  окна,  которое  не  должно
изменяться, следует использовать регистр FS.
     Koманда 'М' может быть  использована  и  для  изменения
только	сегмента. В этом случае никакого смещения вводить не
нужно.
     Если значение  сегмента  пропущено,  изменяется  только
смещение   в  указанном  окне.	Смещение  может  быть  любым
выражением  или  одним	значением,  которое  не  выходит  из
диапазона 16-ти разрядного слова.
     Для  указания  смещения  можно  также  использовать имя
любого	16-ти  разрядного  регистра  в	квадратных   скобках
(например,  [DI]).  Когда  используется  этот  способ,	окно
памяти корректируется в  соответствии  с  текущим  значением
указанного  регистра.  Когда проверяются строковые операции,
этот режим очень удобен, так как  адрес  окна  всегда  равен
содержимому используемого регистра. Этот режим будет сброшен
в нормальный, когда область памяти сдвигается вверх и вниз с
помощью  клавиш  'курсор  вверх' и 'курсор вниз' или указано
другое окно.
     Адрес окна  памяти  может	быть  также  изменен  прямой
заменой символов в поле адреса окна.


     6.14. Выбор режима отображения

     Формат команды:  МО(de)
		      МО(de) M(ono)
		      МО(de) C(olor)
		      МО(de) A(lternative) ON
		      МО(de) A(lternative) OFF

     Команда  MODE  используется  для  выбора  одного  из  4
режимов отображения или для получения информации о том, куда
выводятся данные отлаживаемой программой. Если команда	MODE
вводится  без параметров, текущий режим указывается в строке
состояния.
     При вводе команды могут использоваться любые сокращения
слов, указанных в скобках.
     Первоначально при запуске SDT отлаживаемая программа  и
SDT используют один и тот же экран. Текущий экран системы, с
которого запускается SDT используется обеими программами.
     В	этом режиме вывод на экран, выполняемый отлаживаемой
программой,  будет смешиваться с информацией экрана SDT. Это
означает, что любые  данные,  выводимые  отлаживаемой  прог
раммой,  будут	тут  же  заменяться данными с экрана SDT при
каждом возврате управления. Однако этот режим очень полезен,
когда  отлаживаемая  программа	не  выполняет  операций ото
бражения на экране, так как выполнение программы по шагам не
вызывает переключения на альтернативный экран.
     Независимо от текущего режима экрана при  использовании
параметра  MONO  в  команде  MODE, SDT переключается в режим
монохромного отображения. Команды выбора режима не влияют на
использование экрана отлаживаемой программой. Параметр COLOR
заставляет SDT использовать цветной  экран  в  режиме  80х25
символов.  Если  выбранный  адаптер не установлен, выводится
сообщение об ошибке и режим экрана не изменяется.
     В системах, которые оборудованы только одним монитором,
монохромным или цветным, альтернативный  или  теневой  экран
назначается для использования отлаживаемой программой.
     Когда  введена команда ALTERNATE ON, SDT и отлаживаемая
программа используют один и тот же экран. Содержимое  экрана
и  состояние  курсора сохраняются и восстанавливаются каждый
раз, когда управление передается в  отлаживаемую  программу.
Вместе	с  разрешением	использования альтернативного экрана
может  использоваться функциональная клавиша F6 для переклю
чения основного экрана SDT  на	дополнительный	и  наоборот,
если управление находится в SDT.
     Примечание. Когда альтернативный режим  используется  с
цветным  графическим  адаптером,  SDT  для обработки альтер
нативной функции использует страницу 3 этого адаптера.
     Для запрещения альтернативного экрана  введите  команду
MODE с параметром ALTERNATE OFF.
     Когда  для  SDT  и  отлаживаемой программы используются
разные	экраны	и  выполняемая	программа  переключается  на
экран, который используется SDT, альтернативный режим  вклю
чается	автоматически  и,  когда  SDT  получает  управление,
выводится информационное сообщение.
     Когда  SDT запущен в резидентном режиме, альтернативный
режим экрана включается автоматически.


     6.15. Вывод данных в порт

     Формат команды: О адр.,  знач.
     Пример:	     О 3ЕС,   12
		     О 3EC+SI,1230
		     O DX,    AL
		     O DX-AX, AX+BX*2
     Эта команда  используется	для  посылки  байта  в	порт
ввода/вывода.  Адрес  'адр.'  и  значение 'знач.' могут быть
заданы aрифметическим выражением  или  просто значением,  не
выходящим из диапазона 16-ти разрядного слова.
     Значение, посылаемое в порт  ввода/вывода,  может	быть
байтом	или  словом.  Когда  значение  выражения  может быть
представлено как байт, выполняется вывод байта, в  противном
случае - слова.
     Примечание. Диапазон адресов портов ввода/вывода 0-3FF.

     6.16. Kорректировка содержимого памяти

     Формат команды: Р адр., строка
     Примеры:	     Р 110, 12 3ЕС 'текст' SI
		     P DS:1103, AX 1234
		     P *, 90
     Команда   корректировки   используется   для  изменения
содержимого  памяти.  Адрес  'адр.'  ячейки,  которую  нужно
изменить,  может  состоять  из	сегмента,  и  смещения. Если
значение сегмента пропущено, то  по  умолчанию	используется
текущее значение сегмента кода (обычно команда корректировки
используется для модификации области кода).
     'Строка'  может  быть  любой комбинацией байтов, слов и
строк в KOИ-8.
     Примечание. Строка  в  KOИ-8  заключается	в  одиночные
кавычки ('). Если закрывающей кавычки нет, то все символы до
конца командной строки считаются символами строки в KOИ-8.
     При выполнении команды корректировки все области экрана
(регистров,  памяти  и	дисассемблируемая  область)  коррек
тируются.  При	любом  изменении  содержимого  ячеек  памяти
верхняя строка дисассемблируемой области (строка  предыдущей
команды) очищается.
     При  попытке  изменить  ячейку,  которая находится не в
оперативной памяти, в строке состояния	выводится  сообщение
об  ошибке  и  курсор  устанавливается	на параметр адреса в
команде.


     6.17. Печать дисассемблированного кода

     Формат команды: PD адр., длина {,фспец.}
     Примеры:	     PD*, %100
		     PD DS:1103, СХ, А:TST.PRT
     С помощью этой команды  дисассемблированный  код  может
быть распечатан на бумаге.Если в команде не указан сегмент в
параметре   'адр.'   по  умолчанию  используется  содержимое
регистра CS. Этот адрес определяет начало текста для  вывода
на  печать.  Параметр  'длина'  определяет число инструкций,
которые нужно распечатать. Длина может быть любым значением,
которое можно представить с помощью 16-ти разрядного  слова.
Когда  достигается  конец сегмента, адрес циклически изменя
ется на адрес начала сегмента.
     Задавая дополнительно спецификацию файла,	вывод  может
быть направлен в файл для последующей  проверки  или  распе
чатки. Для обращения к другим каталогам в спецификации файла
можно указывать маршрут.
     Распечатка  начинается  с	текста '>> вывод SDT', затем
печатается текущая дата и время.
     Если  принтер  не	готов  или  попытка   создать	файл
закончилась  неудачей,	в  строке  состояния выводится сооб
щение, но введенная строка  команды  не  стирается.  Команда
может быть отредактирована или выдана повторно после  приве
дения в готовность устройства печати.
     После  запуска печати на экран выводится информационное
сообщение. Печать может быть прервана нажатием клавиши	Esc.
В  случае  возникновения  ошибки в процессе вывода, операция
завершается.

     6.18. Печать данных в шестнадцатеричном виде
		   и в коде KOИ-8

     Формат команды: PH адр., длина  {,фспец}
     Примеры:	     PH *, %100
		     PH DS:1103, CX, A:TST.PRT
     Эта команда распечатывает данные из  памяти  в  том  же
формате,  в котором они выводятся в окне 2 основного экрана.
Формат	команды  и  ее	действие  аналогичны   команде	 PD,
описанной  в  подразд. 6.17.  Единственная разница состоит в
том,  что  'длина'  в  этой  команде  определяет  количество
байтов,  которые нужно распечатать, и в качестве сегмента по
умолчанию используется содержимое регистра сегмента данных.


     6.19. Распечатка записей трассировки

     Формат команды: PT {начало, длина {,фспец}}
     Примеры:	     PT
		     PT 10, %20
		     PT %10,5\WORK\TST.PRT
     Эта команда используется для распечатки  предварительно
записанных  записей  трассировки.  Формат  печати аналогичен
формату печати команды	'TB',  описанной  в  подразд.  6.23.
Команда  может	быть  введена  без параметров для распечатки
всех записей трассировки,  находящихся	в  данный  момент  в
буфере.  Если данных трассировки нет, операция завершается и
в строке состояния выводится сообщение об ошибке.
     Параметр 'начало' может  быть  указан  для  определения
смещения   до	первой	записи	трассировки,  которую  нужно
распечатать. Если это значение больше  максимального  номера
записей в буфере, операция завершается.
     Количество  записей, которое нужно распечатать, опреде
ляется параметром 'длина'. Если это значение указывает номер
записи больше максимального из записанных, выдается  сообще
ние  об  ошибках. Печать прекращается, когда достигнут конец
буфера трассировки.
     Указывая спецификацию файла, вывод  можно	направить  в
дисковый  файл.  Для  размещения  файла  в другом каталоге в
спецификацию файла можно включить информацию о маршруте.
     В начале  операции  печати  основной  экран  заменяется
отображением  информации  о трассировке. После печати каждой
записи, изображение сдвигается вверх на одну запись.  Печать
может быть прервана пользователем нажатием клавиши Esc.

     6.20. Завершение работы и возврат в ДОС
	    или переход в резидентный режим

     Формат команды: QUIT {R{ESIDENT}}
     Эта  команда используется для завершения работы SDT или
для  перевода  его  в  резидентный  режим.  В  любом  случае
определение  всех  точек  останова сбрасывается и управление
передается обратно в операционную систему.  Память,  занятая
SDT, освобождается только когда в команде не указан параметр
'R (esident)'.
     Команда  QUIT  должна  быть введена полностью для того,
чтобы  избежать  непреднамеренного  завершения	работы	SDT.
Параметр может быть сокращен до одного символа.
     При  завершении работы SDT перед возвратом управления в
ДОС восстанавливается состояние курсора и экрана  прикладных
программ.  При переходе в резидентный режим включается режим
использования дополнительного  экрана  (см. подразд.  6.14.)
для  того,  чтобы  при	следующем вызове SDT сохранить экран
прикладной программы.
     После  того,  как	SDT  сделан  резидентным  с  помощью
команды  QUIT,	он  остается активным даже, если выполняется
другая программа. В этом случае  SDT  может  быть  вызван  в
любой  момент  для  отладки пользовательской программы. Если
SDT используется в резидентном режиме, то около  64  Кбайтов
памяти,   которые  он  занимает  становятся  недоступны  для
операционной системы.

     В резидентном режиме программы не могут  загружаться  с
помощью  SDT.  Если необходимо загрузить программу с помощью
SDT, пользователь может запустить SDT еще раз,	в  то  время
как  резидентный  вариант SDT по-прежнему будет находиться в
памяти.
     Если  память  выше  резидентного  SDT  не	используется
другой	программой,  то  резидентный  вариант SDT может быть
"выгружен" с помощью команды QUIT. Это позволяет  освободить
используемую память.
     При  работе  в резидентном режиме SDT может быть вызван
по запросу пользователя  с  помощью  одновременного  нажатия
клавиш	'Ctrl'  и  'Esc'  или  нажатия кнопки немаскируемого
прерывания (NMI), если она установлена. Если в	отлаживаемой
программе  выполняется	инструкция  INT3,  управление  также
передается SDT.
     Возможность  определения  условий	для  точек  останова
является очень полезной для отладки прикладных программ. При
работе	в  резидентном режиме эта возможность должна исполь
зоваться с большой осторожностью. Если прикладная  программа
выполняется  и	SDT вызывается для установки точек останова,
то оригинальный код по адресу точки  останова  запоминается.
Эти байты будут восстановлены, когда SDT передает управление
обратно.  Если управление передается в прикладную программу,
точки останова	остаются  активны.  Если  текущая  программа
заменяется  на	другую	и  загружается	SDT, то SDT пытается
восстановить байты кода  по  адресам,  указанным  для  точек
останова.
     Это  может изменить код новой прикладной программы, что
вызовет непредсказуемые результаты при ее выполнении.
     SDT может помочь  пользователю  даже  в  той  ситуации,
когда  SDT  определяет,  что код был изменен после последней
команды "G", но сохраненный код  не  будет  восстановлен  по
данному  адресу  и точка останова будет запрещена. Когда это
происходит, выводится сообщениe:
		 'Код изменен в BRn'
и поле счетчика для данной точки останова сбрасывается в  0.
В сообщении указывается наибольший номер точки останова.


     6.21. Команда установки регистра

     Формат команды: {R} регистр=значение
     Примеры:	     R AX=1250
		       DS=AX+SI
		       CF=1
		       BX=AL*3+D-CX/AH
		       CX=%20
     Команда  установки регистров используется для установки
в регистры  процессора	указанных  значений.  Для  упрощения
ввода команды 'R' может быть пропущена.
     Можно  изменить содержимое 16-ти, 8-ми или 1-но разряд
ного регистра. Тип регистра и данных с другой стороны  знака
равенства  должны  совпадать,  в  противном случае выводится
сообщение об ошибке и  содержимое  регистра  не  изменяется.
Однако	содержимое  16-ти  разрядного  регистра  может	быть
заменено на байт. В этом случае старший байт  заменяется  на
нулевой.
     В	1-но  разрядные  регистры можно устанавливать только
значения 0 или 1. Любые другие назначения вызывают ошибку.
     Для арифметических выражений справа от знака  равенства
могут  быть  использованы  знаки  плюс,  минус,  умножение и
деление ("+", "-", "*" и "/").  Все  вычисления  выполняются
строго слева направо над 16-разрядными беззнаковыми числами.
Переполнение игнорируется.
     Два регистра HS и FS, не реализованные аппаратно, трак
туются так же, как все остальные 16-ти	разрядные  регистры.
Они могут быть использованы для хранения результата присвое
ния или преобразования десятичного числа  в  шестнадцатeрич
ное.


     6.22. Команда поиска

     Формат команды: S {адр., строка}
     Примеры:	     S 0:0,12 3EC 'текст в KOИ-8' SI
		     S DS:1103, AX 1234
		     S
     Команда  поиска  используется  для нахождения указанной
строки	в  памяти.  Начальный  адрес может быть задан в виде
сегмента и смещения. Оба могут	быть  заданы  любым  арифме
тическим  выражением.  Если значение сегмента не введено, то
используется текущее значение сегмента кода.
     'Строка'  может  быть  любой комбинацией байтов, слов и
строк в KOИ-8.
     Примечание.  Строки  КОИ-8  заключаются   в   одиночные
кавычки  (').  Если  строка KOИ-8 не заканчивается одиночной
кавычкой, все остальные символы в командной строке считаются
символами строки в KOИ-8.
     При выполнении команды курсор становится невидимым и  в
строке состояния выводится сообщение:
	      'Поиск.Нажатие клавиши - конец'
     Просматривается  все  адресное  пространство, начиная с
указанного  адреса,  до  последней  адресуемой	ячейки	пока
строка не найдена или операция не прервана пользователем.
     Когда  строка  обнаружена,  значение HS устанавливается
равным	значению  сегмента,  а	смещение  до  начала  строки
используется для отображения области памяти в окне 2.
     Если  строка  не  обнаружена,  то	в  строке  состояния
выводится сообщение об ошибке  и  курсор  устанавливается  в
командной строке на первый символ указанной строки.
     Для повторения операции поиска той же строки достаточно
ввести	команду  'S' без указания параметров. Команда поиска
продолжается, начиная с байта перед тем, который был  найден
в  последней  операции	поиска.  Если перед командой 'S' без
параметров не было указано никакого адреса и  строки,  то  в
строке состояния выводится сообщение об ошибке.


     6.23. Отображение данных трассировки

     Формат команды: Т
		     ТВ
     Эта   команда   используется  для	 отображения  данных
трассировки. Данные трассировки могут быть отображены  толь
ко, если данные были записаны во время выполнения прикладной
программы. Каждая команда 'G'  сбрасывает  указатель  буфера
трассировки.  Если  в  буфере  трассировки  нет  сохраненных
данных, то в строке состояния выводится сообщение об  ошибке
и курсор устанавливается на команду.
     Для  отображения  данных трассировки можно использовать
два варианта. Когда используется  команда  TB,	отображается
буфер  трассировки.  Формат  буфера  трассировки  приведен в
подразд. 7.2.
     С помощью команды Т  данные  трассировки  выводятся  на
основной экран. В командной строке выводится сообщение:
	     'ОТОБРАЖЕНИЕ  ДАННЫХ  ТРАССИРОВКИ'
и  дисассеамблированная  область  заменяется  на  записанные
инструкции. Верхнее поле области дисассемблера	выводится  в
обратном фоне. Содержимое всех регистров и 4 верхних элемен
та стека такое же каким оно было перед выполнением  инструк
ции.  Начальная  точка	останова  помечается как ">BRn" (n -
равно  номеру  точки  останова).  Точка  останова,   которая
прекращает трассировку, помечается с помощью "<BRn". "Top" и
"End"  (начало  и  конец)  буфера  трассировки указываются с
соответствующими инструкциями.
     Сдвиг  записей трассировки позволяет иммитировать функ
цию пошагового выполнения. Сдвиг может быть также выполнен в
обратном направлении, то есть для перехода не к следующей, а
к предыдущей инструкции.
     В окнах памяти  отображается  содержимое  ячеек  памяти
действительное	в данный момент. Эти значения не сохраняются
во время выполнения трассировки.
     Сдвиг экрана можно выполнять с помощью  клавиш  'курсор
вверх',  'курсор  вниз', PgUp или PgDn. Нажатие клавиши Home
отображает начало буфера трассировки. Нажатие End -  послед
ние инструкции в буфере трассировки.
     Для  возврата  к  основному экрану нужно нажать клавишу
Enter или  функциональную  клавишу  F1,  как  указывается  в
последней строке экрана.


     6.24. Запись данных в файл

     Формат команды: W	спец., адр., длина
     Пример:	     W TEST.DAT, ES:SI, 1200
     Эта  команда  используется для записи данных в дисковый
файл. На  диск	записывается  указанное  параметром  'длина'
число байтов текущего содержимого памяти, начиная с  указан
ного адреса 'адр'.
     Адрес может быть задан как сегмент и смещение. И  то  и
другое	может  быть  задано  как  с  помощью  арифметических
выражений так  и  в  виде  непосредственных  значений.	Если
значение сегмента не введено, то для определения физического
начального  адреса  используется  текущее  значение сегмента
данных.
     'Длина' определяет  количество  байтов,  которые  нужно
записать  в  файл.  Длину  можно  задавать  в десятичном или
шестнадцатеричном  виде.  В  шестнадцатеричном	виде  макси
мальная  длина	равна FFFF. Длина может быть любым арифмети
ческим	выражением  или  простым  значением,  которое  можно
представить с помощью 16-ти разрядного слова.
     В	 спецификации	файла	('спец.')  нельзя  указывать
маршрут. Файл будет создан в текущем каталоге  на  указанном
диске или диске, который используется по умолчанию.
     Во  время дисковых операций курсор становится невидимым
и в строке состояния выводится сообщение:
			  'Запись'
     Примечание.  Максимальный	размер	файла	в   шестнад
цатеричном виде FFFF байтов (64 Кбайтов).


     6.25.Загрузка буфера клавиатуры (загрузка макрокоманды)

     Формат команды: XL  спец.
     Пример:	     XL TEST.AUT
     Эта команда используется для загрузки содержимого	ука
занного  файла, содержащего предварительно записанные после
довательности  нажатия	клавиш, в буфер клавиатуры. Эти кла
виатурные последовательности можно рассматривать как  макро
определения.  С  помощью такой макрокоманды, переданной SDT,
можно выполнять последовательность обычных команд.
     Максимальная длина этого файла 130  байтов.  Если	файл
длиннее  или  не  начинается  с  идентификатора  буфера кла
виатуры,  то  в  строке  состояния  выводится  сообщение  об
ошибке.
     Во  время	дисковых операций курсор исчезает и в строке
состояния выводится  сообщение:
			  'Чтение'
     Посредством этой команды данные только загружаются (для
выполнения макрокоманды используется команда 'XX').


     6.26. Режим обучения (генерация макроопределения)

     Формат команды: ХТ
     Когда режим  обучения  запускается  с  помощью  команды
"XT",  все  нажатия  клавиш записываются в буфер клавиатуры.
Может  быть  сохранено	до  128   байтов.   Нажатие   каждой
функциональной	клавиши  использует  два  байта. Эта функция
может  рассматриваться	как  генерация	макроопределений   в
процессе работы.
     Режим  обучения  завершается  когда буфер заполнен, или
когда пользователь одновременно нажал клавиши Ctrl и  Break.
В  случае  заполнения  буфера  в  строке состояния выводится
сообщение об ошибке.
     Записанные  нажатия клавиш могут быть выполнены с помо
щью команды 'XX' и/или могут быть сохранены в дисковом файле
с помощью команды XW.


     6.27. Запись информации о нажатых клавишах в файл
	       (сохранение макроопределений)

     Формат команды: XW  фспец.
     Пример:	     XW TEST.AUT
     Эта команда используется для записи  в  файл  данных  о
нажатых клавишах, которые в данный момент находятся в буфере
клавиатуры.   Если  буфер  клавиатуры  пуст,  то  данные  не
записываются и указанный файл не создается.
     Для удаления  или	добавления  команд,  файл  данных  о
нажатых клавишах может быть отредактирован с помощью тексто
вого редактора. Максимальный размер файла записей о  нажатых
клавишах не может  превышать  130  байтов,  включая  иденти
фикатор  в первых двух байтах этого файла. Символы табуляции
не сохраняются. Каждая команда должна заканчиваться символом
"возврат каретки" (0D).


     6.28. Выполнение записанных нажатий клавиш
	      (выполнение макрокоманды)

     Формат команды: XX {фспец.}
     Примеры:	     XX
		     XX TEST.AUT
     Команда 'XX' используется для выполнения команд, сохра
ненных	в  буфере  клавиатуры. Если эта команда используется
без параметров, содержимое  буфера  клавиатуры	выполняется.
Если  в  качестве  параметра добавлено имя файла, содержимое
этого файла сначала считывается в буфер клавиатуры, а  затем
записанные данные выполняются.
     Это  позволяет  выполнять	с  помощью   одной   команды
несколько  предварительно  записанных  макроопределений. Эти
макрокоманды могут создаваться с помощью команд 'ХТ' и  'XW'
или  с	помощью  текстового редактора. Последняя выполненная
макрокоманда может  быть  повторена  еще  раз  без  указания
спецификации  файла,  так  как	макроопределение  остается в
буфере.
     Выполнение команд из буфера клавиатуры завершается  при
возникновении ошибки или в случае, когда одновременно нажаты
клавиши Ctrl и Break.
     Если во время выполнения возникла ошибка или управление
возвращается  в  SDT  после команды 'G', остальные команды в
буфере игнорируются для предоставления доступа	к  программе
или   интерпретации   результатов   выполнения	отлаживаемой
программы.
     Эта  команда  -  наиболее	часто  используемый   способ
запуска  SDT и установки определенных условий. Ниже приведен
пример	простого  комнадного  файла   и   файла   записанной
макрокоманды.
     Командный файл:
MASM тест;
LINК тест;
SDT "XX DEMO.AUT
     Содержимое DEMO.AUT:
L TEST
BL DEMO.SET
M2 [DI]
G, 44
     Выполнение командного файла вызывает ассемблирование  и
компоновку  отлаживаемой программы. Когда это завершено, SDT
запускается  командой,	которая загружает и выполняет макро
команду DEMO.AUT. Выполнение макрокоманды сначала  загружает
отлаживаемую  программу.  В  следующем шаге загружается файл
определений точек останова DEMO.SET.  Этот  файл  определяет
точки  останова  и  условия  для запуска трассировки области
кода, которую нужно оттестировать.
     Окно памяти 2 устанавливается для отображения данных со
смещения, которое содержится  в  регистре  DI.	Затем  отла
живаемая  программа запускается со своей первой инструкции и
непосредственная точка останова устанавливается на ячейку 44
(16). Когда отлаживаемая  программа  достигает	эту  ячейку,
управление  передается	обратно  в  SDT и пользователь может
просмотреть  текущее  содержимое  регистров  или   проанали
зировать с помощью записей трассировки прохождение отлажива
емой программы.

     Этот пример демонстрирует способ автоматического выпол
нения  подготовки  программы  и  установки  параметров	SDT.
Последние  6  команд из макрокоманды, выполненой посредством
команды ХХ,  остаются  доступными  для	просмотра  в  буфере
сохранения введеных команд.

		 7. ЭКСПЛУАТАЦИЯ ПРОГРАММЫ

     Эксплуатация программы SDT выполняется в  интерактивном
режиме.  Команды,  реализующие	основные  функции программы,
описны в разд. 6.

     7.1. Описание языка запросов пользователя

     Программа выполняет команды, введенные пользователем  в
командной   строке   основного	 экрана.   Правила  указания
параметров приведены в п.7.1.1.
     Кроме того,  выполнение  отлаживаемой  программы  может
контролироваться  с  помощью  определения  программных точек
останова. Правила определения  точек  останова	приведены  в
п.7.1.2.

     7.1.1. Описание параметров команд

     Параметры	команд показаны строчными буквами. При вводе
команды они должны быть заменены действительными значениями.
     Необязательные параметры, которые	могут  быть  введены
вместе с командой, при описании команд (см. разд. 6) указаны
в скобках "{}".

     7.1.1.1. Спецификация файла (фспец)

     Спецификация файла вводится в стандартном формате ДОС и
включает  до  восьми  символов,  определяющих  имя  файла, и
необязательные три символа,  определяющие  расширение  имени
файла.	 Так  как  указанное  имя  должно  точно  определять
единственный файл, символы сканирования (? и *) использовать
нельзя. В спецификацию	файла  может  быть  включен  иденти
фикатор  дисковода  для  того,	чтобы  обращаться  к файлам,
расположенным не на текущем дисководе. Указание маршрута  не
поддерживается.
     Если  расширение  имени  файла  не указано, то подразу
мевается  расширение  ".EXE".  Если пользователь хочет обра
титься к файлу, не имеющему расширения имени, то  имя  файла
должно	оканчиваться  точкой  "."  для  того, чтобы избежать
использования расширения по умолчанию.

     7.1.1.2. Адрес (адр)

     'Адрес' может быть  задан  как  физический  адрес двумя
параметрами. Первый определяет значение регистра сегмента, а
второй	-  смещение  внутри  сегмента.	Составляющие  адреса
отделяются  друг от друга двоеточием. Если значение сегмента
не указано,  используется  значение  по  умолчанию,  которое
зависит  от  команды.  Как значение сегмента, так и смещение
могут задаваться как непосредственные значения.
      Примеры: 100
	       DI+123
	       DS:DI
	       23C:100
	       DS+FS:AX+SI-CX


     7.1.1.3. Длина

     Этот параметр  определяет	диапазон  действия  команды,
например, длину файла для записи. В качестве параметра длина
может быть указана как значение, которое не должно превышать
16-разрядное целое.

     7.1.1.4. Значение

     'Значение'  может быть указано разными способами. Прос
тое значение представляется  либо  шестнадцатеричным  числом
длиной	до  четырех  цифр, либо именем любого 8-ми или 16-ти
разрядного регистра, либо десятичным числом в диапазоне от 0
до 65535. Перед десятичными числами указывается %.
     Простые  значения	могут  объединяться в арифметические
выражения с помощью арифметических операторов (+, -, *,  /).
Все  вычисления выполняются строго слева направо без всякого
приоритета. Используется  16-разрядная	беззнаковая  арифме
тика. Все остатки и переносы игнорируются.
     Примеры: АХ
	      1С3
	      %100
	      %80*%24
	      ВХ+DI-12
	      DI-FS/16
	      0-10

     7.1.1.5. Регистр (peг)

     Параметр  'peг'  используется  для  ссылки  на регистры
центрального процессора. К регистрам общего назначения	(АХ,
ВХ, СХ и DX) можно обращаться как к 16-ти или 8-ми разрядным
регистрам.  Для  доступа  к  8-ми  разрядным регистрам после
первого символа в имени регистра нужно добавить 'H' или  'L'
для указания старшего или младшего байта соответственно (AH,
BH, CH, DH, AL, BL, CL, DL).
     K	регистру  флагов можно обратиться как к целому 16-ти
разрядному  слову  по  имени  'FL'.  К  отдельным   флаговым
разрядам  можно  также	обратиться по их именам (OF, DF, IF,
SF, ZF, AF, PF, CF).
     Флаг трассировки не указан, так как он используется SDT
и не должен изменяться пользователем.

     7.1.1.6. Строка

     Строка используется в  качестве  параметра  в  командах
поиска	и  заполнения  области.  Строка  может	быть списком
значений  и  строкой  в  коде  КОИ-8.  В   списке   элементы
разделяются пробелами или запятыми.
     Примеры: 12 23 1020 АХ, 12, 'строка в КОИ-8'
	      АЕ2, 3F, SI + CX


     7.1.2. Точки останова по условию

     Меню  определения	точек  останова состоит из 5 колонок
для каждой из 8 возможных точек останова. В  первой  колонке
определяется  адрес точки останова. Следующая колонка - поле
условия -  позволяет  задать  условие,	которое  проверяется
каждый	раз, когда во время выполнения программы достигается
указанный адрес. Если условие - истина, то счетчик  проходов
увеличивается на единицу.
     Когда  значение  счетчика	проходов  становится  равным
значению, указанному в поле счетчика,  выполняется  заданное
действие. Счетчик проходов может быть повторно активизирован
другой	или  той же самой точкой останова с помощью действия
RST (рестарт). Действие RST сбрасывает	счетчик  проходов  и
повторно активизирует точку останова.
     Если  поле счетчика равно 0 или действие не указано, то
данная точка останова не активна.
     Проверка адреса и условия	выполняются  последовательно
от  точки  останова  1	к  точке  останова  8 каждый раз при
обнаружении останова.
     Временные затраты на обработку каждой точки останова во
время выполнения прикладной программы составляют от 1,5 до 2
мсек, в зависимости от числа и типа условий.
     Сообщения о состоянии или о допущенных ошибках выводят
ся в строке после строки определения точки останова номер 8.
     Правильность  заполнения  каждого	поля  проверяется  в
момент	попытки выйти из этого поля любым способом. В случае
ошибки выход из поля  не  выполняется.	Пользователь  должен
либо  исправить  ошибку,  либо очистить данное поле нажатием
клавиши Esc.
     Возможности  SDT  по  обработке  точек  останова  очень
широки.  Возможно,  что  при  отладке  конкретной  программы
понадобится  использовать  только  действия  STOP  и   TRACE
(остановка и трассировка) без указания условий.


     7.1.2.1. Поле адреса

     Поле  адреса - это первое поле, определяемое для каждой
точки останова, и оно может быть указано значением  сегмента
и  смещения.  Результирующий  физический  адрес  должен быть
адресом начала команды, иначе установка точек останова может
привести  к  непредсказуемым  результатам   при   выполнении
прикладной программы.
     Пример:   CS:013E
	     14D8:1100
     Двоеточие	":"  не  выводится  с  повышенной яркостью и
пропускается при вводе.
     Если  сегмент  пропущен,  то  по  умолчанию  он   равен
текущему значению регистра сегмента кода - CS. Сегмент может
быть  задан  как непосредственное шестнадцатеричное значение
длиной	до  4-х  цифр  или  как  имя  какого-либо   регистра
сегмента.  Если  указано  имя регистра сегмента, то значение
сегмент точки останова будет заменено  на  текущее  значение
этого  регистра  в момент выхода из данного поля. Если такое
определение  точки  останова  сохраняется  в  файле  и	вос
станавливается	в  сочетании  с  другим  содержимым регистра
сегмента, то для указания  значения  сегмента  данной  точки
останова будет использоваться текущее значение.  Это  позво
ляет  использовать  сохраненные  определения  точек останова
даже, когда прикладная программа размещается в другом  месте
памяти.
     Если значение сегмента было введено в шестнадцатеричном
виде, никаких преобразований значения при восстановлении его
из файла не выполняется.
     Примечание. Код сегмента может иметь  другое  значение,
когда  прикладная  программа  прерывается с клавиатуры, если
вызваны процедуры BIOS или ДОС.
     Вообще точки останова  устанавливаются  по  адресу,  на
который указывает значение заданного регистра сегмента. Если
было указано  имя регистра сегмента или его непосредственное
значение, то должно быть введено и смещение.
     Точка останова должна находиться в  оперативной  памяти
(так  как  SDT	использует  программные точки останова). При
попытке указать адрес точки останова не в оперативной памяти
выводится   сообщение	об   ошибке.   Для   этой   проверки
используется текущее значение указанного регистра сегмента.
     Если  адрес  точки  останова  остался  пустым,  а точка
останова разрешена ненулевым счетчиком и, по  крайней  мере,
одним  указанным действием, то условие будет проверяться при
прохождении каждой точки останова.  Это  является  средством
для  дополнительных  проверок  остальных точек останова. Так
как точки останова обрабатываются последовательно от  первой
до  восьмой  точки  останова,  то этот вариант рекомендуется
использовать вместо  определения  точки  останова  BR8.  Это
гарантирует, что предварительно будут проверены и обработаны
все другие условия.


     7.1.2.2. Поле условия

     Каждое  поле  условия,  синтаксис	определения которого
показан  на  рис. 2, первоначально заполнено точками,  чтобы
показать возможность ввода в  это  поле.  Для  каждой  точки
останова  может  быть  введено	до 8 условий. Для увеличения
счетчика  проходов  все указанные условия должны быть истин
ными. Это означает, что над всеми условиями в  поле  условия
выполняется операция логического умножения (AND).

	      Синтаксис условия точки останова

				     ║────── 
		    ║─────────       │пробел│
	    ────>О──┤ Условие ├──>───│	 ,  │────О──>
		 ^  └─────────╢      └──────╢	 │
		 │				 │
		 └──────────────<────────────────╢

			   Рис. 2
     Условия разделяются пробелом, либо запятой. Могут	быть
использованы  два  типа  условных элементов, как показано на
рис. 3.  Первый  тип - это входная точка останова,  а второй
- это равенство или отношение.

		     Допустимые условия


		    ║─────────────────────── 
		 ║──┤ Входная точка останова├──── 
		 │  └───────────────────────╢	 │
	   ────>─┤				 О──>
		 │  ║─────────────────────── 	 │
		 └──┤  Равенство/Отношение  ├────╢
		    └───────────────────────╢

			   Рис. 3

     Входная точка останова указывается в следующем формате:
     BRn, где  O<n<9 и n<>i
	       ( i - номер определяемой точки останова)
     В данном случае n - номер входной точки останова.	Если
указана  входная  точка  останова,  условие  BRn  становится
истиной,  только  тогда,  когда   счетчик   проходов   равен
заданному для этой точки останова счетчику. Точка останова n
должна быть активной, иначе BRn никогда не станет истиной.
     Второй   тип   условия   состоит  из  двух  операторов,
связанных знаком отношения.  Синтаксис	условия  этого	типа
показан на рис. 4.

		    Равенство/Отношение


			    ║─── 
	   ║───────────     │ > │    ║─────────── 
     ───>──┤ Операнд 1 ├──>─┤ = ├──>─│ Операнд 2 ├──>
	   └───────────╢    │ < │    └───────────╢
			    └───╢

			   Рис. 4

     Условие становится истиной, когда равенство или отноше
ние истина.
     На рис. 5 показан синтаксис определения первого операн
да.

			 Операнд 1


				║───────── 
    ║───────────────────────────┤ Регистр ├─────────── 
    │				└─────────╢	      │
    │	     ║─────────────── 			      │
    │	     │ ║───────────   	║───────── 	      │
    │	     О─┤ Сегмент : ├─О─>┤ Регистр ├─ 	      │
    │	     │ └───────────╢	└─────────╢ │	      │
    │	     │				    │	      │
    │ ║───   │		  ║─────── 	     	║───   
 ─>─О─┤ [ ├─>О──────────>─┤ Адрес ├─────────О─>─┤ ] ├─О──>
      └───╢		  └───────╢		└───╢

			   Рис. 5

     Если  первый  операнд это имя регистра, то используется
значение указанного  регистра.	Если  операнд  начинается  с
квадратной  скобки  '[',  то  текущее значение ячейки памяти
может  адресоваться  прямо или косвенно. При косвенной адре
сации указывется какой-либо из	16-ти  разрядных  регистров,
перед  которым	может  быть  указан  регистр  сегмента. Если
регистр сегмента не указан, то по умолчанию используется DS.
Если указан, 'сегмент' должен быть именем регистра  сегмента
и не может быть абсолютным значением сегмента.
     Для  прямой адресации памяти используется обычная форма
записи адреса - 'сегмент:смещение'. Если  спецификация  сег
мента пропущена, то по умолчанию используется DS.
     Для  второго  операнда,  синтаксис  которого показан на
рис. 6,  нужно	рассмотреть  некоторые дополнительные  вари
анты. Ко второму операнду можно добавлять маску или смещение
до значения, на которое выполняется ссылка.

			 Операнд 2
			  ║─────── 
   ║──────────────────────┤Регистр├──────── 
   │	  ║─────────────  └───────╢	   │  ║───────── 
   │	  │ ║─────────    ║─────── 	      │+	│
   │	  О─┤Сегмент :├─О─│Регистр├─ 	   О─>┤ Смещение├ 
   │	  ^ └─────────╢   └───────╢ │	   │  │-	││
   │	  │			    │	   │  └─────────╢│
   │ ║─   │		  ║─────       ║─     ║───────    
 ─>О─┤[├─>О──────────────>┤Адрес├───O─>┤]├─О─>┤& Маска├──О─>
   │ └─╢		  └─────╢      └─╢ │  └───────╢  │
   │					   └────────────>О
   │			║────────── 			 ^
   └───────────────────>┤ Значение ├─────────────────────╢
			└──────────╢

			   Рис. 6

     Кроме   содержимого   регистра  или  ячейки  пaмяти,  в
качестве второго операнда, можно указывать  непосредственное
значение.  Значение  -	это  шестнадцатеричное	число из 4-х
цифр. Внутри шестнадцатеричного  числа	вместо	цифры  может
стоять	'X'  для  указания  того, что значение этой цифры не
играет роли. Такая замена может быть только для  непосредст
венных	значений. Значение может быть задано как десятичное,
если перед ним указан символ '%'.
     Например:	12X5
		А2XX
		%1234
     Если  непосредственное  значение  не  используется,  то
второй	операнд  может	быть задан вместе со смещением или с
маской. Для непосредственного значения в  этом	способе  нет
необходимости,	так  как  и  смещение,	и  маска  могут быть
включены в само непосредственное значение.
     Синтаксис указания адреса и непосредственного  значения
показан на рис. 7 и 8 соответственно.
     Когда  для  оперaнда  задана  маска, над каждым из двух
операндов  выполняется	операция  логического  "И"  (AND)  с
указанной  маской  перед  тем,	как  выполняется проверка на
равенство/отношение.  Это позволяет использовать для сравне
ния только отдельные разряды.
     В	случае,  если дано смещение (со знаком "+" или "-"),
то оно прибавляется  ко  второму  операнду  перед  проверкой
равенства/отношения.
     Маска   и	 смещение  определяются  как  четырехзначные
шестнадцатеричные значения, где задаются все четыре цифры. В
спецификации  адреса   должен	быть   использован   регистр
сегмента. По умолчанию - это DS.

			   Адрес

		 ║─────────── 	║─── 	║────────── 
	  ───>─О─┤ Регистр   ├──┤ : ├─О─┤ Смещение ├───>
	       │ │ сегмента  │	└───╢ ^ └──────────╢
	       │ └───────────╢	      │
	       └──────────────────────╢
		 по умолчанию DS:

			   Рис. 7
11
			  Значение

	    ║─────────────────<─────────────────── 
	     	   ║───────────────────────── 	  │
       ───>─О──────│ Шестнадцатеричная цифра ├──>─О──>
	    │	   └─────────────────────────╢	  │
	    │	   ║─── 			  ^
	    └──────┤ X ├──────>───────────────────╢
		   └───╢ не играет роли

			   Рис. 8

     7.1.2.3. Поле счетчика

     Поле  счетчика  определяет,  сколько  раз	должна	быть
пройдена точка останова с истинным условием перед  тем,  как
будет  выполнено  действие.  Счетчик  задается	в десятичном
виде. Максимальное значение 65535. В этом поле можно вводить
только цифры.
     Нулевой счетчик запрещает использование связанной с ним
точки останова, даже  если  действие  указано.	Чтобы  точка
останова  была активной, необходимо, чтобы и поле счетчика и
поле действия одновременно содержали допустимую информацию.
     После определения	и  выхода  из  этого  поля  значение
выравнивается  по  правому  краю  поля.  Если поле очищается
нажатием клавиши Esc, счетчик устанавливается равным нулю.


     7.1.2.4. Поле действия

     В	поле  действия	пользователь  определяет   действие,
которое  выполняется,  если счетчик прохождений через данную
точку останова становится равным значению счетчика.  В	поле
действия  может  быть указано до четырех различных действий,
если длина поля достаточна для их определения.
     Каждое  действие  может  быть   задано   своим   полным
названием  или	любым  его сокращением. При вводе сокращения
оно должно быть отделено  от  параметра  или  от  следующего
действия хотя бы одним пробелом или запятой.
     Действия могут быть заданы в следующем виде:
     Count
     Trace  ON {NI}
     Trace  OFF
     Rst   n,m....
     Stop
     Действие  COUNT  используется  для  того, чтобы сделать
точку  останова  активной,  и  не  выполняет  ничего,  кроме
подсчета количества прохождений точки останова перед тем как
она  деактивируется  при  достижении равенства значений поля
счетчика  и  счетчика  прохождения.  Это   действие   обычно
используется вместе с условиями для входных точек останова в
поле другой точки останова.
     Действие	COUNT	можно  считать	фиктивным,  так  как
увеличение  счетчика  выполняется  неявно  для	всех  других
действий.
     Действие TRACE включает (ON)  и  выключает  (OFF) трас
сировку  для  данной точки останова. Если указан параметр NI
для действия TRACE ON, то информация о выполнении процедуры,
вызываемой  прикладной	программой  с  помощью	команды пре
рывания INT, не записывается в буфер трассировки. Это бывает
необходимо, когда программа делает много обращений к ДОС или
BIOS.
     Однако, если TRACE ON указана без параметра NI, то воз
можно, что в буфер трассировки не записывается команда IRET.
Конец процедуры прерывания легко определить, так  как  после
возврата счетчик команд (IP) меняет свое значение.
     Действие	Rst   используется   для  перезапуска  точек
останова. Список перезапускаемых точек останова определяется
с помощью параметров n, m... Независимо от значения счетчика
прохождений  через  точку  останова,   счетчик	 прохождений
сбрасывается  в  ноль  и точка становится активной, если она
активной не была. Это  действие  позволяет  выполнять  очень
сложные проверки ошибок и операции трассировки.
     Например,	точка  останова  с  действием TRACE ON может
перезапускаться  каждый  раз,  когда   выполнена   процедура
восстановления прикладной программы после ошибки. Выполнение
будет  остановлено  только, если восстановление после ошибки
невозможно. В этом случае структурная схема программы  может
быть проверена по выведенной информации о трассировке.
     Действие Stop выполняет останов прикладной программы по
указанному адресу и передает управления обратно в SDT.


     7.2. Входные и выходные данные

     Входными	данными  для  программы  отладчика  является
загрузочный программный модуль в формате  EXE  или   COM.  А
также  вспомогательные файлы макрокоманд и определения точек
останова, которые могут быть подготовлены с  помощью  самого
SDT.  Подробно	команды создания этих вспомогательных файлов
описаны в разд. 6.
     Выходными	данными  программы  могут  быть   данные   о
структуре отлаживаемой программы, информация об обнаруженных
ошибках, распечатка дисассемблированного  кода,  расположен
ного  по  указанному адресу памяти, и данных, содержащихся в
указанных  областях  памяти,  а  также	листинг  трассировки
выполнения отдельных участков программы.
     Первая  колонка  такого  листинга	показывает  смещение
записанных  инструкций	от  начала  сегмента кода. Следующая
колонка показывает  дисассемблируемую  инструкцию  по  этому
адресу.  Остаток  строки используется для отображения содер
жимого регистров и верхних  элементов  стека.  Все  значения
выводятся такими, какими они были перед выполнением инструк
ции. Для каждой инструкции используется 4 строки.
     На рис. 9	показан  пример  отображения  трассировки  с
помощью команды ТВ.

	 Формат отображение трассировки командой ТВ

		  ОТОБРАЖЕНИЕ  БУФЕРА  ТРАССИРОВКИ
Смещение буфера:    0
***  Начало данных TRACE  ***
1686 RET		     AX=0006  SI=FFE2  CS=022B	ZF0  OF0    Стек+0 3974
			     BX=000B  DI=0023  DS=7000	AF0  DF0	+2 000C
			     CX=000C  BP=0000  ES=1ED8	PF1  IF1	+4 58C3
			     DX=0000  SP=0878  SS=022B	CF1  SF1	+6 0ECA
3974 POP    CX		     AX=0006  SI=FFE2  CS=022B	ZF0  OF0    Стек+0 000C
			     BX=000B  DI=0023  DS=7000	AF0  DF0	+2 58C3
			     CX=000C  BP=0000  ES=1ED8	PF1  IF1	+4 0ECA
			     DX=0000  SP=087A  SS=022B	CF1  SF1	+6 04ED
3975 LOOP   396D	     AX=0006  SI=FFE2  CS=022B	ZF0  OF0    Стек+0 58C3
			     BX=000B  DI=0023  DS=7000	AF0  DF0	+2 0ECA
			     CX=000C  BP=0000  ES=1ED8	PF1  IF1	+4 04ED
			     DX=0000  SP=087C  SS=022B	CF1  SF1	+6 0ECA
396D MOV    BX,CX	     AX=0006  SI=FFE2  CS=022B	ZF0  OF0    Стек+0 58C3
			     BX=000B  DI=0023  DS=7000	AF0  DF0	+2 0ECA
			     CX=000B  BP=0000  ES=1ED8	PF1  IF1	+4 04ED
			     DX=0000  SP=087C  SS=022B	CF1  SF1	+6 0ECA
396F PUSH   CX		     AX=0006  SI=FFE2  CS=022B	ZF0  OF0    Стек+0 58C3
			     BX=000B  DI=0023  DS=7000	AF0  DF0	+2 0ECA
			     CX=000B  BP=0000  ES=1ED8	PF1  IF1	+4 04ED
			     DX=0000  SP=087C  SS=022B	CF1  SF1	+6 0ECA

░░ Для сдвига данных вверх и вниз исп.стрелки ░░░░  ░░ F1 или '<─╢' - возврат ░░

			   Рис. 9


     Начало буфера трассировки помечается словом "Top" около
соответствующей инструкции. "End" указывает последнюю  запи
санную	инструкцию.  Точки  останова,  которые	запускают  и
прекращают трассировку, также указываются с соответствующими
инструкциями. Если первая инструкция в	буфере	не  помечена
точкой	останова, которая запустила трассировку, это значит,
что произошло циклическое использование буфера трассировки и
в буфере остались только последние оттрассированные инструк
ции.


     7.3. Описание способа работы с программой

     Наиболее часто используемые функции могут быть  вызваны
нажатием  функциональных  клавиш.  Это	упрощает  их исполь
зование, так как для выполнения операции достаточно  нажатия
единственной   клавиши.   В  данном  подразделе  описываются
функции всех функциональных клавиш используемых при работе с
основном экраном SDT. Меню для	определения  точек  останова
также  описывается  в  данном  подразделе,  так как доступ к
этому меню выполняется с помощью функциональной клавиши F5.
     Для того,	чтобы  показать  какие	функции  доступны  в
текущем  состоянии, назначение каждой функциональной клавиши
всегда	указано  в  последней  строке  экрана.	Соответствие
клавиш	командам  выбрано  так, чтобы клавиши наиболее часто
используемых  функций  можно  было  нажимать,  не  глядя  на
клавиатуру. Поэтому F1, наиболее часто используемая клавиша,
предназначена  для  функции пошагового выполнения программы.
Ниже перечислены функциональные клавиши и  функции,  которые
они вызывают при работе с основным экраном:
     F1  - один шаг программы;
     F2  - шаг, выполняющий процедуру;
     F3  - извлечение последней команды из стека команд;
     F4  - вывод экрана справочной информации;
     F5  - вход в меню определения точек останова;
     F6  - переключение на альтернативный экран и обратно;
     F7  - курсор на поле вверх;
     F8  - курсор на поле вниз;
     F9  - курсор на поле влево;
     F10 - курсор на поле вправо.
     Все функциональные клавиши поддерживаются как клавиши с
возможностью  автоповтора  ввода.  Это	означает,  что когда
клавиша нажата и не отпускается,  вызываемая  функция  будет
повторяться в темпе приблизительно 10 раз в секунду.


     7.3.1. Выполнение одного шага программы (F1)

     При   нажатии   F1,  независимо  от  текущего  значения
указателя инструкции (IP), выполняется инструкция,  показан
ная  в	дисассемблируемой области в обратном фоне. Все точки
останова, определенные пользователем, игнорируются для того,
чтобы разрешить неограниченное пошаговое выполнение программ
обработки прерываний ДОС и BIOS.
     После  выполнения одиночного шага все регистры, включая
указатель инструкции, корректируются и в строке  с  обратным
фоном  выводится  следующая  инструкция.  Строка  предыдущей
команды показывает инструкцию, выполненную перед этим.
     Eсли выбранный режим  поддержки  экрана  (команда	MODE
описана  в  подразд. 6.14) использует  альтернативный  экран
или микро-ЭВМ поддерживает два монитора,  то  режим  экрана,
используемый   отлаживаемой   программой,  восстанавливается
перед выполнением каждого шага. Если  и  отлаживаемая  прог
рамма,	и  SDT	используют  один  и тот же экран, то никаких
действий для восстановления режима или содержимого экрана не
предпринимается.
     Выполнение   одиночного   шага   корректирует   регистр
сегмента  кода	и  указатель  текущей  инструкции. Это очень
удобно в случае, когда нужно пропустить одну  или  несколько
инструкций.  Перед  тем,  как нажать F1, инструкция, которую
нужно выполнить, передвигается в поле текущей  инструкции  с
помощью клавиш 'курсор вверх' или 'курсор вниз.'
     Удерживая	F1 в нажатом состоянии, одиночные шаги можно
повторять в темпе автоповтора клавиатуры.
     Примечание.   Для	 сохранения   адреса   возврата    в
отлаживаемую  программу  SDT  использует  три  слова в стеке
пользователя. Поэтому в  момент  запуска  стек	отлаживаемой
программы   должен   быть  допустимым.	Инструкции,  которые
изменяют сегмент или указатель стека, не должны выполнятьсяв
пошаговом режиме. Они должны выполняться с помощью установки
непосредственной точки останова после последней  инструкции,
изменяющей регистр стека.


     7.3.2. Шаг выполнения процедуры  (F2)

     Шаг  выполнения  процедуры  используется для выполнения
целой подпрограммы как одиночного шага.  Эта  функция  может
быть выполнена	для  любой инструкции и наиболее полезна при
выполнении инструкций CALL, INT и LOOP.
     Функция работает  так  же,  как  и  функция  выполнения
одиночного  шага,  за  исключением  того,  что	так  как SDT
устанавливает  программные   точки   останова,	 ее   нельзя
использовать,	когда	выполняемый   код   не	находится  в
оперативной  памяти  В	этом  случае  должен  использоваться
пошаговый режим.
     При  попытке использовать F2 в области кода, который не
находится в оперативной памяти, выводится сообщение:
		   'Код должен быть в ОП'
     Всегда при нажатии F2 выводится сообщение:
	       '*** В Ы П О Л Н Е Н И Е ***'
     Если время  выполнения  подпрограммы  очень  мало,  это
сообщение    немедленно   исчезает.   Выполнение   процедуры
отлаживаемой программы может быть завершено пользователем  с
помощью нажатия Ctrl/Esc или клавиши NMI.

     7.3.3. Извлечение последней команды (F3)

     Эта   функциональная   клавиша   позволяет   извлечь  в
командную  строку  последнюю  введенную  команду  из   стека
хранения  команд,  имеющего размер, достаточный для хранения
шести последних команд. После нажатия F3 команда извлекается
из стека, а нажатие Enter вызывает выполнение этой  команды.
Затем команда снова сохраняется в стеке хранения команд.

     7.3.4. Вывод справочной информации (F4)

     Эта функция обеспечивает возможность получения справоч
ной информации непосредственно на экране, когда  выполняется
ввод команды и использование документации невозможно.
     Пользователю   доступны  четыре  экрана  со  справочной
информацией,  объясняющей синтаксис и действие команд, кото
рые можно задавать в  командной  строке.  Вид  этих  экранов
приведен на рис. 10 - 13 соответственно.
     Символы, введенные в командной строке основного экрана,
не стираются при нажатии  F4  и  при  возврате	к  основному
экрану	курсор	устанавливается на то же место в строке, где
он располагался перед вызовом справочной информации.
     Команды на экране справочной информации расположены  не
в  алфавитном  порядке,  а по мере их важности. Вторая часть
четвертого  экрана  объясняет  общие  для  различных  команд
правила задания параметров.
     Переход   от   одного   справочного  экрана  к  другому
выполняется  нажатием  клавиши	пробела  или  цифры   (1-4),
определяющей  номер  экрана. Для возврата к основному экрану
нужно нажать клавишу Enter или	F4.  Нажатие  других  клавиш
недопустимо и вызывает звуковой сигнал.



	     Первый экран справочной информации


			      КОМАНДЫ SDT М Е Н Ю  1

L фспец {парам.}{,адр.}  Загрузка файла в память. Задав 'адр.' можно определить
			 место загрузки. По умолчанию CS:0100. После выполнения
			 функции в BX,CX указано число загруженных байтов.
W фспец,адр.,длина	 Запись данных в файл. Сегмент 'адр.' по умолчанию DS.
			 'длина' указывает число байтов - четыре 16-ные цифры.
{R} рег=знач.		 Установка регистра. FL=знач. устанавливает регистр фла-
			 го как 16-ти битовый регистр. Доступ к отдельным битам
			 по их именам : OF,DF,IF,SF,ZF,AF,PF,CF.
D адр.			 Вывод кода на экран.Начальный адрес дисассемблируе-
			 мой области равен 'адр'. По умолчанию 'Сегмент'- CS.
			 CS:n определяет CS последней выполненой команды.
M n адр.		 Вывод окна памяти (n=1 или n=2).По умолчанию 'Сегмент'
    [рег]		 тот же, что в окне. Для вывода фиксированного окна
			 можно использовать FS. Для косвенной адресации
			 можно указать содержимое регистра (например, [SI]).
G {старт.адр}{,адр.BRK}  Запуск программы с текущей ячейки или со 'старт.адр'.
			 Может быть определена дополнительная точка останова.
			 По умолчанию 'сегмент' для BR - текущее значение CS.
			 Запущенную программу можно прервать по Ctrl/Esc.
QUIT  {R{ESIDENT}}	 Конец и возврат в ДОС. Вариант 'R' делает SDT резиден-
			 тным. В этом случае SDT можно вызвать по Ctrl/Esc.

		       Пробел - следующая страница или номер страницы 1 ... 4
			     F4 или <─╢ продолжение определения BR



			  Рис. 10


	     Второй экран справочной информации












			      КОМАНДЫ SDT М Е Н Ю  2

A {адр.}		 Режим ассемблирования.Если адрес не указан выбирает-
			 ся текущая команда. Ввод  Enter  - ассемблирование
			 команды. Для перемещения по коду вверх и вниз
			 можно использовать клавиши управления курсором.
P адр.,строка		 Замена в памяти. По умолчанию 'сегмент' - CS.
F адр.,повор,строка	 Заполнение памяти указанной строкой. По умолчанию
			 сегмент адреса - DS. 'Повтор' определяет сколько
			 раз строку нужно поместить в память.
S {{адр.},строка}	 Поиск данных в памяти. Если 'адр.' не указан, поиск
			 начинается с CS:0. Сегмент по умолчанию - CS. Когда .
			 данные найдены,M2 отображает эту область используя HS.
			 Команда S без параметров запускает повтореный поиск.
C адр.,адр.,длина	 Сравнение двух областей памяти. При несовпадении М1
			 отображает область, заданную первым параметром, М2 -
			 область,заданную вторым ('Сегмент' по умолчанию - DS:)
CO ис.адр,пр.адр,длина	 Копирование данных из области,заданний 1-м парамет-
			 ром в область 2-го('Сегмент'по умолчанию - DS:)
I адр.			 Ввод и отображение данных из порта В/В. 'Адр.'- 8 или
			 16 битовый адр. или содержимое регистра.
O адр.,знач.		 Вывод значения в порт В/В. Если 'знач.' слово, то
			 выполняется словная операция

		       Пробел - следующая страница или номер страницы 1 ... 4
			     F4 или <─╢ продолжение определения BR










			  Рис. 11


	     Третий экран справочной информации












			      КОМАНДЫ SDT М Е Н Ю  3

T{B}			 Вывод на экран буфера трассировки. При пропуске 'B'
			 вывод идет на основной экран. В противном случае
			 выбирается отдельный формат вывода.
BW фспец		 Запись точек останова в файл.
BL фспец		 Загрузка точек останова из файла.
PH адр.,длина{,фспец}	 Печать данных в КОИ-8 и 16-м виде.По умолчанию:вывод на
			 принтер,'сегмент'- DS. 'Длина' определяет число байт.
PD адр.,длина{,фспец}	 Печать дисассемблированного кода. По умолчанию сегмент
			 - CS. 'Длина' - число команд.
PT {старт,длина{,фспец}} Печать содержимого буфера трассировки. 'Старт' -
			 смещение до 1-ой распечатываемой команды. Количество
			 выводимых команд определяется по 'длине' или по числу
			 действительно записанных команд. По умолчанию - все.
286 ON			 Включение/выключение режима для процессора 286.
    OFF 		 Первоначально установлен режим для процессора типа 86.
MO{DE} M{ONO}		 Установка режима экрана. 'М' - монохромный адаптор,
       C{OLOR}		 'C'- цветной; 'A ON' - включение возможности использо-
       A{LTERN} ON	 вания при выполнении дополнительный экран. F6 перекл
		OFF	 чает основной и дополнительный экраны. Без параметров
			 показывает текущие характеристики прикладного экрана.
BE{EP} ON		 Вкл/Выкл звуков.сигнала
       OFF
		       Пробел - следующая страница или номер страницы 1 ... 4
			     F4 или <─╢ продолжение определения BR










			  Рис. 12



	   Четвертый экран справочной информации



			      КОМАНДЫ SDT М Е Н Ю  4

XT			 Запуск режима обучения. Все введенные коды сохраняются
			 в буфере и могут быть вывердены в файл или выполнены.
			 Конец режима - заполнение буфера или по Ctrl/Break.
XX {фспец}		 Выполнение сохраненных кодов. Если указана 'фспец', то
			 данные читаются из файла и затем выполняются.
XW фспец		 Запись сохраненных кодов в файл.
XL фспец		 Загрузка данных файла в буфер клавиатуры.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
		  фспец  Спецификация файла в ДОС. Для команды 'L' по
			 умолчанию - расширение'.EXE'
		  адр.	 Задается как {сег:}смещен. Если 'сег' не указан исполь-
			 зуются умолчания.'Смещен' м.б. любым значением.
			 Например,DS:SI+BX-123 или * (*=адрес следующей команды)
		  рег	 Любой 8 или 16 битовый регистр с основного экрана
			 Например, AX или BL или SI  ...
		  знач.  Содержимое регистра или 16-ные байт или слово. '*' за-
			 меняется содержимым IP. Десятичные значения с % (%123)
			 Арифметические выражения допустимы (например,AX+BX*3/2)
			 и вычисляются строго слева направо !
		  строка Список значений или строк КОИ-8 (в кавычках),разде-
			 ленных пробелами или запятыми,напр,1234 BX,'ASCII' FF.

		       Пробел - следующая страница или номер страницы 1 ... 4
			     F4 или <─╢ продолжение определения BR


			  Рис. 13


     7.3.5 Вход в меню определения точек останова (F5)

     При  нажатии F5 на экране отображается меню определения
точек останова.  Вид этого меню показан  на  рис. 14. С  его
помощью   пользователь	 может	 задать  достаточно  сложные
определения точек останова. Правила задания отдельных  полей
даны в п.п. 7.1.2.1 - 7.1.2.4.

	      Меню определения точек останова

	     МЕНЮ  ДЛЯ	ОПРЕДЕЛЕНИЯ  ТОЧЕК  ОСТАНОВА

BR#  Адрес BRK	Условие 			      Счетч  СчПрх  Действие
  1  37D6:0200	....................................	  1	 0  TRACE ON NI
  2  37D6:023E	....................................	  1	 0  TRACE OFF
  3  37D6:0244	SI>100..............................	 10	 0  T ON
  4  37D6:0245	SI=600 BR3..........................	  1	 0  T OFF
  5  37D6:0245	SI=1000.............................	  1	 0  RST 2345
  6  37D6:0247	....................................	  2	 0  STOP
  7  37D6:0000	....................................	  0	 0
  8    CS:0	....................................	  0	 0
╔══════════════════════════════════════════════════════════════════════════════ў
┌    Адрес окна дисассемблера > 					       ┌
┌──────────────────────────────────────────────────────────────────────────────┌
┌    37D6:0198 2E88260601     MOV    CS:[0106],AH			       ┌
┌	  019D EBE8	      JMP    0187				       ┌
┌	  019F 0AC0	      OR     AL,AL				       ┌
┌	  01A1 CB	      RET    Far				       ┌
┌	  01A2 803ECA0302     CMP    [03CA],02				       ┌
┌	  01A7 750B	      JNZ    01B4				       ┌
┌	  01A9 803ECB031B     CMP    [03CB],1B				       ┌
┌	  01AE 7504	      JNZ    01B4				       ┌
┌	  01B0 381ECC03       CMP    [03CC],BL				       ┌
╚══════════════════════════════════════════════════════════════════════════════Ў
1Просмотр░ 3ЧтнУмолчан░ 4Справка░  5ОснвМеню░ 7ХрнУмолчан░ 8ОкноДисассм░ 9Сброс░

			  Рис. 14

     Верхняя  половина	экрана содержит поля для определения
точек останова, а нижняя показывает дисассемблированный код,
начиная с текущей команды. Для восьми точек  останова  можно
определить  их адрес, условие, значение счетчика прохождений
и выполняемое действие. Как и на основном экране, все  поля,
выведенные  с  повышенной яркостью, могут быть заполнены или
изменены. На цветном мониторе введенные символы отображаются
желтым цветом до тех пор, пока	они  не  будут	проверены  и
приняты отладчиком.
     В	последней строке экрана показано, какие функциональ
ные клавиши поддерживаются и указаны назначенные им функции.


     7.3.5.1. Ввод точек oстанова и редактирование

     При  первоначальном  входе  в  меню  определения  точек
останова курсор указывает  на  первый  символ  (отличный  от
пробела) в поле адреса первой точки останова. Каждый раз при
перемещении курсора на следующее или предыдущее поле, курсор
будет  указывать  на  первый  непустой	символ	нового поля.
Введенные символы преобразуются в символы верхнего регистра.
     В этом режиме можно использовать все клавиши редактиро
вания и управления курсором, кроме PgUp и PgDn. Курсор можно
свободно  передвигать между полями определения точек остано
ва. Когда курсор достигает конца  строки,  он  пeрeходит  на
начало	следующей. Если эта строка последняя, то - на начало
первой.
     Переход от одного поля к другому может быть выполнен  с
помощью нажатия клавиш Enter или Tab. С помощью Tab возможен
переход   на   следущее  поле,	а  с  помощью  Shift/Tab  на
предыдущее.
     Для стирания  всего  поля	нужно  нажать  клавишу	Esc.
Каждое	 поле	(условия,  действия  и	др.)  обрабатывается
отдельно.
     Для стирания символа в текущей позиции курсора  нажмите
клавишу  Del. Все символы справа от курсора сдвигаются влево
каждый раз при нажатии клавиши Del. Для того, чтобы  удалить
только	что  введенный	символ	или символ слева от курсора,
используйте клавишу BackSpace.
     Клавиша Ins используется для переключения между режима
ми вставки и замены.  В  режиме  вставки  курсор  имеет  вид
яркого	прямоугольника	размером  в половину знакоместа. При
вводе символов в  режиме  вставки,  все  символы  справа  от
курсора  сдвигаются  вправо.  Последний  символ  строки  при
сдвиге вправо теряется.
     Для перемещения курсора  на  позицию  после  последнего
символа   в  строке  используется  клавиша  End.  Если	поле
полностью заполнено, курсор  будет  указывать  на  последний
символ	поля.  Нажатие	клавиши Home устанавливает курсор на
первую позицию текущего поля. При одновременном нажатии Ctrl
и Home курсор  перемещается  на  поле  адреса  первой  точки
останова.
     Клавиши  PgUp и PgDn используются для перемещения вверх
и вниз окна  дисассемблированного  кода  в  нижней  половине
экрана.
     При работе с меню определения точек входа поддерживают
ся следующие функциональные клавиши:
     Enter		   - переход на следующее поле;
     Home		   - курсор в начало поля;
     End		   - курсор после последнего  непус
 того символа поля;
     Ins		   - переключение режима ввода;
     Del		   - удаление символа над курсором;
     Esc		   - очистка текущего поля;
     BackSpace		   - удаление символа слева  от кур
 сора;

     Ctrl/F6		   - стирание до конца поля;
     Ctrl/Home		   - курсор в поле адреса BR1;
     Курсор вправо	   - на место следующего символа или
			     на следующее поле, если  символ
			     последний;
     Курсор влево	   - на  место	предыдущего  символа
			     или на  предыдущее  поле,	если
			     символ первый;
     Курсор вверх	   - вверх на строку или переход  на
			     последнюю, если строка первая;
     Курсор вниз	   - вниз на строку  или  переход на
			     верхнюю строку в поле адреса;
     Tab		   - следующее поле;
     Shift/Tab		   - предыдущее поле;
     PgUp		   - сдвиг дисассемблируемой области
			     вверх на 8 строк;
     PgDn		   - сдвиг дисассемблируемой области
			     вниз на 8 строк;
     F1 		   - вывод записей трассировки
     F3 		   - чтение с диска файла SDT.SET;
     F4 		   - вывод справочной информации;
     F5 		   - возврат к основному экрану;
     F7 		   - сохранение текущих  определений
			     точек останова в файле на диске;
     F8 		   - курсор в окно дисассемблера;
     F9 		   - сброс  всех  определений  точек
			     останова;
     PrtSc		   - печать текущего дисассемблируе
			     мого экрана.

     Данные  проверяются  и интерпретируются в момент выхода
из  заполненного  поля	(после	нажатия  Enter,   какой-либо
клавиши  перемещения  курсора либо клавиш F1, F5 или F7. При
ошибке курсор устанавливается на первый  неверный  символ  и
выводится сообщение о чтении ошибки.
     Покинуть	поле,	в  определении	которого  обнаружена
ошибка, нельзя. Если нужно выйти из этого поля, следует либо
исправить ошибку, либо очистить поле, нажав Esc  перед	тем,
как курсор будет сдвинут на другое поле экрана.
     Текущее   назначение   команд  функциональным  клавишам
всегда указано в последней строке экрана. При работе в	меню
определения  точек  останова  функции назначены клавишам F1,
F3, F4, F5, F7	и  F9.	При  нажатии  других  функциональных
клавиш выводится сообщение об ошибке:
		      'Пустая клавиша'


     7.3.5.2. Просмотр записей трассировки (F1)

     Нажатие  клавиши  F1  вызывает  отображение содержимого
буфера трассировки. Если записей нет, выводится сообщение об
ошибке. Формат	информация  в  буфере  трассировки  подробно
описан в подразд. 7.2.

     7.3.5.3. Чтение определений точек останова из
			файла (F3)

     С	помощью функциональной клавиши F3 можно восстановить
предварительно сохраненные определения точек  останова.  SDT
пытается прочитать файл  SDT.SET  из  текущего каталога. Это
позволяет в каждом каталоге  иметь  свои  определения  точек
останова, используемые по умолчанию.
     В	случае неудачи чтения выводится сообщение о том, что
файл не найден.
     Другой файл определения точек останова можно  загрузить
с  помощью  команды  BL, допускающей указание имени файла из
текущего каталога.


     7.3.5.4. Вывод справочной информации (F4)

     Справочная информация  об	определении  точек  останова
перекрывает   нижнюю  половину	экрана.  Выход	из  текущего
определяемого поля не  происходит  и  следовательно  оно  не
обязательно должно быть определено без ошибок.
     Для продолжения определения точек останова после вывода
справочной  информации	достаточно  нажать любую клавишу. На
рис. 15  приведен  вид	экрана справочной  информации  этого
типа.

    Справочная информация для определения точек останова









	     МЕНЮ  ДЛЯ	ОПРЕДЕЛЕНИЯ  ТОЧЕК  ОСТАНОВА

BR#  Адрес BRK	Условие 			      Счетч  СчПрх  Действие
  1  37D6:0200	....................................	  1	 0  TRACE ON NI
  2  37D6:023E	....................................	  1	 0  TRACE OFF
  3  37D6:0244	SI>100..............................	 10	 0  T ON
  4  37D6:0245	SI=600 BR3..........................	  1	 0  T OFF
  5  37D6:0245	SI=1000.............................	  1	 0  RST 2345
  6  37D6:0247	....................................	  2	 0  STOP
  7  37D6:0000	....................................	  0	 0
  8    CS:0	....................................	  0	 0

Адрес BRK Адрес точки останова.Должен быть установлен на начало команды.
	  {Сегмент:}Смещение. 'Сегмент' - регистр сегмента или значение.
	  Если пропуск - проверка условия в каждой точке останова
Условие   Условия для проверки в точках останова.Объединяются логическим И(&).
	  РЕГ=знач., [РЕГ]=знач., СМЕЩЕН=знач., BRn. Перед 'адр.'можно указать
	  регистр сегмента. BRn = истина, в случае равенства СчПрх=Счетч.
	  Значение - число до 4х 16-х цифр, 'x' - символ маскирования.
Счетч	  Десятичное число проходов перед выполнением действия. '0' запрещает BR
СчПрх	  Десятичное число проходов, сделанных после команды 'G'.
Действ	  Действие,выполняемое, если условие - истина. T{RACE} ON {NI} или OFF
	   -  трассировка программы. NI запрещает трассировку процедур INT.
	  C{OUNT}, S{TOP}, R{ST}n,m...	'RST' сбрасывает СчПрх для точки BRn в 0

░░░ Любая клавиша - продолжение определения BR ░░░░








			  Рис. 15



     7.3.5.5. Возврат к основному экрану (F5)

     Определение   точек   останова   может  быть  закончено
нажатием функциональной клавиши F5 и  возврата	к  основному
экрану.  Все введенные поля не должны содержать ошибок. Если
введенное поле содержит ошибку, то  функция  клавиши  F5  не
будет  отрабатываться  до  тех пор, пока не будет исправлена
ошибка или поле не будет очищено нажатием Esc.
     Текущее положение курсора в  последнем  введенном	поле
меню сохраняется, что позволяет быстрое переключение с одно
го экрана на другой.

     7.3.5.6. Сохранение в файле определений
		   точек останова (F7)

     При нажатии F7 отображаемые в данный момент определения
точек	останова  записываются	в  файл  SDT.SET  в  текущем
каталоге. При выполнении дисковых операций курсор исчезает и
выводится информационное сообщение.
     Для выполнения  этой  функции  необходима	правильность
определения  всех  точек  останова.  Если в текущем вводимом
поле имеется ошибка, она должна  быть  исправлена  или	поле
должно быть очищено перед сохранением определений в файле.

     7.3.5.7. Установка курсора на окно дисассемблера (F8)

     Нажатие клавиши F8 перемещает  курсор  на	окно  дисас
семблера.  Он  устанавливается	на поле адреса первой дисас
семблированной команды.  Для  определения  нового  положения
окна может быть указан любой адрес.
     Для  перехода  со	строки	на строку можно использовать
клавиши 'курсор вверх' и 'курсор вниз'. Клавиши PgUp и  PgDn
работают  так  же,  как  в  основном  меню определения точек
останова.

     7.3.5.8. Сброс всех точек останова (F9)

     Все определения точек останова сбрасываются при нажатии
клавиши  F9.   Это   наиболее	быстрый   способ   запретить
использование всех точек останова.


     7.3.6. Переключение экрана (F6)

     После разрешения использования  дополнительного  экрана
для  отлаживаемой  программы  (команда	MO  A  ON) с помощью
клавиши  F6  можно  выполнять  переключение  между  основным
экраном  SDT  и  альтернотивным  экраном.  Если  клавиша  F6
нажата, а использование дополнительного экрана не  разрешено
командой MODE, то выводится сообщение об ошибке:
		 'Эта клавиша без функции'
     Признаком	разрешения использования этой клавиши служит
подсказка  'CмЭкр',  указывающая  назначение  клавиши  F6  в
последней строке экрана.
     При переключении с помощью клавиши F6 на дополнительный
экран  выводятся  все данные этого экрана. Курсор помещается
туда, где он был установлен  отлаживаемой  программой.	Если
SDT  использовал  точки  останова  в  режиме трассировки, то
информация, которая выводилась во время  выполнения  трасси
ровки, добавляется к данным альтернотивного экрана.
     Последняя строка дополнительного экрана не используется
или перекрывается справочной информацией SDT для того, чтобы
избежать  смешения  информации,  выводимой  SDT,  с  выводом
данных на дополнительный экран.
     Для возврата к основному экрану SDT  достаточно  нажать
любую клавишу.

     7.3.7. Перемещение курсора на одно поле вверх (F7)

     Курсор  может быть перемещен на область вверх по экрану
нажатием клавиши F7. Из командной строки с помощью F7 курсор
может быть перемещен на область регистров. После перехода из
командной строки и последующего возврата положение курсора в
командной строке сохраняется. Введенные символы в  командной
строке остаются без изменений.
     В	области  регистров  курсор устанавливается на том же
месте, где он находился в момент  выхода  из  этой  области.
Первоначально  -  это  верхнее левое поле регистра AX. Когда
курсор находится в области  регистров,	нажатие  клавиши  F7
передвигает  курсор  в	адресное  поле	окна 2. Когда курсор
находится в шестнадцатеричной области  окна  2,  нажатие  F7
перемещает  курсор  обратно  на  командную  строку.  Если он
находится в области данных в коде KOИ-8 (правая нижняя часть
экрана) нажатие клавиши F7 перемещает курсор  на  предыдущее
поле - окно 1.
     Из  окна  1  нажатие  F7  перемещает  курсор  в область
регистров.

     7.3.8. Перемещение курсора на одно поле вниз (F8)

     Нажатие клавиши F8 курсор	перемещается  на  одно	поле
вниз   относительно   текущего.   Если	курсор	находится  в
командной строке, он перемещается на адресное поле  окна  2.
Если текущее положение курсора - нижнее поле, то F8 помещает
курсор	на  область регистров. Это означает, что перемещение
курсора выполняется циклически - с нижнего  поля  экрана  на
верхнее и т.д.
     Если  курсор находится в шестнадцатеричной области окна
2, нажатие F8 помещает курсор на область данных в коде KOИ-8
окна 2.


     7.3.9. Перемещение курсора на одно поле влево (F9)

     Эта функциональная клавиша перемещает курсор  на  окно,
расположенное  слева  от того, где в данный момент находится
курсор. Также реализовано циклическое  перемещение  курсора,
что  позволяет	перемещать  курсор с крайнего левого поля на
правое нажатием клавиши F9.

     7.3.10. Перемещение курсора на одно поле вправо (F10)

     Эта клавиша выполняет те же функции, что и F9, только в
обратном  направлении.	Когда  курсор  находится  в  области
регистров,  клавиша F10 может быть использована для перехода
к полю флагов.

     7.3.11. Перемещение курсора и редактирование
		   данных основного экрана

     Курсор  может  быть перемещен с одной области экрана на
другую нажатием клавиш	F7-F10.  Все  символы  с  повышенной
яркостью (или ярко зеленого цвета) могут быть изменены, если
курсор	указывает  на  них. При переходе в режим ассемблиро
вания единственной строкой с  повышенной  яркостью,  которую
можно изменять, является дисассемблированная строка, выводи
мая на обратном фоне.


     7.3.11.1. Область регистров

     Когда  курсор перемещается на область регистров, содер
жание регистров может быть  изменено  заменой  отображаемого
значения.  Курсор  сдвигается  на  одну позицию вправо после
ввода каждого символа или с помощью клавиши 'курсор вправо'.
В случае изменения содержимого	регистров  допустимы  только
шестнадцатеричные  цифры, а для изменения значения отдельных
флаговых разрядов регистра флагов допустимы только  цифры  0
или  1.  Символы  нижнего регистра при вводе преобразуются в
символы верхнего регистра.
     Чтобы покинуть область регистров, можно  нажать  какую
либо  из  десяти  функциональных клавиш (F1-F10) или клавишу
Enter для перехода на командную  строку.  Текущее  положение
курсора  сохраняется  и  при  следующем  переходе  в область
регистров курсор помещается в данное положение.
     При нажатии клавиши End курсор помещается на  последний
символ	данного  поля,	при  нажатии  Home  - на первый. Для
перехода на следующее поле можно  использовать	клавишу  Тab
или  клавишу  'курсор  вправо',  если  курсор  указывает  на
последний символ  поля.  В  конце  каждой  строки  положение
курсора  меняется, он циклически переходит на начало следую
щей строки области регистров. Перемещение курсора на  преды
дущее  левое поле может выполняться с помощью одновременного
нажатия клавиши Shift и Tab или с  помощью  клавиши  'курсор
влево', если курсор указывает на первый символ поля.  Цикли
ческое перемещение курсора выполняется так же, в случае Тab,
только	в  обратном  направлении.  Клавиши 'курсор вверх', и
'курсор вниз' могут  использоваться  для  перехода  с  одной
строки на другую в соответствующем направлении.
     С	помощью  нажатия  Сtrl/Home  курсор  перемещается на
начало первого поля в левом верхнем углу области регистров.
     Другие функциональные и управляющие клавиши не  поддер
живаются и их нажатие вызывает печать сообщения об ошибке.
     При  работе  в  области  регистров  можно	использовать
следующие клавиши:
     Enter	    - возврат в командную строку;
     О-9, А-F	    - замена содержимого регистров (для фла
		      говых разрядов только О или 1);
     Home	    - на первый символ поля;
     End	    - на последний символ поля;
     Курсор вправо  - на следующий символ;
     Курсор влево   - на предыдущий символ;
     Курсор вверх   - на предыдущую строку;
     Курсор вниз    - на следующую строку;
     Тab	    - на следующее поле;
     Shift/Tab	    - на предыдущее поле;
     Ctrl/Home	    - на поле в левом верхнем углу (AX);
     F1-F10	    - выход из области регистров и  выполне
		      ние соответствующей функции;
     PrtSc	    - печать текущего экрана.


     7.3.11.2. Окна памяти

     Когда  с  помощью одной из функциональных клавиш F7-F10
курсор	перемещается  на  область  окна  памяти, он позицио
нируется  на  сегментный  регистр  адреса.  Чтобы  выйти  из
области  окна, нужно использовать функциональные клавиши или
клавишу  Enter.  Нажатие  Enter перемещает   курсор   в
командную  строку. При нажатии функциональной клавиши выпол
няется соответствующая функция, а затем курсор помещается  в
командную строку.
     Первый  символ  в	поле  адреса  окна  имеет повышенную
яркость и может быть заменен на первый символ любого  допус
тимого	адресного  регистра  (C,D,E,S,F,H).  Символы нижнего
регистра автоматически	преобразуются  в  символы  верхнего.
После  замены имени сегментного регистра или нажатия клавиши
'курсор вправо' курсор перемещается на начало поля смещения,
пропуская символы, не имеющие  повышенной  яркости.  Попытка
переместить   курсор  влево  с	имени  сегментного  регистра
вызывает вывод в строке состояния сообщения об ошибке.
     Поле смещения может быть изменено на любое шестнадцате
ричное	значение.  Изменение  любой цифры вызывает изменение
адресов в последующих строках  и  корректировку  содержимого
отображаемого окна памяти.
     Так  как все поля данных в окне повышенной яркости, они
могут быть заменены на шестнадцатеричные  цифры.  Их  замена
приводит  к немедленному изменению содержимого соответствую
щих  ячеек  памяти.  После  ввода  каждого  символа   курсор
сдвигается  вправо  на	следующий символ и строка предыдущей
команды  в  окне  дисассемблера  очищается,  так   как	 это
изменение  может  изменить  код  программы.  В	случае, если
данная ячейка памяти не может быть изменена, так как она  не
находится  в  оперативной  памяти,  выводится  сообщение  об
ошибке.
     С	помощью  клавиши  Home	курсор	перемещается в левый
верхний угол данной области.
     Правая  половина  окна  2,  область  КОИ-8   показывает
содержимое  того  же  диапазона адресов, что и левая. В этой
части все байты памяти могут быть изменены на любой  символ.
Однако, символы, шестнадцатеричные коды которых не находятся
в диапазоне 20 - BF, будут отображаться в виде точек.
     Примечание.  Это  поле отделено от левой части окна 2 и
на него можно перейти только с помощью функциональных клавиш
F7-F10.
     Для перехода к следующему символу	в  окне  могут	быть
использованы  клавиши 'курсор вправо' и 'курсор влево'. Про
белы при перемещении курсора пропускаются.  Для  перемещения
курсора с поля на поле можно использовать Тab и Shift/Tab. В
конце  строки при перемещении вправо выполняется циклическое
перемещение курсора. В конце правого  нижнего  поля  каждого
окна  дальнейший сдвиг вправо не выполняется. В случае такой
попытки выводится сообщение об ошибке:
		   'Конец входного поля'
     С помощью клавиш 'курсор вверх' и 'курсор вниз'  курсор
перемещается  в  указанном  направлении, если он находится в
области, выделенной повышенной яркостью.


     7.3.11.3. Сдвиг окна по памяти вверх и вниз

     Если курсор находится в верхней строке и нажата клавиша
'курсор вверх', то курсор  остается  в  верхней  строке,  но
адрес уменьшается на количество байтов в строке и содержимое
окна  корректируется,  чтобы  показать	новую область. То же
самое  выполняется  в  противоположном	направлении,   когда
курсор находится в нижней строке или в поле адреса окна, вы
деленном  повышенной  яркостью,  и  нажата  клавиша  'курсор
вниз'. Это позволяет построчно перемещать окно по памяти.
     Клавиши PgUp и PgDn могут быть использованы для  сдвига
окна  на одну страницу, соответственно вверх или вниз. Длина
страницы определяется числом строк в  соответствующем  окне.
Эти  клавиши  могут  быть  использованы всегда, когда курсор
находится в одном из окон памяти.
     Если   курсор   находится	 в   области   окна,   можно
использовать следующие клавиши:
     Enter	    - возврат в командную строку;
     0-9, А-F	    - замена адресов или данных в окне;
     Home	    - курсор на начало поля адреса окна;
     Курсор вправо  - на следующий символ;
     Курсор влево   - на предыдущий символ;
     Курсор вверх   - на предыдущую строку или	сдвиг  окна,
		      если курсор на верхней  строке  или  в
		      поле адреса;
     Курсор вниз    - на следующую строку  или	сдвиг  окна,
		      если курсор на  последней строке или в
		      поле адреса;
     Тab	    - вперед на следующее поле;
     Shift/Tab	    - назад на предыдущее поле;
     F1-F10	    - выход из области окна и запуск соотве
		      тствующей функции;
     PrtSc	    - печать текущего содержимого экрана.


     7.3.12. Ввод командной строки и ее редактирование

     Команды  SDT могут вводиться, когда курсор установлен в
командной строке. Большинство команд имеют  длину  1  или  2
символа. При интерпретации команд  ведущие  пробелы  игнори
руются. Для ввода команд и параметров можно использовать как
прописные, так и строчные буквы.
     При  вводе  лишних  параметров  выводится	сообщение об
ошибке, указывающее на наличие в строке лишних символов. Эти
символы должны быть удалены перед выполнением  команды.  Они
могут  быть удалены нажатием клавиш Ctrl/F6, которое удаляет
все символы от текущей позиции курсора до конца строки.
     Когда курсор  находится  в  командной  строке,  клавиши
'курсор  вверх'  и  'курсор  вниз'  используются  для сдвига
дисассемблируемой области. Клавиши PgUP и PgDn	используются
для   "листания   страниц"  дисассемблируемой  области.  При
попытке "листания" в обратном направлении  (с  помощью  PgUp
или  'курсор  вверх') в области, которая не может быть верно
дисассемблирована, выдается  сообщение	об  ошибке  и  сдвиг
области не выполняется.


     7.3.12.1. Редактирование команд

     Когда  курсор  находится  в  командной строке, он может
перемещаться  для  редактирования  команды только в горизон
тальном направлении. При попытке выйти из командной строки в
горизонтальном направлении выводится сообщение об ошибке:
		   'Конец входного поля'
     Клавиши 'курсор вверх' и 'курсор вниз' используются для
сдвига	дисассемблированной  области и не изменяют положения
курсора.
     Команды могут вводиться символами как верхнего,  так  и
нижнего  регистра.  Для  очистки  всей	командной  строки  и
помещения курсора на начало вводимого поля достаточно нажать
клавишу Esc. Клавиша Del используется для удаления символа в
текущей позиции курсора. С помощью клавиши Backspace  удаля
ется  символ слева от текущей позиции курсора. Одновременное
нажатие Ctrl и F6  удаляет  символы  от  текущего  положения
курсора до конца строки.
     Для  вставки  символов  SDT  должен находиться в режиме
вставки.  Переключение	между  режимами  вставки  и   замены
выполняется  нажатием  клавиши	Ins.  Когда  SDT находится в
режиме	вставки,  курсор  имеет  вид  половины	закрашенного
знакоместа.  В режиме замены в качестве курсора используется
полностью окрашенное знакоместо. Когда команда	введена  без
ошибок	или  когда  курсор  перемещается на другой экран или
другую область	экрана,  восстанавливается  режим  замены  -
режим редактирования, используемый по умолчанию.
     Клавиша  End  используется  для  установки  курсора  на
последний символ строки, отличный от пробела. Если командная
строка заполнена, нажатие клавиши End  устанавливает  курсор
на  последний  символ  в  строке. Клавиша Home устанавливает
курсор на начало командной строки.
     После нажатия Enter команда передается SDT  для  интер
претации и выполнения.
     Для  редактирования командной строки можно использовать
следующие нефункциональные клавиши:
     Enter	   - выполнить команду;
     Home	   - курсор в начало поля;
     End	   - курсор после последнего символа
		     в строке, отличного от пробела;
     Ins	   - переключение режима ввода;
     Del	   - удаление символа в текущей
		     позиции курсора;
     Esc	   - очистка командной строки;
     Baсkspace	   - удаление символа слева от курсора;
     Ctrl/F6	   - очистка до конца строки;
     Курсор вправо - позиция следующего символа;
     Курсор влево  - позиция предыдущего символа;
     Kурсор вверх  - сдвиг дисассемблируемой области
		     вниз на одну строку;
     Kурсор вниз   - сдвиг дисассемблируемой области
		     вверх на одну строку;
     PgUp	   - сдвиг дисассемблируемой области
		     вверх на 8 строк;
     PgDn	   - сдвиг дисассемблируемой области
		     вниз на 8 строк;
     PrtSc	   - печать содержимого текущего экрана.


     7.3.12.2. Обработка ошибок при вводе команд

     Если во время ввода команды, обнаруживается ошибка,  то
в  верхней  строке дисассемблируемой области выводится сооб
щение об ошибке или указание пользователю. В дальнейшем  эту
строку	 будем	называть  строкой  состояния.  Она  временно
перекрывает строку предыдущей команды в окне  дисассемблера.
Дисассемблированная команда, которую замещает строка состоя
ния, выводится вновь после нажатия любой клавиши.
     Вывод   сообщений	об  ошибке  сопровождается  звуковым
сигналом, который может быть разрешен или запрещен с помощью
команд BEEP ON и OFF. По умолчанию при запуске SDT  звуковой
сигнал разрешен.
     При обнаружении ошибки ввода курсор указывает на первый
ошибочный  символ.  Если пропущен параметр или ограничитель,
то курсор устанавливается там, где он  должен  быть  введен.
Соответствующее  сообщение указывает пользователю, что нужно
ввести. В случае затруднений с помощью клавиши F4  на  экран
может быть выведена справочная информация.
     При  запуске  дисковой  операции, которая не может быть
успешно завершена из-за каких-либо ошибок, курсор помещается
на имя файла. Это позволяет после изменения имени  повторить
данную команду для другого файла.
	       8. СООБЩЕНИЯ ПРОГРАММЫ

     В	 данном   разделе   приводятся	 тексты   сообщений,
выдаваемых   программой,   возможные  причины  возникновения
ошибочных ситуаций,  предусмотренное  действие	программы  и
требуемый ответ пользователя (если вмешательство пользовате
ля необходимо). При работе с основным экраном SDT  сообщения
об ошибках выводятся в строке состояния, а при работе с меню
определения  точек  останова  в строке разделяющей введенные
определения и окно дисассемблируемого кода.

     '*** В Ы П О Л Н Е Н И Е ***'
     Это сообщение выводится всегда при выполнении процедуры
за   один  шаг	(при  нажатии  F2).  Если  время  выполнения
подпрограммы очень мало, это сообщение немедленно  исчезает.
Выполнение   процедуры	отлаживаемой  программы  может	быть
завершено  пользователем  с  помощью  нажатия  Ctrl/Esc  или
клавиши NMI.

     'Адаптор в режиме 80х25'
	  или
     'Режим дисплея изменен другой программой'
     Эти   сообщения  выводятся  в  строке  состояния,	если
отлаживаемая  прикладная  программа,  использующая  тот   же
дисплейный  адаптор,  что  и SDT, изменяет его текущий режим
работы.

     'Адаптор не установлен'
     Независимо от текущего режима экрана при  использовании
параметра  MONO  в  команде  MODE, SDT переключается в режим
монохромного  отображения.  Параметр  COLOR  заставляет  SDT
использовать  цветной  экран  в  режиме 80х25 символов. Если
выбранный адаптер не установлен, выводится данное  сообщение
об ошибке и режим экрана не изменяется.


     'Адрес-приемник не в ОП'
     Если адрес приемника находится не в оперативной памяти,
то командная строка не очищается, в строке  состояния  выво-
дится сообщение:

     'Байты скопированы'
     Во время  выполнения  команды  копирования  содержимого
одной  области	памяти в другую курсор исчезает, а командная
строка содержит введенную команду. Если  все  байты  успешно
скопированы,  командная  строка  очищается  и  выводится это
сообщение.

     'Буфер полон. Прекращение записи'
     В режиме генерации макрокоманд  это  сообщение  появля
ется,  когда  буфер макрокоманды заполнен и дальнейшего про
токолирования нажатий клавиш не выполняется.

     'Буфер пуст'
     Это   сообщение   выводится   при	 попытке   выполнить
макрокоманду, если буфер команд пуст.

     'В буфере трассировки не хватает записей'
     Это  сообщение  выдается,	 если	значение   параметрa
'длина,'   указывающее  количество  записей,  которое  нужно
распечатать по команде 'TB', определяет номер записи  больше
максимального из записанных.

     'Все байты равны'
     Сообщение появляется после выполнения команды сравнения
двух  областей	памяти,  если  все  байты указанных областей
совпадают.

     'Дважды указано'
     При  определении  точки останова в поле действия дважды
указано одно и то же действие.

     'Для возврата в DOS введите QUIT'
     Команда QUIT - единственная команда, которую необходимо
вводить без сокращений, это позволяет избежать нежелательно-
го завершения программы.

     'Загрузка HIGH без поддержки'
     Если  отлаживаемая  программа  скомпанована  программой
LINK  с  вариантом  HIGH,  она	не  может   быть   загружена
загрузчиком SDT. Для проверки таких программ SDT должен быть
запущен в резидентном режиме, после чего нужно	использовать
загрузчик  операционной  системы.  Для	доступа  к указанной
точке кода программы  пользователь  может  поместить  в  эту
точку инструкцию INT3.

     'Запись'
     Это  сообщение  выводится	в  строке состояния во время
выполнения вывода данных на диска.

     'Заполнение.Конец - нажатие клавиши'
     Это  сообщение  выводится	во  время выполнения команды
заполнения заданной области указанной строкой. Нажатие любой
клавиши прекращает выполнение операции.

     'Изменяемая ячейка не в ОП'
     Во время выполнения команды корректировки	при  попытке
изменить  ячейку, которая находится не в оперативной памяти,
в строке состояния  выводится  это  сообщение  об  ошибке  и
курсор устанавливается на параметр адреса в команде.

     'Код должен быть в ОП'
     При  выполнении процедуры за один шаг (F2), так как SDT
устанавливает  программные  точки  останова,  то  ее  нельзя
использовать,	когда	выполняемый   код   не	находится  в
оперативной  памяти  В	этом  случае  должен  использоваться
пошаговый режим (F1).

     'Код изменен в BRn:'
     SDT может помочь  пользователю  даже  в  той  ситуации,
когда  SDT  определяет,  что код был изменен после последней
команды "G", то сохраненный код  не  будет  восстановлен  по
данному  адресу  и  точка  останова  будет  запрещена,	поле
счетчика для данной точки останова сбрасывается в 0.

     'Конец входного поля'
     При  редактировании  команды  курсор может перемещаться
только в горизонтальном направлении. Это сообщение об ошибке
выводится при попытке выйти за границы командной строки.
     Кроме того, для перехода к следующему  символу  в	окне
или  с	одного	поля  на  другое  можно использовать клавиши
'курсор вправо' и 'курсор влево', Тab и Shift/Tab.  В  конце
строки	 при   перемещении  вправо  выполняется  циклическое
перемещение курсора на ее начало. В  конце  правого  нижнего
поля  каждого окна дальнейший сдвиг вправо не выполняется. В
случае	такой  попытки	также  выводится  это  сообщение  об
ошибке.

     'Лишние символы в строке'
     Сообщение указывает на присутствие в  командной  строки
лишних	символов.  Эти	символы  должны  быть  удалены перед
выполнением команды. Они могут быть удалены нажатием  клавиш
Ctrl/F6,  которое  удаляет  все  символы  от текущей позиции
курсора до конца строки.

     'Нажатие клавиши - продолжение'
     После выдачи команды ввода данных из порта ввода/вывода
курсор	исчезает  и  в	команднай  строке  после  знака  '='
показывается	шестнадцатеричное    значение	 из    порта
ввода/вывода. После нажатия любой клавиши командная строка и
строка состояния очищаются.

     'Не найден'
     Это сообщение указывает,  что  при  выполнении  команды
поиска при просмотре всего адресного пространство, начиная с
указанного  адреса,  до последней адресуемой ячейки аргумент
поиска не был обнаружен.

     'Неверная точка останова'
     Задан  номер точки останова, которая в данный момент не
имеет определения.


     'Нельзя дисассемблировать назад - данные'
     Это  сообщение  может  появляться	при сдвиге с помощью
клавиш 'курсор вверх' или PgUp окна  дисассемблера  назад  в
область, не содержащую кода программы.
     Если  это	сообщение выводится при использовании режима
автоповтора клавиатуры, буфер клавиатуры может быть очищен с
помощью ввода Ctrl/Break.

     'Несовпадение - см. M1 и M2'
     Сообщение появляется после выполнения команды сравнения
двух областей памяти, в случае	обнаружения  различия  между
ними. Вместе с сообщением в окне 1 выводятся данные, адресу-
емые первым  параметром,  начиная с  первого  несовпадающего
байта.	Окно  2 используется  для отображения данных  второй
области.

     'Нет записей трассировки'
     Команда  TB  может  быть  введена	без  параметров  для
распечатки всех записей трассировки,  находящихся  в  данный
момент	в  буфере.  Если  данных  трассировки  нет, операция
завершается и в  строке  состояния  выводится  сообщение  об
ошибке.

     'Нет номера точки останова для Restart'
     В случае указания действия  Restart при вводе определе-
ия точки останова  необходимо указать  номер точки останова,
для которой нужно восстановить счетчик проходов.

     'Нет такой команды'
     Указанная в командной строке команда  введена  неверно.
Необходимо  скорректировать  название команды, а затем снова
нажать клавишу Enter.

     'Останов на BRn'
     В	случае,  если  в  отлаживаемой программе встречается
инструкция INT3, выполнение в  этой  точке  останавливается.
Tекущей  инструкцией является инструкция INT3. Ее необходимо
пропустить или заменить перед тем, как выполнение  программы
может быть продолжено.

     'Ошибка мнемоники'
     В зависимости от режима, заданного командой '286' может
быть использована мнемоника  всех  машинных  инструкций  или
только мнемоника основных. Это сообщение об ошибке выдается,
если указана мнемоника дополнительных  машинных  инструкций,
которые в данный момент не поддерживаются.

     'Печать. Прерывается по 'Esc'
     Это справочное сообщение выводится на экран при запуске
печати. Печать может быть прервана нажатием клавиши Esc.

     'Поиск.Нажатие клавиши - конец'
     Это сообщение выводится  во  время  выполнения  команды
поиска.   Нажатие   любой   клавиши   прекращает  выполнение
операции.


     'Программа окончена нормально'
     Это  сообщение  указывает,  что отлаживаемая программа,
загруженная с помощью SDT, завершена и возвращает управление
в  ДОС	с помощью прерывания. Все регистры сбрасываются в их
первоначальное	состояние  и  все  ячейки   точек   останова
восстанавливаются и содержат свои исходные коды инструкций.

     'Путь не найден'
     Это сообщение выводится, если  с  именем  файла  указан
каталог, который программа не может найти на данном диске.

     'Режим резидентный - используйте команду 'G'
     Это  сообщение выдается при попытке повторно ввести ко
манду 'QUIT R', если SDT уже находится в резидентном режиме.

     'Резидентный режим - загрузка запрещена'
     Файлы  EXE и  COM не могут быть загружены командой 'L',
когда  SDT  работает в резидентном режиме, так как это может
привести к противоречиям с диспетчером	памяти	операционной
системы.  Программы  должны  загружаться обычным загрузчиком
ДОС, либо SDT может быть вызван повторно,  пока  одна  копия
SDT уже резидентна в памяти.

     'Синтаксис неверен'
     Это сообщение об ошибке указывает на неверный синтаксис
введенной команды. Курсор  устанавливается  на	то  место  в
команде, где обнаружена ошибка. После редактирования команды
для ее выполнения нужно снова нажать клавишу Enter.

     'Типы операндов (BYTE/WORD) не совпадют'
     В команде установки  в  регистры  процессора  указанных
значений  типы	регистров  с  обеих  сторон  знака равенства
должны совпадать.  При	выводе	этого  сообщении  об  ошибке
содержимое указанного регистра не изменяется.

     'Точка останва не в ОП'
     Это сообщение об  ошибке  выводится,  если  в  качестве
точки  останова  указан адрес вне оперативной памяти. В этом
случае курсор устанавливается на параметр 'адр.'в  командной
строке.  Нужно исправить адрес и выполнить команду снова или
использовать клавишу Esc для очистки командной строки.

     'Чтение'
     Это сообщение выводится в	строке	состояния  во  время
выполнения ввода данных с диска.

     'Эта клавиша без функции'
	    или
     'Пустая клавиша'
     В данный момент нажатая функциональная клавиша не имеет
назначенной ей служебной функции. Текущее назначение  команд
функциональным	клавишам  всегда  указано в последней строке
экрана.

     'C-счетчик,S-стоп,R[n]-рестарт,T-трассировка,' '
					   - действия нет'
     Это сообщение содержит справочную информацию. Сообщение
выводится  в  случае,  если  при  вводе  определения   точки
останова в поле действия допущена ошибка.

     'SDT не верхний процесс, используйте 'G'
     Это   сообщение   появляется  при	попытке  "выгрузить"
резидентный вариант SDT с помощью  команды  QUIT  для  того,
чтобы  освободить  используемую  память,  если	память	выше
резидентного SDT используется другой ресидентной программой.

     Другие  сообщения	об  ошибках   являются	 подсказками
пользователю  о  том,  каким образом следует скорректировать
команду и не требуют специальных  объяснений.  После  вывода
таких  сообщений  курсор устанавливается в то место команды,
где нужно ввести недостающий элемент или изменить  введенный
неправильно.

                