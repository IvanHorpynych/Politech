
                            Содержание


  1. Введение................................................
  2. MASM: макроассемблер....................................
  2.1. Общие сведения........................................
  2.2. Запуск макроассемблера................................
  2.3. Опции макроассемблера.................................
  3. LINK: линкер модулей....................................
  3.1. Общие сведения........................................
  3.2. Запуск LINK...........................................
  3.3. Опции LINK............................................
  3.4. Особенности работы LINK...............................
  3.4.1. Выравнивание сегментов..............................
  3.4.2. Номер кадра.........................................
  3.4.3. Последовательность сегментов........................
  3.4.4. Комбинированные сегменты............................
  3.4.5. Группы..............................................
  3.4.6. Согласования........................................
  3.4.7. Поиск библиотек.....................................
  4. SYMDEB: символьный отладчик программ....................
  4.1. Общие сведения........................................
  4.2. Подготовка символьной отладки.........................
  4.2.1. Исходная информация для символьной отладки..........
  4.2.2. Формирование символьного файла при помощи MAPSYM....
  4.3. Запуск SYMDEB.........................................
  4.3.1. Запуск SYMDEB для символьной отладки................
  4.3.2. Запуск SYMDEB только с исполнительным файлом........
  4.3.3. Запуск SYMDEB без файлов............................
  4.4. Опции SYMDEB..........................................
  4.5. Команды SYMDEB........................................
  4.5.1. Команда ассемблирования.............................
  4.5.2. Точки выхода........................................
  4.5.3. Комментарии.........................................
  4.5.4. Команда сравнения...................................
  4.5.5. Команда "выдать"....................................
  4.5.6. Команды дампа.......................................
  4.5.7. Команды ввода с клавиатуры..........................
  4.5.8. Просмотр символьного плана..........................
  4.5.9. Команда "наполнения"................................
  4.5.10. Команда Go.........................................
  4.5.11. Справка о командах SYMDEB..........................
  4.5.12. HEX-команда........................................
  4.5.13. Команда ввода из порта.............................
  4.5.14. Команда загрузки файла.............................
  4.5.15. Команда перемещения................................
  4.5.16. Команда установки имени............................
  4.5.17. Команда открытия символьного плана.................
  4.5.18. Команда вывода в порт..............................
  4.5.19. P-трассировка......................................
  4.5.20. Команда выхода из SYMDEB...........................
  4.6.21. Команды переназначения ввода/вывода................
  4.5.22. Выдача регистров...................................
  4.5.23. Смена экрана.......................................
  4.5.24. Команда поиска.....................................
  4.5.25. Команда установки режима индикации.................
  4.5.26. Временный выход в DOS..............................
  4.5.27. Команда выдачи кода исходной линии.................
  4.5.28. Команда трассировки стека..........................
  4.5.29. Команда установки символа..........................
  4.5.30. T-трассировка......................................
  4.5.31. Команда реассемблирования..........................

                              - 3 -

  4.5.32. Команда выдачи исходной линии......................
  4.5.33. Команда записи на диск.............................
  5. CREF: утилита перекрестных ссылок.......................
  5.1. Общие сведения........................................
  5.2. Запуск CREF...........................................
  6. LIB: утилита обслуживания библиотек.....................
  6.1. Общие сведения........................................
  6.2. Запуск LIB............................................
  6.3. Функции и команды LIB.................................
  6.3.1. Создание новой библиотеки...........................
  6.3.2. Проверка содержимого библиотеки.....................
  6.3.3. Листинг перекрестных ссылок библиотеки..............
  6.3.4. Команды LIB.........................................
  7. MAKE: утилита сопровождения программ....................
  7.1. Общие сведения........................................
  7.2. Запуск и особенности работы MAKE......................
  7.3. Опции MAKE............................................
  7.4. Макроопределения......................................
  7.5. Правила вывода........................................

  Приложение 1. Технология работы на макроассемблере
              в системе MS-DOS...............................
.
                              - 4 -

                            1. Введение.


      Настоящее руководство содержит сведения о том,  как создавать
и  отлаживать программы на языке ассемблера с использованием MASM и
утилит пакета макроассемблера.
      Пакет макроассемблера  фирмы MICROSOFT включает в себя основ-
ные программы,  необходимые для создания,  отладки и  сопровождения
программ на языке ассемблера.
      В состав пакета макроассемблера входят  следующие программные
компоненты:
      MASM    -  макроассемблер
      LINK    -  объектный линкер 8086
      SYMDEB  -  символьный отладчик программ
      MAPSYM  -  генератор символьного файла
      CREF    -  утилита перекрестных ссылок
      LIB     -  утилита обслуживания библиотек
      MAKE    -  утилита сопровождения программ

      Обобщенная схема взаимодействия программ пакета  приведена  в
Приложении 1.
      Макроассемблер MASM создает программы, которые могут быть вы-
полнены микропроцессорами 8086,  8088, 80186 и 80286, а также может
ассемблировать программы для компьютеров с  сопроцессорами  8087  и
80287.
      Линкер LINK обрабатывает выработанную MASM объектную програм-
му с целью разрешения ссылок к другим модулям и приведения програм-
мы к виду, пригодному для загрузки в память.
      Утилита LIB  обеспечивает формирование и обслуживание библио-
тек объектных модулей,  которые могут быть  использованы  LINK  для
разрешения внешних ссылок.
      Отладчик SYMDEB реализует отладку сформированной программы на
двух  уровнях:  на уровне символических имен и на уровне абсолютных
адресов.
      Программа MAPSYM предназначена для создания символьного файла
для SYMDEB. Символьный файл формируется на основе информации, полу-
ченной от MASM, и необходим для символьной отладки.
      Утилита CREF может быть использована для формирования листин-
га перекрестных ссылок программы, наличие которого облегчает отлад-
ку.
      При помощи  утилиты  MAKE  процесс  разработки программ может
быть автоматизирован.  В файле описаний MAKE могут быть заданы раз-
личные  алгоритмы  вызовов  и  взаимодействия программ пакета (и не
только их).
      Кроме указанных программ,  для создания ассемблерных исходных
файлов необходим также редактор текстов,  работающий в  коде  ASCII
без управляющего кода. Многие редакторы текстов, которые обычно ис-
пользуют управляющие коды или другие специальные форматы в докумен-
тах,  обеспечивают  также  программирование или недокументированный
режим для формирования ASCII-файлов.
      Пакет макроассемблера  работает в операционной системе MS-DOS
или PC-DOS версии 2.0 и выше и требует наличия минимум  128К памяти
(использование  команды  !  SYMDEB может потребовать дополнительной
памяти).
      Программы пакета макроассемблера описаны в последующих разде-
лах настоящего руководства.
      В настоящем  руководстве приняты следующие условные обозначе-
ния.
      Конструкция, заключенная  в  одинарные квадратные скобки [ ],
может отсутствовать.
      Из нескольких  конструкций,  разделенных  символом | ,  может
быть выбрана только одна.

                              - 5 -
      Символы, ограниченные  знаками  < слева и > справа,  являются
поясняющим текстом и при кодировании должны  замещаться  требуемыми
по смыслу конструкциями.
      Многоточие ...  обозначает возможность многократного повторе-
ния предшествующей конструкции.
      Обозначаемые буквами терминальные символы конструкций  даны в
изображении регистра заглавных букв. При кодировании это не являет-
ся обязательным, кроме тех случаев, когда это оговорено особо.

.
                              - 6 -



                2. MASM: макроассемблер.
                ------------------------

                 2.1. Общие сведения.


      Макроассемблер MASM фирмы MICROSOFT ассемблирует программы на
языке ассемблера для микропроцессоров 8086,  8088,  80186 и 80286 и
создает переместимые объектные файлы, которые могут редактироваться
и выполняться в операционной системе MS-DOS.

       Макроассемблер обеспечивает выполнение следующих функций:

      1. Анализ исходного текста на языке ассемблера на предмет на-
         личия в нем макрокоманд и/или макроопределений и обработка
         этих  конструкций  с  соответствующей коррекцией исходного
         текста.
      2. Синтаксический анализ полученного текста и вывод необходи-
         мой диагностической информации.
      3. Формирование объектного модуля.

      Воспринимая в  качестве  входа  один файл с исходным текстом,
макроассемблер может формировать до трех выходных файлов, как пока-
зано на рис. 2.1.
                                             _____________
                                             |           |
                                         ____| имя.LST   |
                                        |    | (листинг) |
                                        |    |___________|
____________________   _____________    |    _____________
|                  |   |           |    |    |           |
|    имя.ASM       |___|  макроас- |____|____| имя.CRF   |
| (исходный текст) |   |  семблер  |    |    | (перекр.  |
|__________________|   |___________|    |    |  ссылки)  |
                                        |    |___________|
                                        |    _____________
                                        |    |           |
                                        |____| имя.OBJ   |
                                             | (объектн. |
                                             |  модуль)  |
                                             |___________|


          Рис. 2.1. Работа макроассемблера.


      Расширения имен файлов, показанные на рисунке, принимаются по
умолчанию.
      Файл листинга содержит распечатку исходного  текста  в  соот-
ветствии  со  специфицированными  директивами ассемблера режимами и
диагностическими сообщениями о результатах синтаксического анализа.
Эти же сообщения дублируются на консоли.
      Файл перекрестных ссылок содержит все используемые во входном
тексте идентификаторы.  В дальнейшем он может быть использован ути-
литой CREF.
      В файле  объектного  кода формируется объектный модуль.  Этот
файл не формируется, если в тексте обнаружены ошибки.




                              - 7 -

             2.2. Запуск макроассемблера.


      Ассемблирование исходного файла может  производиться  в  двух
режимах:
      1. С использованием подсказок.
      2. Посредством командной строки.

      Для запуска  макроассемблера с использованием подсказок необ-
ходимо ввести командную строку,  содержащую только имя макроассемб-
лера MASM со спецификацией подоглавления,  если она требуется. MASM
перейдет в диалоговый режим и серией подсказок запросит у пользова-
теля информацию о следующих файлах (ответ заключается в наборе тре-
буемых символов и нажатии клавиши ENTER):
      1. Имя  исходного файла.  Если при ответе не указано расшире-
         ние, предполагается ASM.
      2. Имя объектного файла.  Если при ответе не указано расшире-
         ние,  предполагается OBJ.  Базовое имя объектного файла по
         умолчанию совпадает с базовым именем исходного файла.
      3. Имя файла листинга. Если при ответе не указано расширение,
         предполагается LST.  Базовое имя файла листинга по умолча-
         нию NUL.
      4. Имя файла перекрестных ссылок.  Если при ответе не указано
         расширение, предполагается CRF. Базовое имя файла листинга
         по умолчанию NUL.

      В конце любого ответа после символов / или - могут быть зада-
ны опции макроассемблера, которые описаны в п.2.3.
      Если в каком-либо ответе специфицирован символ ;  , MASM вый-
дет из диалогового режима и установит оставшиеся имена по умолчанию
из следующего списка:
      <имя исходного файла>.OBJ
      NUL.LST
      NUL.CRF

      В любом ответе также могут быть заданы  ответы  на  несколько
следующих подсказок. В этом случае один ответ от другого отделяется
запятой.

      Для запуска  MASM  посредством  командной  строки  необходимо
ввести командую строку следующего вида:

MASM <имя  исходного файла>[,[<имя объектного файла>] [,[<имя файла
листинга>][,[<имя файла перек. ссылок>]]]] [<опции>][;]

      Символ ;  может быть специфицирован в любом  месте  командной
строки до того,  как были определены все файлы. В этом случае имена
оставшихся неопределенными файлов принимаются по умолчанию из  при-
веденного выше списка.  Из этого же списка принимаются по умолчанию
имена файлов, спецификация которых в командной строке опущена (пос-
редством лишней запятой).
      Если в командной строке обнаружена ошибка, об этом сообщается
через консоль, и MASM переходит в диалоговый режим.
      Опции MASM могут располагаться в любом месте командной строки.

      Следующие базовые имена выходных файлов MASM  имеют  фиксиро-
ванный смысл (независимо от того, как запускается MASM):
      NUL  - соответствующий файл не формируется
      PRN  - соответствующий файл направляется на печать

      Имя каждого  файла  может сопровождаться информацией о подог-
лавлении,  содержащем этот файл,  иначе поиск исходного  файла  или

                              - 8 -
создание выходного файла будет осуществляться в текущем подоглавле-
нии.
      Работа MASM  может  быть  в  любой момент прекращена нажатием
клавиш CONTROL-C.




                  2.3. Опции MASM.


      Опции MASM позволяют в некоторой  степени  управлять  работой
макроассемблера вне связи с исходной программой.
      Каждая опция обозначается предшествующим символом / или  -  и
может кодироваться как строчными, так и заглавными буквами.
      Опции могут располагаться в любом месте командной  строки или
ответа на подсказку.
      Ниже приведен список опций MASM с описанием  выполняемых  ими
функций.


/A - Сегменты в объектном файле располагаются в алфавитном порядке.
             При  отсутствии опции расположение сегментов соответс-
             твует порядку в исходном файле.

/S - Сегменты в объектном файле располагаются в  порядке следования
             в исходном файле.  Эта опция введена для совместимости
             с XENIX.

/B<число> - Установить размер буфера исходного  файла  (в  килобай-
             тах). Увеличение размера буфера ускоряет ассемблирова-
             ние,  но требует больше памяти.  Размер  буфера  может
             варьироваться  от  1 до 63 (К).  Если опция не задана,
             полагается 32 (32К).

/D - Диагностические сообщения после 1-го прохода поместить в  лис-
             тиг программы. Многие ошибки 1-го прохода исправляются
             на 2-ом проходе,  и,  если не задано /D,  в листинг не
             попадают. Задание этой опции дает более глубокую диаг-
             ностику исходного текста.  При спецификации /D  ошибки
             как 1-го, так и 2-го проходов выдаются на консоль, да-
             же если файл листинга не создается.

/D<символ> - Определить символ.  Указанный символ вводится в исход-
             ный  текст как пустая строка (аналогично использованию
             директивы EQU) и может быть использован  в  директивах
             условного ассемблирования.

/I<путь> -  Задание  пути  поиска  файлов,  подключаемых в исходный
             текст директивой INCLUDE  без  явного  указания  пути.
             Указание пути в INCLUDE более приоритетно, чем в опции
             /I.

/ML - Установить различие между строчными и  заглавными  буквами  в
             метках, переменных и именах. При отсутствии этой опции
             строчные буквы автоматически преобразуются  в  заглав-
             ные.  Опция  может  потребоваться  для совместимости с
             программами на регистро-чувствительных языках.

/MX - Установить различие между строчными и  заглавными  буквами  в
             общих и внешних переменных.  Опция подобна /ML,  но ее
             действие распространяется лишь на  имена, используемые
             в директивах PUBLIC или EXTRN.

                              - 9 -

/MU -  Преобразовать в общих и внешних именах строчные буквы в заг-
             лавные. Опция включена по умолчанию и введена для сов-
             местимости с XENIX.

/N - Запретить вывод в файл листинга таблиц макро,  структур, запи-
             сей,  сегментов и имен.  На генерируемый код опция  не
             влияет.

/P -  Контроль  запрещенного кода.  Выполнение некоторых инструкций
             микропроцессора 80286 может привести  к  нежелательным
             последствиям (например, загрузка регистра CS). Кодиро-
             вание таких инструкций может быть запрещено опцией /P,
             наличие  которой  в  таких  случаях вызывает генерацию
             ошибки с кодом 100. Директива .286p отменяет эту опцию
             и разрешает кодирование запрещенных инструкций.

/R - Генерация кода для процессора с плавающей точкой. Генерируются
             коды инструкций арифметики с плавающей точкой, которые
             могут  быть выполнены только при наличии сопроцессоров
             8087 или 80287.

/E - Генерация кода для эмуляции плавающей точки. Генерируется код,
             эмулирующий  инструкции  арифметики с плавающей точкой
             сопроцессоров 8087 и 80287.  Эта возможность использу-
             ется  при отсутствии указанных сопроцессоров.  При ис-
             пользовании этого режима необходимо наличие  специаль-
             ной    библиотеки    эмуляции,    содержащей   модули,
             моделирующие операции с плавающей точкой сопроцессоров
             8087 и 80287. Эта библиотека эмуляции должна использо-
             ваться при обработке объектного модуля с помощью LINK.

/V - Включить в диагностику на консоль информацию о  числе  обрабо-
             танных строк и символов.  При отсутствии этой опции на
             консоль выдается информация об ошибках и памяти.

/X - Выводить в листинг тела блоков IF (IF,  IFE,  IF1, IF2, IFDEF,
             IFNDEF, IFB, IFNB, IFIDN и IFDIF), для которых условия
             ассемблирования оказываются ложными и код по этой при-
             чине  не генерируется.  Следующие директивы ассемблера
             влияют на действие опции /X:
               .SFCOND - подавляет печать "ложных" блоков;
               .LFCOND - разрешает печать "ложных" блоков;
               .TFCOND - каждая обработка  директивы  меняет
                         состояние опции на противоположное.

/Z - Выводить на консоль строки исходного файла, содержащие ошибки.
             При  отсутствии  этой опции на консоль выдаются только
             сообщение об ошибке и номер строки.  Кодирование опции
             замедляет работу макроассемблера.

/C - Создать файл перекрестных ссылок. Файл создается, даже если он
             подавлен командной строкой или ответом на подсказку. В
             последнем  случае имя файла устанавлмвается по умолча-
             нию ( <имя исходного файла>.CRF ).  Опция  /C  введена
             для совместимости с XENIX.

/L - Аналогично /C, но относится к файлу листинга (с учетом умалчи-
             ваемого имени файла).

/T - Подавить все сообщения,  если в исходном тексте не  встретится
             ошибок.


                              - 10 -

                  3. LINK: линкер модулей.
                  ------------------------



                   3.1. Общие сведения.


      Объектный линкер  предназначен  для  создания  исполнительных
файлов из объектных файлов, сформированных MASM или компиляторами C
или PASCAL.
      LINK формирует  переместимый  исполнительный код,  снабженный
информацией перемещения, используя которую, MS-DOS сможет загрузить
в память и исполнить соответствующую программу.
      LINK может формировать программы,  содержащие свыше 1М кода и
данных.
      Воспринимая в качестве входа 2 файла,  LINK может формировать
2 выходных файла, как показано на рис.3.1.

_____________                                      _____________
|           |                                      |           |
| имя.LIB   |----------                       ---->| имя.MAP   |
| (библ-ка) |         |                       |    |  (план)   |
|___________|         |                       |    |___________|
                      |                       |
                      |                       |
                      |      _____________    |
                      |      |           |    |
                      |      |           |    |
                      |----->|   LINK    |----|
                      |      |           |    |
                      |      |___________|    |
                      |                       |
                      |                       |
_____________         |                       |    _____________
|           |         |                       |    |           |
| имя.OBJ   |         |                       |    | имя.EXE   |
| (объектн. |----------                       ---->| (исполнит.|
|   файл)   |                                      |   файл)   |
|___________|                                      |___________|



                   Рис. 3.1. Работа LINK.


      Расширения имен файлов,  показанные на рисунке принимаются по
умолчанию.
      Объектный файл содержит объектные модули программных  сегмен-
тов, сформированные MASM или компилятором языка высокого уровня.
      Библиотеки содержат наборы модулей, на которых могут ссылать-
ся программные сегменты в объектном файле.  Библиотечные файлы фор-
мируются при помощи утилиты LIB.
      Основным результатом   работы  LINK  является  исполнительный
файл,  содержащий программу в виде, пригодном для загрузки в память
и  исполнения.  Некоторые  особенности формирования исполнительного
файла описаны в п.3.4.
      Файл плана является необязательным и содержит, если он форми-
руется,  некоторую диагностическую и служебную информацию,  которая
затем  при посредстве утилиты MAPSYM может быть использована в про-
цессе отладки программы.
      Файл плана  содержит  имена,  загрузочные адреса и длины всех

                              - 11 -
сегментов программы.  Кроме того,  сюда входят имена и  загрузочные
адреса  групп в программе,  адрес точки входа,  а также сообщения о
возможных ошибках.
      Если задана опция /MAP,  в файл включаются имена общих симво-
лов и их загрузочные адреса.
      Если заданы  опции  /HIGH или /DSALLOCATE и объем программы и
данных в совокупности не превышает 64К, план может содержать симво-
лы с необычно большими адресами сегментов.  Эти адреса отражают пе-
ременные,  расположенные ниже действительного начала сегмента. При-
мер:
      FFF0:0A20   TEMP
      Адрес TEMP - 00:920h.

      Необходимо иметь ввиду, что, кроме двух выходных файлов, LINK
может формировать временный файл с именем VM.TMP.  Это происходит в
том случае,  когда линкеру не хватает оперативной памяти.  Соэдание
файла VM.TMP сопровождается сообщением на консоли и всегда осущест-
вляется в текущем подоглавлении.  В этом случае нельзя использовать
опцию /PAUSE и снимать дискету,  если  она  находится  на  активном
драйве, до того, как LINK не уничтожит файл VM.TMP. Не рекомендует-
ся создавать в текущем подоглавлении файл с таким именем, который в
этом случае может быть испорчен.


                3.2. Запуск LINK.


      Запуск LINK может быть осуществлен тремя способами:
      1. С использованием подсказок.
      2. При помощи командной строки DOS.
      3. С использованием файла ответа.


      Для запуска LINK с использованием подсказок необходимо ввести
командную строку,  содержащую только имя линкера LINK со специфика-
цией подоглавления,  если она требуется. LINK перейдет в диалоговый
режим и серией подсказок запросит у пользователя информацию о  сле-
дующих  файлах (ответ заключается в наборе требуемых символов и на-
жатии клавиши ENTER):
      1. Имя объектного файла.  Если при ответе не указано расшире-
         ние,  предполагается OBJ.  Если нужно определить несколько
         файлов,  их имена разделяются символом + .  Если все имена
         не помещаются на одной строке, ввод имен можно продолжить,
         поставив  символ  + в последнюю позицию текущей строки.  В
         этом случае LINK повторит запрос для  ввода дополнительных
         имен.
      2. Имя исполнительного файла. Если при ответе не указано рас-
         ширение,  предполагается EXE.  Базовое имя исполнительного
         файла по умолчанию совпадает с базовым  именем  объектного
         файла.
      3. Имя файла плана модуля.  Если при ответе не указано расши-
         рение, предполагается MAP. Базовое имя по умолчанию NUL.
      4. Имя библиотеки.  Если при ответе  не  указано  расширение,
         предполагается LIB.  Можно задавать несколько имен библио-
         тек по аналогии с OBJ-файлами. Если, не вводя имени, сразу
         нажать ENTER, библиотеки использоваться не будут.
.
                              - 12 -

      В каждом ответе после символа / могут быть заданы опции LINK,
которые описаны в п.3.3.
      Если в каком-либо ответе специфицирован символ ;  , LINK вый-
дет из диалогового режима и установит оставшиеся имена по умолчанию
из следующего списка:
      <имя объектного файла>.EXE
      NUL.MAP
      Библиотеки не используются.

      В любом ответе также могут быть заданы  ответы  на  несколько
следующих подсказок. В этом случае один ответ от другого отделяется
запятой.

      Для запуска LINK  посредством  командной  строки,  необходимо
ввести командую строку следующего вида:

LINK <имя объектного файла>[,[<имя исполнительного файла>]
[,[<имя файла плана>][,[<имя библиотеки>]]]][<опции>][;]

      Символ ;  может быть специфицирован в любом  месте  командной
строки до того,  как были определены все файлы. В этом случае имена
оставшихся неопределенными файлов принимаются по умолчанию из  при-
веденного выше списка.  Из этого же списка принимаются по умолчанию
имена файлов, спецификация которых в командной строке опущена (пос-
редством лишней запятой).
      Если в командной строке обнаружена ошибка, об этом сообщается
через консоль, и LINK переходит в диалоговый режим.
    Если специфицирована  хотя  бы   одна   из   опций   /MAP   или
/LINENUMBERS,  файл плана создается независимо от того,  указано ли
его имя в командной строке. В этом случае, если его имя не специфи-
цировано,  оно  принимается  по  умолчанию  -  <имя объектного фай-
ла>.MAP.
      При указании  нескольких  объектных  файлов  или библиотек их
имена разделяются символами + .
      Если определены  не все файлы (но не опущены посредством лиш-
ней запятой,  и не специфицирована  установка  оставшихся  имен  по
умолчанию  указанием  символа ;),  LINK входит в диалоговый режим и
запрашивает оставшиеся неопределенными имена через подсказки.

      Спецификации имен файлов и опции могут быть  заранее занесены
в специальный файл ответа.  Имя этого файла с предшествующим симво-
лом @ и указанием пути поиска, если он нужен, может быть помещено в
любом  месте ответа на подсказку или командной строки и трактуется,
как если бы содержимое файла ответа было  непосредственно вставлено
в  это место.  Следует,  однако,  помнить,  что комбинация символов
CARRIAGE-RETURN / LINE-FEED в  файле  ответа  интерпретируется  как
ENTER в подсказке или запятая в командном файле.
      Общий вид файла ответа:
 <имя объектного файла>
 [<имя исполнительного файла>]
 [<имя файла плана>]
 [<имя библиотеки>]

      Каждая группа файлов должна задаваться на отдельной строке, а
файлы в группе,  если их несколько, должны разделяться символом + .
Если группа не помещается на  одной  строке,  в  последней  позиции
строки должен стоять признак продолжения - символ + . В любой стро-
ке файла ответа после символа / могут быть заданы опции LINK.
      В файле ответа могут быть опущены компоненты,  уже определен-
ные ответами на подсказки или командной строкой.
      При обнаружении в файле ответа симвода ;  остаток файла игно-
рируется,  и оставшиеся неопределенными  имена  устанавливаются  по

                              - 13 -
умолчанию из приведенного выше списка.
      При использовании файла ответа  его  содержимое  выдается  на
консоль в форме подсказок. Если определены не все имена, LINK пере-
ходит в диалоговый режим.
      Если файл    ответа    не    содержит   комбинации   символов
CARRIAGE-RETURN / LINE-FEED или символа ;  , LINK выдает на консоль
последнюю строку файла и ожидает нажатия ENTER.

      Имя каждого  файла  может сопровождаться информацией о подог-
лавлении,  содержащем этот файл,  иначе поиск исходного  файла  или
создание выходного файла будет осуществляться в текущем подоглавле-
нии.
      Работа LINK  может  быть  в  любой момент прекращена нажатием
клавиш CONTROL-C.



                 3.3. Опции LINK.


      Все опции LINK обозначаются предшествующим символом / и могут
быть сокращены произвольным образом,  но так,  чтобы код  оставался
уникальным среди опций.
      Ниже приведены описания всех опций LINK  (в  скобках  указаны
минимальные сокращения):

/HELP (HE) - Выдать список действующих опций.  Эту опцию нельзя ис-
                            пользовать вместе с именем файла.

/PAUSE (P) - Пауза перед записью модуля в EXE-файл (и  после записи
                            в MAP-файл, если это предусмотрено). Во
                            время этой паузы можно при необходимос-
                            ти переставить дискеты.  Если использу-
                            ется файл VM.TMP,  он должен находиться
                            на той же дискете, что и EXE-файл.

/EXEPACK (E)  -  Установить  компактную  запись последовательностей
                            одинаковых бит.  Такой  EXE-файл  имеет
                            меньший  объем  и быстрее загружается в
                            память,  но его нельзя  отлаживать  при
                            помощи SYMDEB.  Опция дает эффект, если
                            программа содержит длинные потоки иден-
                            тичных  битов  и требует большого числа
                            (более 500) перемещений при загрузке.

/MAP (M) - Формировать MAP-файл.  Файл формируется, даже если он не
                            специфицирован при запуске LINK, и име-
                            ет  в  этом  случае  умалчиваемое   имя
                            (п.3.2).

/LINENUMBERS (LI) - Зафиксировать в MAP-файле номера строк исходно-
                            го файла.  Эта информация может в даль-
                            нейшем  использоваться MAPSYM и SYMDEB.
                            Запись номеров строк будет производить-
                            ся, если создается MAP-файл и объектный
                            модуль содержит данные о строках исход-
                            ного   текста.  Компиляторы  FORTRAN  и
                            PASCAL (версии 3.0 и выше) и  C (версии
                            2.0  и выше) такие данные автоматически
                            формируют; в MASM это не предусмотрено.
                            Если  MAP-файл  не специфицирован,  его
                            можно  создать  принудительно,   указав
                            описываемую  опцию  в подсказке на этот

                              - 14 -
                            файл.

/NOIGNORECASE (NOI) - Установить различие между строчными и заглав-
                            ными буквами. Различие может быть уста-
                            новлено также опциями /ML и /MX MASM.

/NODEFAULTLIBRARYSEARCH - Игнорировать умалчиваемые (NOD) библиоте-
                            ки, ссылки на которые содержатся в объ-
                            ектном модуле (их туда помещают  компи-
                            ляторы языков высокого уровня). Исполь-
                            зуются        только        библиотеки,
                            специфицированные при запуске LINK.

/STACK:<число> (ST) - Установить размер стека (в байтах).  Информа-
                            ция о  размере  стека,  содержащаяся  в
                            объектном модуле,  игнорируется. Размер
                            стека может быть задан в виде  десятич-
                            ного,  8-ричного  (с  предшествующим 0)
                            или 16-ричного (с предшествующими 0 и x
                            на  малом регистре) числа в пределах от
                            1 до 65535. Размер стека может быть из-
                            менен утилитой EXEMOD.

/CPARMAXALLOC:<число> -  Установить максимальное число (C) 16-байт-
                            ных параграфов, необходимых при загруз-
                            ке программы в память.  Обычно LINK ус-
                            танавливает максимальное число парагра-
                            фов   -   65535.  Указание  этой  опции
                            позволяет более эффективно использовать
                            память. Число параграфов может быть за-
                            дано в виде десятичного,  8-ричного  (с
                            предшествующим  0)  или  16-ричного  (с
                            предшествующими 0 и x на малом  регист-
                            ре) числа в пределах от 1 до 65535. Ес-
                            ли число  параграфов  недостаточно  для
                            размещения  программы,  LINK наращивает
                            его до  минимально  подходящего.  Число
                            параграфов может быть изменено утилитой
                            EXEMOD. Кроме размещения программы, оп-
                            ция  может  понадобиться  для команды !
                            SYMDEB.

/HIGH (H)  - Установить адрес начала программы на наивысший возмож-
                            ный адрес свободной  памяти.  Без  этой
                            опции установка осуществляется на мини-
                            мальный возможный адрес.

/DSALLOCATE (D)  -  Обработать группу с именем DGROUP.  Обычно LINK
                            присваивает младшему байту группы  сме-
                            щение  0000h.  При  задании  этой опции
                            старшему байту группы с  именем  DGROUP
                            присваивается смещение FFFFh. В резуль-
                            тате данные будут размещаться в  облас-
                            тях  программы  с  максимально большими
                            адресами.  Опция /D обычно  применяется
                            вместе  с опцией /H для более эффектив-
                            ного использования незанятой  памяти до
                            старта  программы.  LINK  предполагает,
                            что все свободные байты в DGROUP  зани-
                            мают память непосредственно перед прог-
                            раммой.  Для использования группы необ-
                            ходимо  загрузить  в  регистр  сегмента
                            адрес начала DGROUP.

                              - 15 -

/NOGROUPASSOCIATION - Игнорировать группы при (NOG) присвоении  ад-
                            ресов элементам  данных  и кода.  Опция
                            введена  для  совместимости  с  ранними
                            версиями  компиляторов FORTRAN и PASCAL
                            (версии MICROSOFT 3.13 и ранее и IBM до
                            2.0). Не рекомендуется использовать эту
                            опцию в других целях.

/OVERLAYINTERRUPT:<число> - Установить  номер  прерывания  при  (O)
                            загрузке оверлейного  модуля. Указанное
                            число замещает номер стандартного овер-
                            лейного прерывания (03Fh).  Номер может
                            быть задан в виде десятичного, 8-рично-
                            го  (с предшествующим 0) или 16-ричного
                            (с предшествующими 0 и x на  малом  ре-
                            гистре)  числа  в пределах от 0 до 255.
                            MASM не способствует созданию  оверлей-
                            ных программ. Поэтому только при помощи
                            опции /O ассемблерные модули могут быть
                            включены в оверлейные программы на язы-
                            ках высокого уровня,  компиляторы кото-
                            рых подерживают оверлей.  Не рекоменду-
                            ется устанавливать номер, совпадающий с
                            каким-либо другим прерыванием.

/SEGMENTS:<число> (SE)  -  Установить максимальное число сегментов,
                            которое может  обработать  LINK.  Число
                            может быть задано в десятичной,  8-рич-
                            ной (с предшествующим 0)  или 16-ричной
                            (с  предшествующими  0 и x на малом ре-
                            гистре) форме в пределах от 1  до 1024.
                            При отсутствии спецификации опции пола-
                            гается 128.  Память выделяется с учетом
                            этого максимального числа сегментов.

/DOSSEG (DO)  - Упорядочить сегменты в EXE-файле.  При спецификации
                            этой  опции  сегменты  располагаются  в
                            следующей последовательности:
                              - сегменты с классом CODE;
                              - другие сегменты, не входящие
                                в группу DGROUP;
                              - сегменты, входящие в DGROUP.
                            Обычная последовательность    сегментов
                            при отсутствии /DO описана в п.3.4.3.


              3.4. Особенности работы LINK.


      LINK создает  исполнительный  файл  путем  конкатенации  кода
программы и сегментов данных, соответствующих корректным инструкци-
ям исходного текста.  Эта сцепленная форма сегментов и является тем
"исполнительным представлением", которое непосредственно копируется
в память при загрузке программы.
      Частично управлять редактированием программных сегментов мож-
но заданием атрибутов в директиве SEGMENT или использованием дирек-
тивы DGROUP для формирования группы сегментов.  Эти директивы опре-
деляют  целую  группу ассоциаций,  классов и типов выравнивания,  а
также определяют порядок и относительные начальные адреса сегментов
программы.  Эта  информация является дополнительной к той,  которая
задается опциями LINK.


                              - 16 -

               3.4.1. Выравнивание сегментов.


      Для установки начального адреса сегмента LINK использует  за-
даваемый директивой SEGMENT тип выравнивания:  BYTE, WORD, PARA или
PAGE.  Эти ключевые слова обеспечивают выравнивание начала сегмента
соответственно  по  границе байта,  слова (2 байта),  параграфа (16
байтов) или страницы (256 байтов).  По умолчанию  используется  тип
PARA.
      Байты, пропускаемые из-за выравнивания, заполняются двоичными
нулями.


                  3.4.2. Номер кадра.


      Вычисляемый LINK начальный адрес сегмента зависит от типа вы-
равнивания сегмента и размеров уже скопированных  в  исполнительный
файл сегментов.
      Этот адрес состоит из смещения и канонического  номера кадра.
Канонический адрес кадра определяет адрес первого параграфа в памя-
ти,  содержащего один или более байтов сегмента. Номер кадра всегда
кратен 16.  Смещением является расстояние в байтах от начала параг-
рафа до первого байта сегмента.
      Для типов  PAGE  и PARA смещение всегда нулевое,  а для типов
BYTE и WORD может быть ненулевым.
      Номер кадра  может  быть  получен из MAP-файла.  Его содержат
первые 5 16-ричных цифр start-адреса сегмента.


             3.4.3. Последовательность сегментов.


      LINK копирует сегменты в исполнительный файл в той же  после-
довательности, в какой он их считывает из объектных файлов.
      Сегменты, имеющие идентичные имена классов, считаются принад-
лежащими  к  одному типу классов и копируются в исполнительный файл
как непрерывный блок.
      Порядок загрузки сегментов и способы управления этим порядком
путем присваивания типов классов обсуждаются  в  п.3.4.3  MICROSOFT
MACRO ASSEMBLER REFERENCE MANUAL.



               3.4.4. Комбинированные сегменты.


      Для определения того,  будут ли два или более сегмента, имею-
щие  одно и то же имя,  соединены в один большой сегмент,  LINK ис-
пользует комбинации типов сегментов.  В  языке  ассемблера  имеются
следующие типы комбинаций:  PUBLIC,  STACK,  COMMON,  MEMORY,  AT и
PRIVATE (п.3.4.2 MICROSOFT MACRO ASSEMBLER REFERENCE MANUAL).
      Если сегмент имеет тип комбинации PUBLIC,  LINK автоматически
соединяет его с другими сегментами,  имеющими то же имя и принадле-
жащими к тому же классу.  При соединении сегментов  предполагается,
что  сегменты  непрерывны  и  все адреса в сегментах доступны через
смещение относительно адреса кадра.  Результат получается таким же,
как  если  бы  полученный  большой сегмент был определен в исходном
файле сплошным куском.
      LINK сохраняет тип выравнивания каждого сегмента. Это означа-
ет,  что,  хотя  сегменты и включены в один большой сегмент,  код и
данные сегментов сохраняют свои типы выравнивания.

                              - 17 -
      Если размеры  соединяемых  сегментов превышают 64К,  выдается
сообщение об ошибке.
      Если сегмент имеет тип комбинации STACK, LINK выполняет ту же
операцию,  что и в случае PUBLIC.  Различие заключается в том,  что
для  STACK-сегментов  в  исполнительный файл записывается начальное
значение указателя стека,  которое представляет собой  смещение  от
конца  первого  по порядку сегмента стека или комбинированного сег-
мента стека. В этом случае при использовании типа STACK для сегмен-
тов стека программисту нет необходимости предусматривать в програм-
ме загрузку регистра SS.
      Если сегмент имеет тип комбинации COMMON,  LINK автоматически
соединяет его с другими сегментами,  имеющими то же имя и принадле-
жащими к тому же классу. Однако, когда LINK соединяет общие сегмен-
ты,  начало каждого сегмента устанавливается на один адрес,  в  ре-
зультате  чего образуются серии перекрывающихся сегментов.  В итоге
получается один сегмент,  который по длине не превышает самый длин-
ный из комбинируемых сегментов.
      Сегменты с типом комбинации MEMORY трактуется LINK в точности
так  же,  как  и PUBLIC-сегменты.  MASM обеспечивает тип MEMORY для
совместимости с линкерами,  выделяющие MEMORY как особый тип комби-
нации.
      Сегмент имеет тип комбинации PRIVATE в том  случае,  когда  в
исходном  файле  нет точных указаний относительно его типа комбина-
ции. LINK не объединяет PRIVATE-сегменты.


                     3.4.5. Группы.


      Объединение нескольких сегментов в группу  позволяет  адресо-
вать их относительно одного адреса кадра. При этом неважно, принад-
лежат ли эти сегменты к  одному  классу.  Когда  LINK  обнаруживает
группу, он соответствующим образом перестраивает все адресные ссыл-
ки в ней.
      Сегменты в группе не являются смежными,  не принадлежат к од-
ному классу и имеют разные типы комбинации. Но суммарный объем всех
сегментов в группе не должен превышать 64К.
      Группы не влияют на порядок загрузки сегментов в память. Даже
если  используются имена классов и объектные файлы вводятся в соот-
ветствующей последовательности,  нет гарантии,  что сегменты  будут
смежными.  На практике LINK может поместить не принадлежащий группе
сегмент в те же 64К памяти.
      Хотя в  LINK  и нет строгой проверки того,  помещаются ли все
сегменты группы в 64К памяти, при обнаружении нарушения этого усло-
вия будет выдано сообщение о переполнении согласования.


                   3.4.6. Согласования.


      Когда в процессе работы LINK уже известны адреса всех сегмен-
тов программы и организованы все  комбинации  сегментов  и  группы,
линкер  имеет  возможность  "согласовать"  некоторые  неразрешенные
ссылки к меткам и переменным. Для этого LINK вычисляет соответству-
ющие адрес сегмента и смещение и замещает временные значения,  сге-
нерированные ассемблером, на новые значения.
      В соответствии  с типами ссылок LINK реализует следующие типы
согласований:
      1. Короткие.
      2. Внутренние относительно себя.
      3. Внутренние относительно сегмента.
      4. Длинные.


                              - 18 -
      Размер вычисляемого значения зависит  от  типа  ссылки.  Если
LINK  обнаруживает ошибку в предсказанном размере ссылки,  выдается
сообщение о переполнении согласования.  Это может произойти, напри-
мер,  когда программа пытается использовать 16-битовое смещение для
доступа к инструкции в сегменте, имеющем другой адрес кадра. Это же
сообщение может быть выдано,  если все сегменты в группе не помеща-
ются внутри блока памяти в 64К.
      Короткая ссылка имеет место в инструкции JMP,  передающей уп-
равление на помеченную инструкцию в том же сегменте или группе, от-
стоящую от JMP не более,  чем на 128 байтов.  Для такой ссылки LINK
вырабатывает 8-битовое число со знаком. Если инструкция, на которую
передается управление, находится в другом сегменте или группе, т.е.
имеет другой адрес кадра,  или отстоит более,  чем на 128 байтов  в
любом направлении, формируется сообщение об ошибке.
      Внутренняя относительно себя ссылка имеет место в  инструкци-
ях, адресующих данные относительно того же сегмента или группы. Для
такой ссылки LINK формирует 16-битовое  смещение.  Если  данные  не
принадлежат  тому  же  сегменту  или группе,  выдается сообщение об
ошибке.
      Внутренняя относительно  сегмента  ссылка  имеет место в инс-
трукциях,  адресующих данные в определенном сегменте или группе или
относительно указанного регистра сегмента. Для этой ссылки LINK вы-
рабатывает 16-битовое смещение. Если это смещение внутри специфици-
рованного кадра оказывается больше 64К или меньше 0 или если начало
канонического кадра, содержащего требуемые данные, неадресуемо, вы-
дается сообщение об ощибке.
      Длинная ссылка имеет место в инструкциях CALL, передающих уп-
равление в другой сегмент или группу.  LINK в этом случае вырабаты-
вает 16-битовый адрес кадра и 16-битовое смещение. Если вычисленное
смещение больше 64К или меньше 0 или если начало канонического кад-
ра, в который передается управление, неадресуемо, формируется сооб-
щение об ошибке.


                 3.4.7. Поиск библиотек.


      Процедура поиска библиотеки,  иногда требуемой для разрешения
внешних ссылок, обладает некоторыми особенностями. Если путь поиска
указан  вместе  с именем библиотеки в командной строке,  поиск осу-
ществляется только там. Если же путь явно не указан, поиск произво-
дится в следующей последовательности:
      1. В текущем подоглавлении.
      2. Если  в  командной  строке заданы один или несколько путей
         поиска для других библиотек,  LINK просматривает их в  по-
         рядке следования в строке.
      3. На путях, определенных переменной LIB команды DOS SET. При
         помощи команды SET могут быть заданы несколько путей поис-
         ка, разделяемых точкой с с запятой. Вид команды SET:
            SET LIB=<список путей>



           4. SYMDEB: символьный отладчик программ.
           ----------------------------------------


                  4.1. Общие сведения.

      При помощи  символьного отладчика SYMDEB могут быть выполнены
следующие функции:
      1. Просмотр и исполнение кода программы.
      2. Внесение в тело программы точек выхода, которые останавли-

                              - 19 -
         вают исполнение программы.
      3. Проверка и изменение в памяти значений переменных.
      4. Ассемблирование и реассемблирование кода.
      5. Отладка программ, использующих соглашения языков MICROSOFT
         об эмуляции арифметики с плавающей точкой.

      Имеется возможность  временного  выхода  в  DOS с последующим
возвратом в SYMDEB и сохранением его состояния.
      SYMDEB имеет несколько способов адресации данных и инструкций
в памяти.  К различным фрагментам программы можно  получить  доступ
через  адреса,  глобальные  символы или номера строк,  что упрощает
размещение и отладку специфических участков кода.
      Программы на  языках C,  PASCAL и FORTRAN могут быть отлажены
как на уровне исходных файлов,  так и на уровне исполнительного ко-
да.  При этом пользователю доступны исходные предложения, реассемб-
лированный машинный код или их комбинация в зависимости  от  режима
работы SYMDEB.


            4.2. Подготовка символьной отладки.


      Сущность символьной отладки заключается в том, что в процессе
отладки программы имеется возможность ссылаться на элементы  исход-
ной  программы  (очевидно,  что для этого исходный файл должен быть
доступен SYMDEB).
      SYMDEB является  сильным  отладочным средством даже без своих
возможностей символьной отладки,  однако,  при этом в  значительной
степени теряется наглядность работы, что часто существенно усложня-
ет отладку. С другой стороны, заметно упрощается процесс подготовки
к отладке, особенно для программ на языке ассемблера.
      Для символьной отладки при помощи SYMDEB необходимо предвари-
тельно  сформировать специальный символьный файл,  куда должна быть
занесена  информация,  позволяющая  "привязать"  элементы  исходной
программы (переменные,  метки, номера строк и т.п.) к относительным
адресам внутри программных сегментов на уровне исполнительного  ко-
да.
      Необходимо помнить,  что все имена,  участвующие в символьной
отладке,  должны  быть объявлены (средствами конкретного языка) как
общие,  т.е. должны быть доступными программе LINK при согласовании
внешних ссылок.



      4.2.1. Исходная информация для символьной отладки.


      Этапы формирования символьного файла существенно  зависят  от
того,  каким транслятором обрабатывалась исходная программа. Дело в
том, что некоторые компиляторы не обеспечивают информацию о номерах
строк исходного файла, и для такой программы допустима лишь ограни-
ченная символьная отладка (без адресации по номерам  строк).  Кроме
того,  при работе с макроассемблерами имеется целый ряд характерных
для языков типа ассемблера особенностей, вносящих в процесс отладки
определенную специфику. Сущность этой специфики станет понятной при
ознакомлении с командами SYMDEB.
      По указанным причинам при работе с SYMDEB и особенно при под-
готовке символьной отладки следует всегда учитывать, каким компиля-
тором обрабатывалась исходная программа.
      SYMDEB совместим со следующими компиляторами:
      - MICROSOFT FORTRAN версии 3.0 и выше
      - MICROSOFT PASCAL версии 3.0 и выше
      - MICROSOFT C версии 2.0 и выше

                              - 20 -
      - MICROSOFT макроассемблер версии 1.0 и выше
      - MICROSOFT BASIC COMPILER версии 1.0 и выше
      - MICROSOFT BUSINESS BASIC COMPILER версии 1.0 и выше
      - IBM PC FORTRAN версии 2.0 и выше
      - IBM PC PASCAL версии 2.0 и выше
      - IBM PC макроассемблер версии 1.0 и выше
      - IBM PC BASIC COMPILER версии 1.0 и выше

      Из них лишь следующие компиляторы поддерживают  работу SYMDEB
на уровне номеров строк исходного файла:
      - MICROSOFT FORTRAN версии 3.0 и выше
      - MICROSOFT PASCAL версии 3.0 и выше
      - MICROSOFT C версии 2.0 и выше
      - IBM PC FORTRAN версии 2.0 и выше
      - IBM PC PASCAL версии 2.0 и выше


      Конечной целью  подготовки символьной отладки является созда-
ние символьного файла.  В общем случае это осуществляется путем об-
работки  исходной программы соответствующим компилятором и програм-
мой LINK и формирования на основе полученной  информации собственно
символьного файла при помощи программы MAPSYM (эта программа описа-
на в п.4.2.2).
      Для создания символьного файла при работе с макроассемблерами
необходимо выполнить следующие шаги:
      1. Символы,  которые будут использованы SYMDEB,  объявить как
         общие.  Среди этих символов могут быть имена процедур, пе-
         ременных  и  меток.  Имена сегментов и групп не могут быть
         объявлены общими,  но они автоматически включаются LINK  в
         MAP-файл и могут быть использованы при отладке.  Пользова-
         тель может объявить фиктивные метки,  которые в  программе
         не используются,  но могут пригодиться при расстановке то-
         чек выхода.
      2. Ассемблировать исходный файл макроассемблером.
      3. Обработать полученный объектный файл программой LINK с оп-
         цией /MAP и получить EXE- и MAP-файлы.
      4. Использовать MAPSYM для создания символьного файла.

      Для создания символьного файла при работе с другими совмести-
мыми с SYMDEB компиляторами (кроме макроассемблеров) необходимо вы-
полнить следующие шаги:
      1. Компилировать исходный файл. При этом для упрощения отлад-
         ки желательно  не  использовать  имеющиеся  в  компиляторе
         средства  оптимизации.  При  необходимости (и возможности)
         следует обеспечить наличие в объектном файле  информации о
         номерах строк исходной программы.
      2. Полученный объектный файл обработать программой LINK с оп-
         циями /MAP и,  если нужно,  /LINENUMBERS и получить EXE- и
         MAP-файлы.
      3. Использовать MAPSYM для создания символьного файла.
      4. Запустить SYMDEB для символьной отладки (п.4.3.1).
      5. Использовать команду SYMDEB Go (G) для запуска тестируемой
         программы с первой процедуры или функции.  Это обеспечива-
         ется специальной программой запуска из библиотеки программ
         данного языка.  Обычно пользователю не  нужна  трассировка
         этой программы, и он желает начинать отладку с момента на-
         чала работы своей программы. В C-программе первая выполня-
         емая  функция всегда называется _main (компилятор C добав-
         ляет символ _ к имени процедуры main), в FORTRAN-программе
         -  main,  в PASCAL-программе - первая процедура в исходном
         файле).



                              - 21 -

   4.2.2. Формирование символьного файла при помощи MAPSYM.


       Программа MAPSYM предназначена для преобразования информации
из MAP-файла,  сформированного LINK, в форму, понятную SYMDEB. Соз-
даваемый символьный файл может содержать до 10000 символов для каж-
дого сегмента и столько сегментов, сколько допустимо с точки зрения
машинной памяти.
       Запуск MAPSYM обеспечивается введением  следующей  командной
строки:

     MAPSYM [/L | -L]<имя MAP-файла>

      Имя MAP-файла  может  содержать  спецификацию  пути  поиска в
структуре оглавления, если это необходимо. Если не указано расшире-
ние имени, предполагается MAP.
      Задание единственной опции /L (или -L) позволяет  получить на
экране дисплея информацию о преобразовании, куда входят имена опре-
деленных в программе групп, адрес начала программы, число сегментов
и число символов в каждом сегменте.
      Символьный файл имеет базовое имя, совпадающее с базовым име-
нем MAP-файла, и расширение SYM и всегда создается в текущем подог-
лавлении.


                   4.3. Запуск SYMDEB.


      Запуск SYMDEB обеспечивается  введением  следующей  командной
строки:

   SYMDEB [<опции>][<символьные файлы>][<исполнительный файл>]
          [<аргументы>]

      Опции SYMDEB описаны в п.4.4.
      В некоторых случаях (например,  при использовании оверлея или
при работе с драйверами) может потребоваться  несколько  символьных
файлов.  Все  они в командной строке должны быть специфицированы до
имени исполнительного файла, т.к. имена, стоящие после имени испол-
нительного файла считаются аргументами.
      Исполнительным файлом может быть двоичный или  EXE-файл,  со-
держащий тестируемую программу. SYMDEB загружает
этот файл в память.
      Аргументы, если  они  указаны,  передаются SYMDEB в заголовок
тестируемой программы в точности,  как они специфицированы, и могут
быть использованы этой программой как параметры.
      Стартовав, SYMDEB выдает сообщение об этом и символ - , после
которого можно вводить команды SYMDEB.


        4.3.1. Запуск SYMDEB для символьной отладки.


      При использовании  символьной  отладки в командной строке за-
пуска SYMDEB должен быть специфицирован символьный файл.
      При загрузке  нескольких символьных файлов сразу будет открыт
только один из них.  Если один из специфицированных символьных фай-
лов имеет базовое имя, совпадающее с базовым именем исполнительного
файла,  открывается именно он, иначе будет открыт первый из указан-
ных символьных файлов. Во время сеанса SYMDEB для открытия конкрет-
ного файла может быть использована команда XO. Так как одновременно
может быть открыт только один символьный файл,  предыдущий файл при

                              - 22 -
выполнении команды XO закрывается.
      Исполнительный файл  может  быть  специфицирован при загрузке
символов.  Символы могут быть загружены без  исполнительного  файла
(это  может потребоваться для отладки резидентной программы).  Если
возникнет необходимость в загрузке исполнительного  файла  позже  в
текущем сеансе, могут быть использованы команды N или L.
      Не следует переименовывать символьные файлы,  т.к.  тогда при
загрузке они будут иметь неверные адреса.


      4.3.2. Запуск SYMDEB только с исполнительным файлом.


      Если пользователь не нуждается в символьном файле или не име-
ет исходного файла программы,  в командной строке запуска SYMDEB он
может опустить имя символьного файла.
      SYMDEB будет загружать исполнительные файлы, имеющие расшире-
ния имен EXE, BIN, HEX или COM.
      Всякий раз при загрузке исполнительного файла SYMDEB формиру-
ет 256-байтный  заголовок  в сегменте памяти с наименьшим возможным
адресом и копирует содержимое файла непосредственно после  заголов-
ка.  SYMDEB  помещает  размер  программы  в байтах в пару регистров
BX:CX и устанавливает значения всех остальных регистров в соответс-
твии с содержимым файла.
      Для EXE- и HEX-файлов заголовок при загрузке  будет  разорван
на  части.  Поэтому размер программы в этом случае не соответствует
размеру файла, как это имеет место для COM- и BIN-файлов.


             4.3.3. Запуск SYMDEB без файлов.


      Если в командной строке  запуска  не  указаны  имена  файлов,
SYMDEB  создает  заголовок программы,  но ничего не загружает.  Для
продолжения работы пользователь может использовать команды  ассемб-
лирования (A), ввода (E), установки имени (N) или загрузки (L).
      При запуске без файлов SYMDEB перед началом  отладки  очищает
флаги, в регистр IP загружает значение 0100h, устанавливает регист-
ры сегментов на "дно" свободной памяти и обнуляет остальные регист-
ры.



                   4.4. Опции SYMDEB.

      Опции SYMDEB обозначаются предшествующими символами / или - и
могут кодироваться как заглавными,  так и строчными буквами.  В ко-
мандной строке запуска SYMDEB они располагаются перед именем испол-
нительного файла.
      Имена файлов,  содержащие  символ  - ,  во избежении путаницы
дожны быть изменены.
      Описание опций SYMDEB приведено ниже.

/IBM (или I) - Установить совместимость с IBM. При работе на не IBM
               -машине эта опция позволяет учитывать некоторые осо-
               бенности аппаратуры IBM (контроллер прерываний 8259,
               дисплей IBM и другие особенности BIOS).  При  работе
               на IBM-машине эти особенности распознаются автомати-
               чески.

/K - Разрешение интерактивного выхода по ключу.  При  задании  этой
               опции  клавиша  SCROLL-LOCK  (BREAK) программируется
               таким образом, что ее нажатие останавливает исполне-

                              - 23 -
               ние программы. Это может понадобиться, например, для
               выхода из бесконечного цикла. Интерактивный ключ ра-
               ботает примерно также,  как ключ прерывания от аппа-
               ратуры,  но менее  надежно.  В  некоторых  ситуациях
               (например,  когда  замаскированы  прерывания)  он не
               срабатывает.  Если программа ожидает ввода, предпоч-
               тительней использовать CONTROL-C,  чем BREAK.  В IBM
               PC AT в тех же целях,  но даже без опции  /K,  может
               быть использован ключ SYS REQ.

/N -  Разрешение выхода по немаскируемому прерыванию.  Для работы с
               немаскируемыми прерываниями  вычислительная  система
               должна иметь соответствующее аппаратное обеспечение.
               Опцию /N можно использовать со следующими  продукта-
               ми:
                 - специальная утилита отладки фирмы IBM
                 - зонд математического обеспечения фирмы ATRON
               При использовании опции /N SYMDEB требуется  аппара-
               тура,  поставляемая с этими продуктами. Дополнитель-
               ного математического обеспечения не  требуется.  При
               использовании  одного  из  этих продуктов в системе,
               отличной от IBM,  для обеспечения выхода  нужно  ис-
               пользовать опцию /N.  Но эту опцию нельзя кодировать
               при работе на IBM PC.  Использование системы  выхода
               по  немаскируемому прерыванию предпочтительней инте-
               рактивного выхода по ключу,  т.к. не зависит от сос-
               тояний прерываний и других условий.

/S - Разрешение смены экрана. Эта опция позволяет разделить экраны:
               один для отладчика,  другой - для отлаживаемой прог-
               раммы. Это удобно, например, при отладке графических
               программ, но требует дополнительно 32К памяти. Опция
               /S  работает  только на IBM-машинах и некоторых сов-
               местимых с ними компьютерах. При работе на совмести-
               мых компьютерах в этом случае должна быть специфици-
               рована также и опция /IBM.  Опция /S не  может  быть
               использована с графикой, требующей более 32К памяти.

/"команды" -  Выполнить серию команд SYMDEB.  Команды должны разде-
               ляться символом ;  и выполняются после загрузки фай-
               лов,  но  перед  их  исполнением.  Этой опцией могут
               быть, например, заданы команды, выполняемые в начале
               каждого сеанса SYMDEB.




                      4.5. Команды SYMDEB.



      При помощи команд SYMDEB реализуется алгоритм отладки, а так-
же обеспечивается выполнение основных функций SYMDEB.
      Команды SYMDEB вводятся в диалоговом режиме после  приглашаю-
щего  символа - .  Группа команд может быть выполнена до начала от-
ладки как показано в п.4.4.
      Введенную команду   SYMDEB  можно  отменить  нажатием  клавиш
CONTROL-C или задержать нажатием клавиш CONTROL-S.  Если отлаживае-
мая программа обратилась к вводу/выводу,  этими клавишами можно от-
менить или задержать введенную команду G. Если программа не обрати-
лась   к   вводу/выводу,  остановить  ее  выполнение  можно  только
соответствующими клавишами,  если  были  заданы  опции  /K  или  /N
(п.4.4).

                              - 24 -
      Некоторые команды имеют параметры, которыми могут быть числа,
символы или выражения.  Параметры,  если их несколько,  разделяются
запятыми.  Между именем команды и первым параметром пробела не тре-
буется, исключая те случаи, где это оговорено особо.
      Ниже приведено описание способов кодирования  различных типов
параметров в командах SYMDEB.
      1. Символы могут представлять регистр,  абсолютное  значение,
адрес  сегмента или смещение сегмента и состоят из одного или более
символов,  включая _ , ? , @ и $ . Первым символом должна быть бук-
ва.  Все символы должны быть определены в символьном файле.  SYMDEB
не чувствителен к смене регистра. При совпадении символов с именами
регистров последние имеют больший приоритет.
      2. Числа представляются в виде:
           <число>Y - двоичное
           <число>O - 8-ричное
           <число>Q - 8-ричное
           <число>T - десятичное
           <число>H - 16-ричное
Допустимо кодирование ключевых символов Y,  O, Q, T и H на регистре
строчных букв. При распознавании чисел максимальный приоритет имеют
16-ричные числа.
      3. Адреса представляются в виде:
           <сегмент>:<смещение>
<Сегмент> и   <смещение>  могут  быть  числами  (представимыми  как
16-разрядные), именами регистров или символами. Многие команды име-
ют умалчиваемые имена регистров (DS или CS).
      4. В качестве смещения могут быть указаны границы:
           <начальный адрес> <конечный адрес>
Если <конечный адрес> опущен,  предполагается  значение  <начальный
адрес>+128.
      5. В качестве смещения может быть задан счетчик:
           <начальный адрес> L <число объектов>
Размер объекта (байт,  слово,  инструкция и т.д.) определяется  ис-
пользующей эту конструкцию командой.
      6. Номер линии представляет собой комбинацию  десятичных  чи-
сел, имен файлов и символов, определяющих уникальную линию исходно-
го текста программы.  Номер линии может быть задан в трех различных
формах:
           .+<число> | - <число>
           .[<имя файла>:]<число>
           .<символ>[+<число> | -<число>]
Первая форма  определяет  смещение  (в линиях) относительно текущей
линии исходного текста.  Вторая форма отображает  абсолютный  номер
линии в файле с указанным именем. Если имя файла опущено, предпола-
гается текущий файл,  определяемый текущими значениями регистров CS
и  IP.  В  третьей форме <символ> может быть инструкцией или меткой
процедуры.  Если задано <число>,  оно является смещением (в линиях)
искомой линии относительно линии, идентифицированной указанным сим-
волом.
      7. Строки являются набором значений в коде ASCII и могут быть
заданы в двух форматах:
           \&'<символы>'
           "<символы>"
Если в строке присутствуют символы ' или " ,  их следует кодировать
дважды.
      8. Выражение  представляет собой комбинацию параметров и опе-
раторов,  которая преобразуется в 8-,  16- или 32-битовое значение.
Могут использоваться скобки.  Унарные адресные операторы подразуме-
вают регистр DS как умалчиваемую адресную базу (сегмент).
      Ниже приведены  унарные операторы (в порядке убывания приори-
тетов):
           +
           -

                              - 25 -
           NOT   - дополнение операнда до 1
           SEG   - адрес сегмента операнда
           OFF   - смещение операнда
           BY    - младший байт из указанного адреса
           WO    - младшее слово из указанного адреса
           DW    - двойное слово из указанного адреса
           POI   - указатель из указанного адреса (как DW)
           PORT  - 1 байт из указанного порта
           WPORT - слово из указанного порта
      Ниже приведены бинарные операторы (в порядке убывания приори-
тетов):
           *
           /   - деление нацело
           MOD - modulus
           :   - переключение сегмента
           +
           -
           AND - побитовое И
           XOR - побитовое исключающее ИЛИ
           OR  - побитовое И



              4.5.1. Команда ассемблирования.


      Синтаксис:

      A[<адрес>]

      Команда ассемблирует  мнемонические инструкции семейства про-
цессоров 8086 (8086,  8087,  8088, 80186, 80287, 80286 - незащищен-
ные) и помещает полученный код по указанному адресу.  Если адрес не
указан, он определяется содержимым регистров CS и IP.
      При введении команды A выдается текущий адрес,  и SYMDEB ожи-
дает введения новых инструкций, которые могут кодироваться строчны-
ми или заглавными буквами или вперемешку. Инструкции ассемблируются
по одной.
      Ввод каждой  инструкции  отмечается  нажатием  клавиши ENTER.
SYMDEB ассемблирует последнюю введенную инструкцию и  выдает  новый
адрес.  Конец ввода инструкций обозначается нажатием ENTER без вво-
димых символов.
      Если введенная  инструкция содержит ошибку,  об этом выдается
сообщение, и текущий адрес не изменяется.
      При использовании  команды  A  необходимо соблюдать следующие
правила:
      1. Дальний возврат обеспечивается мнемоникой RETF.
      2. Инструкции обработки строк  должны  явно  указывать  длину
строки. Рекомендуется использовать MOVSB и MOVSW.
      3. SYMDEB автоматически ассемблирует короткие,  внутренние  и
дальние  скачки  и  вызовы в зависимости от местоположения целевого
адреса. Это правило можно отменить кодированием префиксов NEAR (до-
пустимо сокращение NE) и FAR, например:
           JMP NEAR 502
           JMP FAR 50A
      4. SYMDEB не может определить, ссылаются ли операнды на слово
или на байт памяти. Поэтому тип данных должен быть явно указан пре-
фиксами WORD (допустимо сокращение WO) PTR или BYTE (BY) PTR,  нап-
ример:
           MOV WORD PTR [bp],1
           MOV BY PTR [si-1],symbol
      5. SYMDEB не может определить,  ссылается ли операнд  на  об-
ласть  памяти  или  это  непосредственный операнд.  По этой причине

                              - 26 -
ссылка на область памяти должна быть заключена в одинарные квадрат-
ные скобки.
      6. Для директив DB и DW ассемблируются байт или слово  непос-
редственно в памяти.
      7. SYMDEB поддерживает все формы косвенно-регистровой адреса-
ции, например:
           ADD bx,34[bp+2].[si-1]
           pop [bp+di]
           push [SI]
      8. Распознаются все синонимы кодов (для команд перехода). Ре-
зультатом работы команды реассемблирования U являются также синони-
мы.
      9. Не следует ассемблировать и исполнять инструкции процессо-
ров 8087 и 80287, если система не обеспечена такими сопроцессорами.
Например, использование в такой ситуации инструкции WAIT пожет "по-
весить" систему.


                  4.5.2. Точки выхода.


      SYMDEB предоставляет пользователю возможность вставить в тело
тестируемой  программы  набор точек выхода,  достижение которых при
исполнении кода,  вызовет прекращение работы программы,  выдачу  на
дисплей текущего состояния всех флагов и регистров в формате коман-
ды R (п.4.5.22) и возврат в SYMDEB.
      Ниже описаны команды манипуляции с точками выхода.


      1. Установка точки выхода. Синтаксис:

      BP [<число>]<адрес>[<счетчик пропусков>]["<команды>"]

      Точка выхода вставляется по указанному адресу.  Точки выхода,
вставляемые по команде BP,  в отличие от точек выхода,  создаваемых
командой G, остаются в теле программы (в памяти, разумеется) до тех
пор, пока не будут удалены командой BC.
      SYMDEB позволяет  устанавливать до 10 точек выхода с номерами
от 0 до 9. Если специфицировано <число>, оно задает номер вставляе-
мой точки, в противном случае подразумевается первая доступная точ-
ка.
      <Адрес> может  определять  начало некоторой реальной инструк-
ции.
      <Счетчик пропусков>  задает число "холостых" выполнений точки
выхода, когда ее действие игнорируется, до первого ее срабатывания.
Счетчик хранится как 16-битовое число.
      <Команды> SYMDEB будут выполняться  при  каждом  срабатывании
точки выхода. Друг от друга они должны отделяться символом ; .


      2. Изъятие точек выхода. Синтаксис:

      BC <список> | *

      <Список> представляет собой  последовательность  целых  чисел
без  знака  в пределах от 0 до 9.  Точки выхода с номерами из этого
списка удаляются из программы.  Если специфицировано * ,  удаляются
все точки.


      3. Блокировка точек выхода. Синтаксис:

      BD <список> | *

                              - 27 -

      Команда выполняет функции,  аналогичные функциям команды  BC,
но  точки не удаляются из программы,  а временно блокируются до вы-
полнения соответствующей команды BE.


      4. Разблокировка точек выхода. Синтаксис:

      BE <список> | *

      Команда BE противоположна по функциям команде BD.


      5. Выдача списка точек выхода. Синтаксис:

      BL

      По этой команде выдается информация  о  текущем  расположении
созданных командой BP точках выхода, включающая номер точки, статус
блокировки, адрес, число оставшихся пропусков, в скобках - исходное
значение счетчика пропусков,  а также номер линии исходного текста,
если такие номера используются.
      Статус блокировки  может принимать следующие значения:  e для
разблокированной точки,  d для заблокированной точки или v для вир-
туальной точки.  Точка выхода считается виртуальной,  если она была
вставлена в файл в то время, когда он еще не был загружен.



                   4.5.3. Комментарии.


      Синтаксис:

      * <комментарий>

      Текст комментария выводится на дисплей.




                  4.5.4. Команда сравнения.


      Синтаксис:

      C <границы> <адрес>

      По этой команде байты памяти в указанных границах сравнивают-
ся с соответствующими им байтами, начиная с указанного адреса.
      Если все байты совпадают, SYMDEB опять выдает свой приглашаю-
щий символ. В противном случае предварительно выдаются все пары не-
совпадающих байтов.


                 4.5.5. Команда "выдать".


      Синтаксис:

      ?<выражение>

      Значение специфицированного  выражения вычисляется и выдается

                              - 28 -
на консоль в различных форматах.  Выдаваемая информация включает  в
себя полный адрес, 16-битовое 16-ричное значение, полное 32-битовое
16-ричное значение, десятичное значение в скобках и значение строки
в двойных кавычках.  Символы строки представляются точками, если их
значение меньше 32 (20h) или больше 126 (7h).
      Выражение может быть комбинацией чисел,  символов,  адресов и
операторов.

                   4.5.6. Команды дампа.


      Следующие команды SYMDEB обеспечивают выдачу на консоль дампа
оперативной памяти:


      1. Дамп памяти по адресу или в границах. Синтаксис:

      D [<адрес> | <границы>]

      Формат дампа  определяется предыдущей введенной командой дам-
па.  Если же это первая вводимая команда дампа, предполагается фор-
мат команды DB.
      Команда D выдает одну или более линий в зависимости  от того,
<адрес> или <границы> указаны. Выдается по меньшей мере одно значе-
ние.  Если специфицированы <границы>,  выдаются все значения в них.
Если операнд опущен, выдается содержимое памяти, начинающейся сразу
после области, выданной предыдущей командой дампа. Если раньше дам-
пирования не производилось,  используется содержимое регистра IP, а
если и этот регистр не был определен,  используется содержимое  ре-
гистра DS.


      2.  Дамп памяти по адресу или в границах в коде ASCII.
Синтаксис:

      DA [<адрес> | <границы>]

      Выдается одна  или более линий в зависимости от того, <адрес>
или <границы> указаны.  Может быть выдано до 48 символов  в  линию.
Символы, не имеющие аналогов в коде ASCII, т.е. со значением, боль-
шим 7h или меньшим 20h, обозначаются точками.
      Если специфицирован  <адрес>,  выдается  содержимое памяти до
ближайшего нулевого байта или 128 байтов. Если параметр опущен, вы-
даются  значения всех байтов,  начиная с непосредственно следующего
за выданным предыдущей командой дампа,  до ближайшего нулевого  или
128 байтов.  Если при задании границ использовано L,  выдается ука-
занное число байтов.


      3. Дамп памяти по байтам. Синтаксис:

      DB [<адрес> | <границы>]

      Выдается комбинированный   (16-ричный  и  символьный  в  коде
ASCII) дамп памяти,  начиная с указанного адреса  или  в  указанных
границах. Если указан <адрес> выдаются значения 128 байтов.


      4. Дамп памяти по словам. Синтаксис:

      DW [<адрес> | <границы>]

      Аналогично DB,  но при указании адреса выдается содержимое 64

                              - 29 -
слов памяти.


      5. Дамп памяти по двойным словам. Синтаксис:

      DD [<адрес> | <границы>]

      Аналогично DB,  но при указании адреса выдается содержимое 32
двойных слов памяти.


      6. Дамп коротких десятичных чисел. Синтаксис:

      DS [<адрес> | <границы>]

      Выдается комбинированный  (16-ричный  и  в  форме   коротких,
4-байтных десятичных чисел с плавающей точкой) дамп памяти, начиная
с указанного адреса, или в указанных границах.
      Выдается одна  или более линий в зависимости от того, <адрес>
или <границы> указаны.
      Выдается по  меньшей  мере  одно число.  Если специфицированы
границы, выдаются все числа в их пределах.


      7. Дамп длинных десятичных чисел. Синтаксис:

      DL [<адрес> | <границы>]

      Команда аналогична DS, но оперирует с длинными (8 байтов) де-
сятичными числами.


      8. Дамп 10-байтных десятичных чисел. Синтаксис:

      DT [<адрес> | <границы>]

      Команда аналогична DS, но оперирует с 10-байтными десятичными
числами.


             4.5.7. Команды ввода с клавиатуры.


      При помощи команд ввода с клавиатуры данные могут быть введе-
ны непосредственно в память.
      Описание команд ввода с клавиатуры приведено ниже.


      1. Ввод значений. Синтаксис:

      E <адрес> [<список>]

      Одно или более значений вводятся в память,  начиная с указан-
ного адреса.  Размер значений устанавливается  предыдущей  командой
ввода с клавиатуры, а если ее не было, предполагается EB.
      Если элемент списка задан некорректно, список игнорируется.


      Если список опущен,  SYMDEB запрашивает значения в диалоговом
режиме с указанием текущего адреса.  Конец  списка  в  этом  случае
обозначается нажатием клавиши ENTER без указания значения.



                              - 30 -
      2. Ввод байтов. Синтаксис:

      EB <адрес> [<список>]

      Одно или более чисел,  занимающих 1 байт,  вводятся в память,
начиная с указанного адреса.
      Если список опущен,  SYMDEB запрашивает значения в диалоговом
режиме  с  указанием текущего адреса.  При этом имеется возможность
заменить или пропустить значение, вернуться к предыдущему значению,
выйти из команды.
      Для замены числа следует записать новое значение после  теку-
щего.
      Для пропуска числа необходимо нажать SPACE.
      Для возврата к предыдущему числу следует ввести  - .
      Для выхода из команды служит клавиша ENTER.


      3. Ввод байтов. Синтаксис:

      EA <адрес> [<список>]

      Аналогично EB.


      4. Ввод слов. Синтаксис:

      EW <адрес> [<значение>]

      Указанное значение в формате слова вводится в память по  ука-
занному адресу. После ввода SYMDEB запрашивает значение следующих 4
байтов.  Конец ввода обозначается нажатием клавиши ENTER без указа-
ния значения.


      5. Ввод двойных слов. Синтаксис:

      ED <адрес> [<значение>]

      Указанное значение в формате двойного слова вводится в память
по указанному адресу.  Двойное слово кодируется как пара слов, раз-
деленных символом :  . После ввода SYMDEB запрашивает значение сле-
дующих  8  байтов.  Конец ввода обозначается нажатием клавиши ENTER
без указания значения.


      6. Ввод коротких десятичных чисел. Синтаксис:

      ES <адрес> [<значение>]

      Указанное значение  в формате короткого (4 байта) десятичного
числа с плавающей точкой вводится в память  по  указанному  адресу.
После  ввода SYMDEB запрашивает значение следующих 4 байтов.  Конец
ввода обозначается нажатием клавиши ENTER без указания значения.


      7. Ввод длинных десятичных чисел. Синтаксис:

      EL <адрес> [<значение>]

      Команда аналогична ES, но оперирует с длинными (8 байтов) де-
сятичными числами,  которые представляются парой чисел, разделенных
символом : .


                              - 31 -

      8. Ввод 10-байтных десятичных чисел. Синтаксис:

      ET <адрес> [<значение>]

      Команда аналогична EL, но оперирует с 10-байтными десятичными
числами.


              4.5.8. Просмотр символьного плана.

      Синтаксис:

      X [*]
      X? [<имя плана>!][<имя сегмента>:][<символ>]

      SYMDEB создает символьный план для каждого символьного файла,
специфицированного в командной строке запуска SYMDEB.
      Форма команды  X обеспечивает выдачу имен и загрузочных адре-
сов сегментов и символов текущего символьного плана.  Если специфи-
цировано * ,  выдаются имена и адреса всех загруженных в данный мо-
мент символьных планов.
      Форма команды X?  обеспечивает выдачу одного или более симво-
лов в символьном плане. Если указано имя символьного плана, выдает-
ся  информация об этом плане (<имя символьного плана> должно предс-
тавлять имя соответствующего файла без расширения). Если задано имя
сегмента,  выдаются  имя  и загрузочный адрес этого сегмента.  Если
специфицирован символ,  выдаются адрес сегмента  и  смещение  этого
символа.  Для того, чтобы получить информацию о нескольких символах
или сегментах,  следует задавать частичные имена  с  использованием
символа * .


               4.5.9. Команда "наполнения".


      Синтаксис:

      F <границы> <список>

      Память в  указанных границах "наполняется" значениями из ука-
занного списка.  Если границы определяют больше памяти,  чем  может
занять  список,  список  начинает  обрабатываться сначала.  Если же
длиннее список, его не помещающийся в границы остаток игнорируется.


                4.5.10. Команда Go.


      Синтаксис:

      G [=<адрес начала программы>][<адреса точек выхода>]

      По команде G управление передается  программе  по  указанному
адресу  начала.  Выполнение  продолжается до конца программы или до
достижения точек выхода, если они указаны. Программа останавливает-
ся также на точках выхода, внесенных командой BP.
      Если адрес начала программы опущен,  управление передается по
адресу, определяемому содержимым регистров CS и IP.
      Для передачи  управления  программе  используется  инструкция
IRET.  При этом SYMDEB соответствующим образом устанавливает указа-
тель стека пользователя и заносит в этот стек флаги и регистры CS и
IP.  Следует  иметь в виду,  что если стек пользователя не содержит

                              - 32 -
хотя бы 6 байтов доступной памяти,  выполнение команды G может "по-
весить" систему.
      Все значения без предшествующего = рассматриваются как адреса
точек выхода. Допустимо задание до 10 точек выхода. Их адреса долж-
ны указывать на начало инструкции.
      Для создания точки выхода SYMDEB по каждому специфицированно-
му адресу помещает инстукцию INT с кодом прерывания 204 (0CCh). При
выходе  из программы в одной из этих точек все внесенные инструкции
INT удаляются из программы. Однако, если выполнение продолжается до
конца  программы  или  будет  прекращено каким-либо другим образом,
SYMDEB не удаляет внесенные им инструкции. В этом случае до следую-
щего запуска нужно перезагрузить программу при помощи команд N и L.
      Когда выполнение программы достигает точки выхода, SYMDEB вы-
дает на дисплей текущее содержимое всех регистров и флагов в форма-
те команды R,  а также следующую инструкцию.  Выполнение  программы
прекращается.
      Если выполнение достигло логического конца  программы, SYMDEB
выдает  сообщение Program terminated normally,  и на экран выдается
текущее содержимое регистров и флагов.



           4.5.11. Справка о командах SYMDEB.


      Синтаксис:

      ?

      На дисплей выдается список команд SYMDEB.


                 4.5.12. HEX-команда.


      Синтаксис:

      H <значение 1> <значение 2>

      Выполняются   операции   <значение 1>+<значение 2>   и
<значение 1>-<значение 2>,  и результаты выдаются на экран в
виде 16-ричных чисел.



               4.5.13. Команда ввода из порта.


      Синтаксис:

      I <номер порта>

      Из порта с указанным номером (представимым  16-битным числом)
считывается и выдается на экран 1 байт данных.



               4.5.14. Команда загрузки файла.


      Синтаксис:

      L [<адрес> [<драйв> <запись> <счетчик>]]

                              - 33 -

      Команда L обеспечивает считывание файла с диска и  запись его
в память.
      Если опущены все параметры команды,  загружается файл с  име-
нем,  ранее определенным командой N или заданным аргументом при за-
пуске SYMDEB.  Если имя не было определено, SYMDEB считывает его из
области памяти по адресу DS:5C.  Эта область представляет собой уп-
равляющий блок, содержащий имя определенного по команде N файла или
аргумент запуска.
      Пара регистров BX:CX должна содержать число загружаемых  бай-
тов.
      В памяти файл размещается,  начиная с указанного адреса  или,
если он опущен, с адреса CS:100.
      Если специфицированы все 4 параметра команды L,  в память  по
указанному адресу загружается определяемое счетчиком количество ло-
гических записей, расположенных на указанном драйве. <Запись> опре-
деляет  первую  считываемую запись и может представляться 16-ричным
числом,  содержащим от 1 до 4 16-ричных цифр. <Счетчик> представля-
ется аналогично. <Драйв> может быть задан числом 0, 1, 2 или 3, оп-
ределяющим логический адрес драйва A, B, C или D соответственно.
      Если имя  файла имеет расширение EXE,  его длина и адрес заг-
рузки берется из заголовка файла,  а параметры <адрес> и  <счетчик>
команды L, если они указаны, игнорируются.
      Если имя файла имеет расширение HEX, адрес загрузки определя-
ется суммой указанного в заголовке файла адреса и параметра <адрес>
команды L или,  если этот параметр опущен,  только адресом загрузки
из заголовка.


                4.5.15. Команда перемещения.


      Синтаксис:

      M <границы> <адрес>

      Блок памяти  в  указанных  границах перемещается по заданному
адресу.
      Перемещение произойдет нормально, даже если исходный и прини-
мающий блоки перекрываются. Принимающий блок всегда является точной
копией  исходного.  При перекрытии содержимое исходного блока может
измениться.
      Для предотвращения  потери данных команда M побайтно копирует
данные, начиная со старших адресов исходного блока,
если  адрес  его  начала  меньше  адреса начала принимающего
блока.  В противном случае копирование производится, начиная
с младших адресов исходного блока.


               4.5.16 Команда установки имени.


      Синтаксис:

      N [<имя файла>] [<аргументы>]

      Устанавливается имя  файла для последующего выполнения команд
L и W или аргументы для последующего исполнения программы.
      Аргументы, если они заданы,  копируются,  включая пробелы,  в
область памяти по адресу DS:81.  Длина поля параметров запоминается
в байте памяти по адресу DS:80.
      Если первые 2 аргумента являются именами файлов,  по  адресам
DS:5C и DS:6C создаются блоки управления файлами (FCB), куда по со-

                              - 34 -
ответствующим форматам и копируются имена.
      Команда N  трактует <имя файла> как тоже аргумент,  записывая
его в память по адресу DS:81 и создавая FCB по адресу DS:5C. Поэто-
му  необходимо  помнить,  что установка нового значения имени файла
изменяет предыдущие аргументы программы.


        4.5.17. Команда открытия символьного плана.


      Синтаксис:

      XO [<имя плана>!][<имя сегмента>]

      Команда XO устанавливает активным символьный план и/или  сег-
мент.
      Имя символьного плана,  если оно указано,  должно быть именем
(без  расширения) специфицированного при запуске SYMDEB символьного
файла.
      Имя сегмента, если оно указано, должно быть именем сегмента в
специфицированном символьном плане.  Все сегменты в открытом  плане
доступны, но открывается первый сегмент.



              4.5.18. Команда вывода в порт.


      Синтаксис:

      O <номер порта> <1-байтовое 16-ричное значение>

      Указанное значение направляется в порт с данным номером.  Но-
мер порта должен быть представим 16-битовым значением.


                  4.5.19. P-трассировка.


      Синтаксис:

      P [=<адрес>] [<счетчик>]

      Команда P выполняет задаваемую адресом инструкцию и затем вы-
дает на дисплей в формате команды R текущее содержимое всех регист-
ров и флагов.
      Если <адрес> опущен,  выполняется инструкция по адресу, опре-
деляемому регистрами CS и IP.
      Счетчик, если он присутствует, задает число инструкций, кото-
рые будут выполнены до останова. Выдача регистров и флагов при этом
будет осуществляться после выполнения каждой инструкции  до  начала
выполнения следующей.
      P-трассировка подобна T-трассировке  (п.4.5.30)  с  той  лишь
разницей, что P-трассировка прекращается после вызова процедуры или
прерывания в то время, как T-трассировка отслеживает и такие ситуа-
ции.
      Формат и объем выдаваемой информации существенно  зависит  от
режима, установленного командой S (подробнее см. п.4.5.25).


             4.5.20. Команда выхода из SYMDEB.



                              - 35 -
      Синтаксис:

      Q

      По этой команде SYMDEB заканчивает свою работу.


         4.5.21. Команды переназначения ввода/вывода.


      Синтаксис:

      <  <имя устройства>
      >  <имя устройства>
      =  <имя устройства>
      {  <имя устройства>
      }  <имя устройства>
      ~  <имя устройства>

      Команды переназначения блокируют  последующие  операции  вво-
да/вывода  и  направляют их на работу с указанным устройством.  Это
может понадобиться,  например, когда отлаживаемая программа выводит
графическую информацию на консоль, используемую и SYMDEB.
      Команда > переключает весь последующий вывод SYMDEB, а коман-
да < - весь последующий ввод SYMDEB на указанное устройство. Коман-
да = включает в себя обе эти функции.
      Команда {  переключает  весь  последующий  ввод  отлаживаемой
программы,  а команда } - весь последующий вывод отлаживаемой прог-
раммы  на  указанное устройство.  Команда ~ включает в себя обе эти
фукции.
      В качестве имени устройства может быть указано принятое в DOS
имя устройства или имя файла.
      Если в  качестве  имени устройства задано COM1 или COM2,  это
накладывает дополнительные ограничения на конфигурацию  системы.  В
частности,  в  этом  случае  становятся недоступными и игнорируются
комбинации клавиш CONTROL-C и CONTROL-S.


              4.5.22. Выдача регистров.


      Синтаксис:

      R [<имя регистра>[[=]<значение>]]

      Команда R выдает на дисплей содержимое регистров процессора и
позволяет загружать их требумыми значениями.
      Еслм имя регистра опущено, выдаются все регистры и флаги.
      Кроме того, выдается инструкция, на которую указывают регист-
ры CS и IP,  и может быть сделана попытка выполнить  ее.  При  этом
SYMDEB вычисляет операнды инструкции. Если инструкцией является вы-
зов DOS,  будет показан номер функции.  Если регистры CS и IP уста-
новлены не на инструкцию,  а на позицию в памяти, будет выдан адре-
сующий ее символ.


      Если указано  имя  регистра,  SYMDEB  выдает его содержимое и
запрашивает новое значение (ответ заключается  в  наборе  требуемых
символов  и нажатии клавиши ENTER).  Если заданы и имя регистра,  и
значение, производится загрузка регистра.
      Могут быть указаны следующие имена регистров: AX, BX, CX, DX,
SP, BP, SI, DI, CS, DS, SS, ES, IP, PC (IP) и F (флаги).
      Установка значений  флагов  осуществляется следующим образом.

                              - 36 -
При спецификации F в команде R состояние каждого флага  выдается  в
виде двухсимвольного кода,  как показано в таблице 4.1. Список зна-
чений заканчивается символом - , после которого можно в этом же ко-
де  в любой последовательности ввести новые значения выбранных фла-
гов.  Значения остальных флагов не изменятся.  каждый флаг в  одном
списке  может  быть  специфицирован  только один раз.  Конец списка
обозначается нажатием клавиши ENTER.


             Таблица 4.1. Коды значений флагов.
____________________________________________________________
|                |                    |                    |
|     Флаг       |         1          |         0          |
|________________|____________________|____________________|
|                |                    |                    |
|  Переполнение  |        OV          |        NV          |
|________________|____________________|____________________|
|                |                    |                    |
|   Направление  |   DN (уменьшение)  |   UP (увеличение)  |
|________________|____________________|____________________|
|                |                    |                    |
|   Прерывания   |     EI (запрет)    |   DI (разрешение)  |
|________________|____________________|____________________|
|                |                    |                    |
|     Знак       |      NG (минус)    |      PL (плюс)     |
|________________|____________________|____________________|
|                |                    |                    |
|     Нуль       |        ZR          |        NZ          |
|________________|____________________|____________________|
|                |                    |                    |
|  Вспомогатель- |        AC          |        NA          |
|   ный перенос  |                    |                    |
|________________|____________________|____________________|
|                |                    |                    |
|     Паритет    |    PE (четность)   |   PO (нечетность)  |
|________________|____________________|____________________|
|                |                    |                    |
|     Перенос    |        CY          |        NC          |
|________________|____________________|____________________|



      Флаги модифицируются последовательно по одному.  Поэтому  при
ошибочном  кодировании  возникнет ситуация,  когда часть флагов (до
ошибочного символа) изменила свои значения, а часть, начиная с оши-
бочного символа, - нет.
      Формат и объем выдаваемой информации существенно  зависит  от
режима, установленного командой S (подробнее см. п.4.5.25).


                  4.5.23. Смена экрана.


      Синтаксис:

      \

      Эта команда позволяет переключиться с экрана отладки на экран
отлаживаемой программы,  что бывает нужно,  когда программа, напри-
мер, выводит на экран графическую информацию.
      Возврат на экран SYMDEB осуществляется нажатием любой  клави-
ши.
      При работе на IBM-машине для использования команды смены  эк-

                              - 37 -
рана необходимо задание опции SYMDEB /S. При работе на машине, сов-
местимой с IBM, необходимо также задать опцию /I.


               4.5.24. Команда поиска.


      Синтаксис:

      S <границы> <список>

      В области памяти с указанными границами  осуществляется поиск
заданных в списке 1-байтных значений с индикацией на экране резуль-
татов поиска. Элементы списка должны разделяться запятыми.


         4.5.25.Команда установки режима индикации.


      Синтаксис:

      S-|+|&

      Команда S устанавливает режим  выдачи  на  дисплей,  которому
SYMEB будет в дальнейшем придерживаться.
      По команде S+ SYMDEB будет выдавать  на  экран  информацию  в
терминах линий исходного текста программы. Команда S- устанавливает
режим выдачи реассемблированного кода программы. Команда S& обеспе-
чивает обе эти функции. Первоначальным умалчиваемым режимом являет-
ся S&.
      Команда S  имеет смысл лишь при работе с программами на языке
высокого уровня. Для ассемблерных программ автоматически устанавли-
вается режим S-.
      Если символьный план не открыт или не содержит  информацию  о
линиях исходной программы, SYMDEB игнорирует все последующие запро-
сы на выдачу исходных линий. В режиме S& SYMDEB выдает исходную ли-
нию,  содержащую инструкцию, на которую указывает пара регистров CS
и IP.
      Команда S  оказывает влияние на работу последующих команд ре-
ассемблирования U (п.4.5.31).
      Команда S влияет также на работу команд R, T и P. В режиме S+
эти команды выдают за раз одну исходную линию,  которая может соот-
ветствовать нескольким реассемблированным инструкциям.  В режиме S-
выдается только реассемблированный код.  В режиме S& выдаются реас-
семблированный код и номера линий.
      Исходные линии выдаются в виде:
  <номер линии>:<исходный текст>
      Исходные линии при выдаче предшествуют реассемблированным ин-
струкциям.
      Всякий раз,  когда SYMDEB первый раз обращается  к  исходному
тексту,  он ищет в текущем подоглавлении файл с тем же базовым име-
нем,  что и соответствующий символьный файл.  При неудачном  поиске
SYMDEB  выдает  на консоль запрос об имени исходного файла.  Если в
ответ на него нажать клавишу ENTER, не указав имени, SYMDEB подавит
выдачу  исходных  линий,  вместо которых тогда будут выдаваться имя
плана и номер линии.  Эту процедуру нужно производить при работе  с
программами,  сформированными ранними версиями (до 3.31) компилято-
ров FORTRAN и PASCAL.


             4.5.26. Временный выход в DOS.



                              - 38 -
      Синтаксис:

      ![<команда DOS>]

      Команда !  позволяет выполнить COMMAND.COM и  команды  MS-DOS
вне  SYMDEB.  COMMAND.COM  выполняется без аргументов с сохранением
контекста отладки.  Для возврата в  SYMDEB  служит  команда  MS-DOS
EXIT.
      Если в команде !  задана команда DOS, производится выполнение
этой команды и автоматический возврат в SYMDEB.
      Использование команды !  требует дополнительной  памяти.  Для
более экономного использования памяти рекомендуется предусматривать
в ассемблерных программах вызов DOS с функцией 4Ah, который освобо-
дит   неиспользуемую   память.   Тот   же  эффек  дает  опция  LINK
/CPARMAXALLOC.  Программы на  языке  C,  обработанные  компилятором
MICROSOFT C версии 3.0 и выше,  освобождают ненужную память автома-
тически, если была выполнена процедура _main. SYMDEB также освобож-
дает неиспользуемую им память.
      В команде !  не может быть использован ограничитель ;  , т.к.
весь  текст после !  передается в COMMAND.COM и будет интерпретиро-
ваться как командная строка DOS.
      Для размещения копии COMMAND.COM SYMDEB использует переменную
COMSPEC команды DOS SET.


         4.5.27. Команда выдачи кода исходной линии.


      Синтаксис:

      .

      По этой команде выдается код исходной линии невзирая  на  ре-
жим, установленный командой S.
      Команда не может быть использована при работе с ассемблерными
программами.


           4.5.28. Команда трассировки стека.


      Синтаксис:

      K [<число>]

      Эта команда  позволяет  увидеть  текущий  кадр стека.  Первая
строка трассы содержит имя текущей  процедуры,  ее  аргументы,  имя
файла и номер линии, вызвавшей процедуру. Следующая строка описыва-
ет вызвавшую процедуру и т.д.
      Если число  аргументов  процедуры  переменно  или неизвестно,
SYMDEB использует специфицированное в команде K число,  которое за-
дает число слов параметров.
      Команда K работает только при соблюдении стандартных соглаше-
ний о связях, в противном случае она игнорируется.



           4.5.29. Команда установки символа.


      Синтаксис:

      Z <символ> <значение>

                              - 39 -

      В результате выполнения команды Z указанный символ будет свя-
зан со специфицированным значением адресом.


              4.5.30. T-трассировка.

      Синтаксис:

      T [=<адрес начала>] [<счетчик>]

      Команда T выполняет задаваемую адресом инструкцию и затем вы-
дает на дисплей в формате команды R текущее содержимое всех регист-
ров и флагов.
      Если <адрес> опущен,  выполняется инструкция по адресу, опре-
деляемому регистрами CS и IP.
      Счетчик, если он присутствует, задает число инструкций, кото-
рые будут выполнены до останова. Выдача регистров и флагов при этом
будет  осуществляться  после выполнения каждой инструкции до начала
выполнения следующей.
      В отличие  от P-трассировки (п.4.5.19) T-трассировка не прек-
ращается при вызове процедуры или прерывании. Исключение составляет
лишь прерывание с номером 21h (функция DOS).
      Трассировка будет идти лучше, если не использовались средства
оптимизации данного языка.
      Команда T использует режим трассировки аппаратуры процессоров
8086,  8088,  80186 или 80286. С ее помощью можно трассировать инс-
трукцию в ROM (read-only memory).
      Формат и  объем  выдаваемой информации существенно зависит от
режима, установленного командой S (подробнее см. п.4.5.25).


              4.5.31. Команда реассемблирования.


      Синтаксис:

      U [<границы>]

      По команда U на дисплей выдаются реассемблированные  инструк-
ции и/или предложения исходной программы.  Формат вывода зависит от
режима,  установленного командой S, и от языка, на котором была на-
писана программа.  Если отлаживаемая программа была обработана MASM
или несовместимым с SYMDEB компилятором, принудительно устанавлива-
ется режим S-.  В режимах S+ и S& при работе с программами, вырабо-
танными совместимыми с SYMDEB компиляторами,  по команде U выдаются
линии исходного текста и реассемблированные инструкции (одна исход-
ная линия для каждой соответствующей группы  предложений  ассембле-
ра).  Исходные линии считываются из исходного файла. Инструкции для
реассемблирования берутся из блока памяти  в  указанных  в  команде
границах.
      В отличие от команд T и P,  для команды U режимы S+ и S& сов-
падают.  Для обоих режимов (исходного и смешанного) SYMDEB требует,
чтобы вместе с программой был загружен и символьный план,  содержа-
щий  информацию о номерах строк исходной программы.  При отсутствии
этой информации исходные линии не выдаются.
      Если <границы> опущены, обрабатываются первые 8 линий кода по
текущему адресу реассемблирования.  Текущим адресом реассемблирова-
ния  является  адрес  первого  байта (линии) после последнего байта
(линии), выданного предыдущей командой U.
      Защищенные инструкции  процессора  80286  не могут быть реас-
семблированы.


                              - 40 -


           4.5.32. Команда выдачи исходной линии.


      Синтаксис:

      V <адрес>

      Команда V  выдает  исходные линии программы,  соответствующие
инструкциям,  расположенным,  начиная с указанного адреса. При этом
загруженный  символьный  план  должен содержать информацию о линиях
исходной программы.
      Исходные линии  выдаются независимо от режима, установленного
командой S.



             4.5.33. Команда записи на диск.


      Синтаксис:

      W [<адрес> [<драйв> <запись> <счетчик>]]

      Команда W  обеспечивает  запись участка памяти в определенное
место на диске.
      Если опущены  все  параметры  команды,  запись производится в
файл с именем, ранее определенным командой N.
      Пара регистров BX:CX должна содержать число записываемых бай-
тов.
      В памяти  записываемые  данные должны размещаться,  начиная с
указанного адреса или, если он опущен, с адреса CS:100.
      Если специфицированы все 4 параметра команды W,  на указанный
драйв записывается определяемое счетчиком количество логических за-
писей,  содержимое  которых расположено по указанному адресу.  <За-
пись> определяет первую записываемую на диск запись и может  предс-
тавляться  16-ричным  числом,  содержащим от 1 до 4 16-ричных цифр.
<Счетчик> представляется аналогично.  <Драйв> может быть задан чис-
лом 0, 1, 2 или 3, определяющим логический адрес драйва A, B, C или
D соответственно.
      Не рекомендуется записывать данные по абсолютному адресу сек-
тора диска, даже если имеется уверенность, что сектор свободен. За-
пись на зарезервированный или занятый сектор может испортить содер-
жимое файла или даже диска.
      Если имя  отлаживаемого  файла  имеет расширение COM или BIN,
можно при помощи SYMDEB внести изменения в программу и затем  запи-
сать ее обратно в файл. При загрузке файла его длина, начальный ад-
рес и имя будут установлены правильно с  точки  зрения  последующей
записи. Однако, если в процессе отладки использовались команды G, P
или T или изменялось содержимое пары  регистров  BX:CX,  утраченные
значения следует восстановить до записи.
      Команду W нельзя использовать для записи в EXE- или HEX-файл.
Для модификации таких файлов может служить следующая процедура:
      1. Запустить SYMDEB с исполнительным файлом и запомнить  нес-
колько первых инструкций программы.
      2. Выйти из SYMDEB и переименовать исполнительный  файл  так,
чтобы расширение его имени отличалось от EXE и HEX.
      3. Запустить SYMDEB с переименованным  исполнительным файлом.
При этом заголовок файла будет рассматриваться как часть кода прог-
раммы (очевидно, что в этом случае нет смысла в загрузке символьных
файлов, т.к. все символы в них будут иметь некорректные адреса).
      4. Использовать команду поиска S для нахождения  действитель-

                              - 41 -
ного  начала программы по запомненным инструкциям.  Для этого может
понадобиться несколько попыток, т.к. начальный адрес может меняться
в зависимости от порядка сегментов и других факторов.
      5. Имея адрес начала программы,  отыскать инструкции, в кото-
рые нужно внести изменения, и проделать эти изменения.
      6. Установить параметры команды W и записать весь файл, вклю-
чая его заголовок,  на диск. Длина заголовка должна входить в общую
длину записываемого файла в паре регистров BX:CX.
      7. Выйти  из  SYMDEB и произвести обратное переименование ис-
полнительного файла.



           5. CREF: утилита перекрестных ссылок.
           -------------------------------------


                    5.1. Общие положения.


      Утилита перекрестных  ссылок  CREF предназначена для создания
листинга перекрестных ссылок всех символов в ассемблерной  програм-
ме.  Для каждого символа указываются номера строк исходной програм-
мы, содержащих ссылки на этот символ.
      Листинг перекрестных  ссылок вместе с создаваемой ассемблером
таблицей символов упрощает отладку программы.
      Листинг перекрестных  ссылок создается на основе формируемого
ассемблером CRF-файла.


                  5.2. Запуск CREF.


      Утилита CREF может быть запущена двумя способами:
      1. С использованием подсказок.
      2. При помощи командной строки.

      Для запуска CREF с использованием подсказок  небходимо ввести
командную  строку,  содержащую только имя файла CREF и спецификацию
его пути поиска,  если это необходимо.  CREF перейдет в  диалоговый
режим  и серией подсказок запросит у пользователя информацию о сле-
дующих файлах (ответ заключается в наборе требуемых символов и  на-
жатии клавиши ENTER):
      1. Имя файла перекрестных ссылок,  сформированного  ассембле-
         ром. Если при ответе не указано расширение, предполагается
         CRF.
      2. Имя файла создаваемого файла листинга перекрестных ссылок.
         Если при ответе не указано расширение, предполагается REF.

      Для запуска CREF при помощи командной строки необходимо ввес-
ти командную строку следующего вида:

CREF <имя файла перекрестных ссылок>
[,<имя файла листинга перекрестных ссылок>][;]

      Умалчиваемые расширения имен файлов совпадают со случаем  за-
пуска CREF с использованием подсказок.
      Если после имени файла перекрестных ссылок  специфицировано ;
, базовое имя файла листинга по умолчанию устанавливается таким же,
как и у файла перекрестных ссылок.

      Имена файлов при обоих способах запуска могут содержать  спе-
цификации путей поиска в подоглавлениях. Если указание пути отсутс-

                              - 42 -
твует, файл ищется или создается в текущем подоглавлении.



          6. LIB: утилита обслуживания библиотек.
          ---------------------------------------


                   6.1. Общие сведения.

      Библиотека представляет собой набор объектных  модулей,  объ-
единенных в одном файле.
      Библиотека может быть использована программой LINK для согла-
сования внешних ссылок.
      LIB создает для библиотеки таблицу содержимого,  где распола-
гаются имена объектных модулей.  LINK выбирает из библиотеки только
те модули, на которые имеются ссылки в обрабатываемой им программе.
      LIB выполняет с библиотечными файлами следующие операции:
      1. Создание новой библиотеки.
      2. Проверка содержимого существующей библиотеки.
      3. Печать листинга библиотечных ссылок.
      4. Сопровождение библиотек.

      Эти функции подробно описаны в последующих разделах.


                     6.2. Запуск LIB.


      Запуск LIB может быть осуществлен тремя способами:
      1. С использованием подсказок.
      2. При помощи командной строки DOS.
      3. С использованием файла ответа.

      Для запуска LIB с использованием подсказок  необходимо ввести
командную строку, содержащую только имя программы LIB со специфика-
цией подоглавления,  если она требуется.  LIB перейдет в диалоговый
режим  и серией подсказок запросит у пользователя информацию о сле-
дующих объектах (ответ заключается в наборе  требуемых  символов  и
нажатии клавиши ENTER):
      1. Имя библиотеки, с которой будет производиться работа. Если
         при ответе не указано расширение, предполагается LIB. Если
         библиотеки с введенным именем не  существует,  LIB  выдаст
         запрос: Library file does not exist. Create? Ответ y обес-
         печит создание библиотеки, n - возврат в DOS. В этом отве-
         те  может  быть  задана опция /PAGESIZE,  описание которой
         приводится ниже.
      2. Операции с библиотекой. Ответом является набор команд LIB,
         которые описаны в п.6.3.4.  Если команды LIB не помещаются
         на строке,  в ее последней позиции следует поставить приз-
         нак продолжения - символ & и нажать ENTER, после чего мож-
         но будет продолжать ввод команд.
      3. Имя файла листинга.  Если не было задано никаких модифика-
         ций библиотеки, LIB создает файл листинга и возвращает уп-
         равление в DOS.
      4. Имя выходной библиотеки. Этот запрос появляется в том слу-
         чае,  когда была специфицирована хотя бы одна операция мо-
         дификации библиотеки.  Если при ответе не указано расшире-
         ние,  предполагается LIB.  Библиотека с  указанным  именем
         будет  создана как копия рабочей библиотеки и все операции
         будут производиться именно с ней.  Если нажать  ENTER,  не
         введя имени, операции будут производиться с рабочей библи-
         отекой.  В этом случае для старой библиотеки будет создана

                              - 43 -
         копия с расширением BAK.

      Если в каком-либо ответе после первого встречается символ ; ,
LIB устанавливает оставшуюмя входную информацию по умолчанию.
      В любом ответе могут быть заданы ответы на последующие запро-
сы в формате командной строки для запуска LIB.

      Для запуска  LIB  посредством  командной  строки,  необходимо
ввести командую строку следующего вида:

LIB <имя старой библиотеки>[/PAGESIZE:<число>][<команды>]
[,<имя файла листинга>][,<имя новой библиотеки>]]][;]

      Назначение библиотек и правила  умолчания  аналогичны  случаю
запуска  LIB  с  использованием  подсказок.  Команды  LIB описаны в
п.6.3.4.
      Символ ;  обозначает  конец строки и должен кодироваться пос-
ледним, если он есть. Оставшаяся неопределенной информация устанав-
ливается по умолчанию.

      Спецификации исходной информации LIB могут быть заранее зане-
сены в специальный файл ответа.  Имя этого файла  с  предшествующим
символом @ и указанием пути поиска, если он нужен, может быть поме-
щено в любом месте ответа на подсказку или командной строки и трак-
туется,  как  если  бы содержимое файла ответа было непосредственно
вставлено в это место.  Следует,  однако,  помнить,  что комбинация
символов CARRIAGE-RETURN / LINE-FEED в файле ответа интерпретирует-
ся как ENTER в подсказке или запятая в командном файле.
      Общий вид файла ответа:
 <имя библиотеки>[/PAGESIZE:<число>]
 [<команды>]
 [<имя файла листинга>]
 [<имя выходной библиотеки>]

      Каждая группа  данных  должна задаваться на отдельной строке.
Если группа не помещается на  одной  строке,  в  последней  позиции
строки должен стоять признак продолжения - символ & .
      В файле ответа могут быть опущены компоненты,  уже определен-
ные ответами на подсказки или командной строкой.
      При обнаружении в файле ответа симвода ;  остаток файла игно-
рируется, и оставшаяся неопределенной информация устанавливается по
умолчанию.
      При использовании  файла  ответа  его  содержимое выдается на
консоль в форме подсказок.  Если определена не вся  информация  LIB
переходит в диалоговый режим.
      Если файл   ответа   не    содержит    комбинации    символов
CARRIAGE-RETURN / LINE-FEED или символа ;  ,  LIB выдает на консоль
последнюю строку файла и ожидает нажатия ENTER.

      Единственная опция LIB,  задаваемая при имени рабочей библио-
теки, определяет размер страницы библиотеки и имеет вид: /PAGEZIZE:
<число> или /P:<число>
      Указанное число  задает размер страницы библиотеки в байтах и
должно быть целым четным числом в пределах от 2 до 32768.  По умол-
чанию  принимается 128 для новой библиотеки или размер страницы су-
ществующей библиотеки.
      Размер страницы  влияет на выравнивание хранимых в библиотеке
модулей.  Модули всегда располагаются с начала страницы,  считая от
начала файла.
      Из-за индексной технологии  поиска  и  хранения,  реализуемой
LIB, библиотека с большим размером страницы может содержать большее
число модулей.  Однако,  при этом возможен значительный  перерасход
памяти на диске.  Рекомендуется создавать библиотеки с малым разме-

                              - 44 -
ром страницы.

      Имя каждого файла может сопровождаться информацией  о  подог-
лавлении,  содержащем  этот  файл,  иначе поиск исходного файла или
создание выходного файла будет осуществляться в текущем подоглавле-
нии.
      Работа LIB может быть в любой момент прекращена нажатием кла-
виш CONTROL-C.


               6.3. Функции и команды LIB.

      Среди операций с библиотеками,  выполняемых LIB, следует раз-
личать функции LIB и команды LIB.
      Функции LIB не приводят ни к каким  модификациям существующих
данных. Они описаны в пп.6.3.1, 6.3.2 и 6.3.3.
      Команды LIB предназначены для модификации библиотек. Выполне-
ние команд всегда влечет за собой создание резервной копии исходной
библиотеки,  хранящей состояние  библиотеки  до  начала  коррекций.
Именно команды,  а не функции LIB вводятся в ответе на подсказку, в
командной строке и в файле ответа. Команды LIB описаны в п.6.3.4.


             6.3.1. Создание новой библиотеки.


      Новая библиотека создается при запуске LIB в  случае указания
имени  несуществующей  библиотеки  и утвердительном ответе на подт-
верждающий запрос при использовании подсказок.
      Если используются  команды  модификации  библиотеки,  в новую
библиотеку перед началом модификаций копируется содержимое исходной
библиотеки,  которая в этом случае считается резервной копией.  Ко-
манды LIB выполняются с новой библиотекой.


          6.3.2. Проверка содержимого библиотеки.


      Проверка содержимого библиотеки выполняется  при  задании  во
всех режимах запуска только имени библиотеки и символа ; . Она зак-
лючается в проверке корректности всех входов библиотеки,  что может
производиться, например, после перемещения библиотеки.
      LIB автоматически осуществляет проверку  содержимого  каждого
добавляемого в библиотеку модуля.


         6.3.3. Листинг перекрестных ссылок библиотеки.


      Файл листинга  перекрестных  ссылок  создается при отсутствии
команд LIB и спецификации имени файла в  соответствующих подсказке,
позиции командной строки или строке файла ответа.

      Листинг перекрестных ссылок содержит 2 списка:
      1. Список всех общих символов в библиотеке с  указанием  имен
содержащих их модулей.
      2.Список модулей библиотеки с указанием  содержащихся  в  них
общих символов.


                  6.3.4. Команды LIB.



                              - 45 -
      Команды LIB служат для сопровождения библиотек и обеспечивают
добавление,  удаление, замену модулей в библиотеке, а также копиро-
вание и перемещение модулей в новые библиотеки.
      Команды LIB описаны ниже.


      1. Добавление модуля в библиотеку. Синтаксис:

      +<имя объектного файла>

      Модуль, находящийся в указанном объектном файле,  имя которо-
го,  если нужно дополнено описанием пути поиска  в  подоглавлениях,
добавляется в текущую библиотеку.  Если не указано расширение имени
объектного файла, предполагается OBJ.
      Модуль помещается в библиотеку под именем,  совпадающим с ба-
зовым именем объектного файла.
      Между знаком + и именем файла не должно быть пробелов.


      2. Удаление модуля из библиотеки. Синтаксис:

      -<имя модуля>

      Модуль с указанным именем удаляется из текущей библиотеки.
      Следует иметь в виду, что команды удаления всегда отрабатыва-
ются до команд добавления независимо  от  их  порядка  в  командной
строке.  Такой  порядок  спасает LIB от попыток замены существующей
версии модуля на новую версию.
      Имена модулей могут задаваться как на регистре строчных букв,
так и на регистре заглавных букв.


      3. Замена модуля библиотеки. Синтаксис:

      -+<имя модуля>

      Модуль с  указанным  именем  замещается модулем из объектного
файла, имеющим то же базовое имя, что и указанное имя, и расширение
OBJ. LIB сначала удаляет модуль, а затем ищет файл.
      Имена модулей могут задаваться как на регистре строчных букв,
так и на регистре заглавных букв.


      4. Копирование модуля. Синтаксис:

      *<имя модуля>

      Модуль с указанным именем копируется из библиотеки в  объект-
ный  файл,  создаваемый  в  текущем подоглавлении и имеющий базовое
имя, совпадающее с именем модуля, и расширение OBJ.
      Имена модулей могут задаваться как на регистре строчных букв,
так и на регистре заглавных букв.


      5. Перемещение модуля. Синтаксис:

      -*<имя модуля>

      Работа этой  команды  аналогична копированю с той лишь разни-
цей, что после копирования модуль удаляется из библиотеки.


      6. Объединение библиотек. Синтаксис:

                              - 46 -

      +<имя библиотеки>

      Содержимое указанной библиотеки добавляется в текущую библио-
теку.  Следует помнить, что в этом случае расширение имени опускать
нельзя,  т.к.  тогда указанное имя будет интерпретироваться как имя
объектного файла.
      Модули помещаются в конец текущей библиотеки. Исходная библи-
отека не изменяется.
      Этой командой в библиотеки MS-DOS могут быть добавлены библи-
отеки XENIX или INTEL.



          7. MAKE: утилита сопровождения программ.
          ----------------------------------------


                  7.1. Общие сведения.

      Использование утилиты сопровождения программ  MAKE  позволяет
автоматизировать  процесс разработки и эксплуатации программ на ас-
семблере и языках высокого уровня. После того, как были внесены из-
менения в исходный файл, при помощи MAKE могут быть выполнены дейс-
твия,  необходимые по отображению этих изменений в выходных файлах.
      В отличие от других программ пакетной обработки, MAKE сравни-
вает даты последних модификаций выходных (целевых) файлов  с датами
последних  модификаций исходных (требуемых) файлов.  MAKE выполняет
поставленную задачу, только если целевой файл старше. Это может сэ-
кономить много времени, например, при разработке программ, содержа-
щихся во многих исходных файлах или требующих нескольких шагов ком-
пиляции.


           7.2. Запуск и особенности работы MAKE.


      Перед запуском  MAKE должен быть создан специальный файл опи-
саний MAKE,  содержимое которого задает поставленную задачу и опре-
деляет требуемые для ее выполнения файлы.
      Файл описаний состоит из одного или нескольких описаний цели/
источника. Каждое описание задается в виде:

<имя исходного файла> : <имена требуемых файлов>
      <команда>
         ...

      Предполагается, что указанный исходный файл может быть преоб-
разован,  для чего могут понадобиться файлы  со  специфицированными
после : именами.

      Имена файлов при необходимости могут быть снабжены специфика-
циями путей поиска в подоглавлениях.
      <Команда> рассматривается  как  имя исполнительного файла или
команда MS-DOS.
      Может быть  задано  любое  число требуемых файлов,  но только
один исходный (целевой).  Имена требуемых файлов должны разделяться
хотя бы одним пробелом. Если они не помещаются на одной строке, мо-
жет быть специфицирован признак продолжения - символ \ .
      Может быть  задано любое число команд DOS и/или имен исполни-
тельных файлов,  но каждая команда или имя должны располагаться  на
отдельной строке и начинаться с символа TAB или хотя бы одного про-
бела. Команды или файлы выполняются лишь в том случае, если хотя бы

                              - 47 -
один из требуемых файлов был модифицирован после создания или моди-
фикации целевого, т.е. должно выполняться одно из двух условий:
      - целевой файл старше требуемого;
      - целевой файл не существует.
      Может быть  задано любое число описаний цели/источника.  Пос-
ледняя строка предыдущего  описания  должна  отделяться  от  первой
строки  следующего  описания хотя бы одной строкой,  содержащей все
пробелы.
      При появлении  символа # остаток строки считается комментари-
ем. В области команд символ # может находиться только в 1-й позиции
строки.
      Следует помнить,  что порядок следования описаний крайне  ва-
жен,  т.к.  в процессе их отработки могут меняться даты модификаций
файлов, что оказывает влияние на дальнейшую работу MAKE.
      Запуск MAKE осуществляется введением командной строки следую-
шего вида:

MAKE [<опции>][<макроопределения>]<имя файла описаний>

      Опции и макроопределения MAKE описаны в пп.7.3  и  7.4  соот-
ветственно.
      Имя файла описаний MAKE обычно не имеет расширения и совпада-
ет  с  базовыми именами используемых в описаниях файлов,  но это не
является обязательным.
      Если MAKE обнаруживает,  что очередное описание по каким-либо
причинам не может быть отработано, осуществляется переход к следую-
щему описанию.
      Если в процессе работы выяснится, что целевой файл не сущест-
вует, MAKE продолжает работу, т.к. этот файл может быть создан пос-
ледующими командами.  Если же не существует требуемый или командный
файл  или возникает ошибка при выполнении команды,  MAKE прекращает
свою работу, а на консоль выдается поясняющее сообщение.



                  7.3. Опции MAKE.

      Каждая опция MAKE в командной строке запуска MAKE обозначает-
ся предшествующим символом / .
      Описание опций MAKE приведено ниже:

      /D - Выдавать на консоль даты последних  модификаций  каждого
            сканируемого файла.

      /I - Игнорировать коды возврата после вызываемых программ.

      /N - Выдавать на консоль команды,  выполнение которых не осу-
            ществляется.

      /S  - Не выдавать на консоль сообщений.



                   7.4. Макроопределения.


      Использование макроопределений позволяет отложить определение
компонент описания работы MAKE до момента запуска. Они могут распо-
лагаться как в файле описаний, так и в командной строке.
      Существуют две формы макроопределений:

  <имя>=<значение>
      или

                              - 48 -
  $(<имя>)

      Первая форма задает значение символичекому параметру, который
может  использоваться для определения компонент описания. Допустимо
любое число пробелов между элементом <имя> и  символом  =  и  между
этим символом и элементом <значение>,  которые игнорируются. Пробе-
лы,  специфицированные после <значение>,  рассматриваются как часть
значения. Пробелы как часть значения в командной строке должны зак-
лючаться в двойные апострофы " .
      В файле описаний MAKE каждое макроопределение должно занимать
отдельную строку.
      Одно и  то  же имя может быть определено в нескольких местах.
Подстановка значений осуществляется  в  соответствии  со  следующим
списком (в порядке убывания приоритетов):
      1. Из командой строки.
      2. Из файла описаний MAKE.
      3. Из текущего окружения (например, ключевые слова DOS).

      Вторая форма макроопределений использует значение, определен-
ное  в другом месте.  Элемент <имя> приводится к изображению на ре-
гистре заглавных букв.

      Допускается вложенность  макроопределений,  когда  внутреннее
макроопределение определяется через внешнее. При этом следует избе-
гать рекурсии.
      Пример рекурсивной вложенности макроопределений:
      A=$(B)
      B=$(A)

      Существуют 3  специальные макропеременные,  имеющие следующие
фиксированные значения:
      $*   - часть имени (без расширения) целевого файла;
      $@   - полное имя целевого файла;
      $**  - полный список требуемых файлов.
      Эти макропеременные не требуют  предварительного  описания  и
могут использоваться в файле описаний MAKE.


                 7.5. Правила вывода.


      MAKE обеспечивает  возможность задания правил вывода, которые
помогают правильно интерпретировать неполностью определенные  конс-
трукции.
      Правила вывода могут находиться в файле описаний MAKE  или  в
специальном файле с именем TOOLS.INI, поиск которого осуществляется
на активном драйве  в  подоглавлениях,  определенных  командой  DOS
PATH. В файле TOOLS.INI правилам вывода должна предшествовать стро-
ка, первыми символами которой являются: [make]
      Поиск правила  вывода  осуществляется  в следующей последова-
тельности:
      1. В файле описаний MAKE.
      2. В файле TOOLS.INI.

      Правила вывода задаются в виде:
.<расширение требуемого файла>.<расширение целевого файла>:
      <команда>
      <команда>
         ...

      Пример: содержимое файла описаний MAKE:
.asm.obj:
      MASM $*.asm,,,;

                              - 49 -
test1.obj: test1.asm
test2.obj: test2.asm
      MASM test2.asm;

      Правило вывода занимает первые 2 строки. Прочитав 3-ю строку,
MAKE обнаруживает,  что описание неполно,  т.к. 4-я строка является
уже  началом следующего описания.  Поиск нужного правила вывода ве-
дется по совпадению расширений файлов строки 3 с указанными в  пра-
виле.  После отыскания правила MAKE,  обработав макропеременную $*,
выполняет командную строку:
      MASM test1.asm,,;
      4-я и 5-я строки преставляют собой  законченное  описание,  и
для его интерпретации использования правил вывода не требуется.

