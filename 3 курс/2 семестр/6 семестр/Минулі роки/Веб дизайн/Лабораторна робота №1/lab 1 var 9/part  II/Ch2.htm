<html>

<head>
<title>Лабораторна №1 Частина 1</title>
<link href="style.css" type="text/css" rel="stylesheet" />
</head>

<body>
<a href="index.htm"><img src="pics/termlie.jpg" /></a>
<div class="r">
    <a href="index.htm"><img src="pics/prev.jpg" /></a>
    <a href="Ch1-1.htm" ><img src="pics/next.jpg" /></a>
</div>
<br />
<br />

<span class="header">Chapter 2. Getting Started with C#</span>
<p>You can use C# to create three different types of programs:</p> 
<ul>
<li>Web applications</li>
<li>Windows applications</li>
<li>Console applications</li>
</ul>
<p>The .NET platform is web-centric. The C# language was developed to allow .NET programmers to create very large, powerful, high-quality web applications quickly and easily. The .NET technology for creating web applications is called ASP.NET.</p> 
<p>ASP.NET, the next generation from ASP (Active Server Pages), is composed of two Microsoft development technologies: Web Forms and Web Services. While the development of fully realized web applications using these technologies is beyond the scope of this book, learning the basics of the C# language will certainly get you started in the right direction. C# is generally acknowledged to be the language of choice for ASP.NET development.</p> 
<p>Typically, you'll create an ASP.NET application when you want your program to be available to end users on any platform (e.g., Windows, Mac, Unix). By serving your application over the Web, end users can access your program with any browser.</p> 
<p>When you want the richness and power of a native application running directly on the Windows platform, alternatively you might create a desktop-bound Windows application. The .NET tools for building Windows applications are called Windows Forms; a detailed analysis of this technology is also beyond the scope of this book.</p> 
<p>However, if you don't need a Graphical User Interface (GUI) and just want to write a simple application that talks to a console window (i.e., what we used to call a DOS box), you might consider creating a console application. This book makes extensive use of console applications to illustrate the basics of the C# language.</p> 
<p>Web, Windows, and console applications are described and illustrated in the following pages.</p> 
<span class="blue-italic">Console applications</span>
<p class="left">A console application runs in a console window, as shown in <span class="blue">Figure 2-1</span>. A console window (or DOS box) provides simple text-based output.</p> 
<div class="screen">
<span class="blue_bold">Figure 2-1. A console application</span><br />
 <img class="screen" src="pics/dos.jpg" />
 </div>
<p>Console applications are very helpful when learning a language because they strip away the distraction of the Graphical User Interface. Rather than spending your time creating complex windowing applications, you can focus on the details of the language constructs, such as how you create classes and methods, how you branch based on runtime conditions, and how you loop. All these topics will be covered in detail in coming chapters.</p> 
<span class="blue-italic">Windows applications</span>
<p class="left">A Windows application runs on a PC's desktop. You are already familiar with Windows applications such as Microsoft Word or Excel. Windows applications are much more complex than console applications and can take advantage of the full suite of menus, controls, and other widgets you've come to expect in a modern desktop application. <span class="blue">Figure 2-2</span> shows the output of a simple windows application.</p>
<div class="screen"> 
<span class="blue_bold">Figure 2-2. A Windows application</span><br />
 <img src="pics/window.jpg"/>
 </div>
<span class="blue-italic">ASP.NET applications</span>
<p class="left">An ASP.NET application runs on a web server and delivers its functionality through a browser, typically over the Web. ASP.NET technology facilitates developing web applications quickly and easily. <span class="blue">Figure 2-3</span> shows a message from a simple ASP.NET application.</p>
<div class="screen"> 
<span class="blue_bold">Figure 2-3. An ASP.NET application</span><br />
 <img class="screen" src="pics/window2.jpg"/>
 </div>
<p class="left">Although most commercial applications will be either Windows or ASP.NET programs, console applications have a tremendous advantage in a C# primer. Windows and ASP.NET applications bring a lot more overhead; there is great complexity in managing the window and all the events associated with the window. (Events are covered in <span class="blue">Chapter 19</span>.) Console applications keep things simple — allowing you to focus on the features of the language.</p> 
 <div class="bord">
    <img class="pic" src="pics/dogs.jpg"/>
         <div class="text">This book does not go into all the myriad details of building robust Windows and ASP.NET applications. For complete coverage of these topics, please see Programming ASP.NET and Programming .NET Windows Applications, both by Jesse Liberty and Dan Hurwitz (O'Reilly).</div>
 </div>
 <br /> 

<br />
<a href="index.htm"><img src="pics/termlie.jpg" /></a>
<div class="r">
    <a href="Ch1-6.htm"><img src="pics/prev.jpg" /></a>
    <a href="Ch2-1.htm" ><img src="pics/next.jpg" /></a>
</div>
</body>

<html>